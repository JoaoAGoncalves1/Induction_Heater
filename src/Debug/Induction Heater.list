
Induction Heater.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b3c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08006d3c  08006d3c  00016d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ed0  08006ed0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006ed0  08006ed0  00016ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ed8  08006ed8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ed8  08006ed8  00016ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006edc  08006edc  00016edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006ee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000540  20000074  08006f54  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005b4  08006f54  000205b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012fc7  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028c0  00000000  00000000  00033069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee0  00000000  00000000  00035930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000db8  00000000  00000000  00036810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029a31  00000000  00000000  000375c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013874  00000000  00000000  00060ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd3d8  00000000  00000000  0007486d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00171c45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046f4  00000000  00000000  00171c98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	08006d24 	.word	0x08006d24

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	08006d24 	.word	0x08006d24

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <uart_commands>:
uint8_t delim_1[1], delim_2[] = " ";
uint8_t rx_data = 0, tx_data = 0, new_com = 0, rx_buffer[FIFO_LEN], tx_buffer[FIFO_LEN], tx_flag = FALSE, val_com_flag = FALSE;
volatile uint16_t w_rx_bindex = 0, r_tx_bindex = 0,  r_rx_bindex = 0, w_tx_bindex = 0;
char *comando, *token, *aux_token, *memo_comando, *memo_valid_comando, *message, temp_arr[20], *memory_ptr;

void uart_commands(void){
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
	static machine_state state = state_stand_by;
	char *com_arr[] = {"ON"};
 800061a:	4b59      	ldr	r3, [pc, #356]	; (8000780 <uart_commands+0x16c>)
 800061c:	607b      	str	r3, [r7, #4]

 		if(((w_rx_bindex-r_rx_bindex) != 0) && (new_com >0) ){
 800061e:	4b59      	ldr	r3, [pc, #356]	; (8000784 <uart_commands+0x170>)
 8000620:	881b      	ldrh	r3, [r3, #0]
 8000622:	b29a      	uxth	r2, r3
 8000624:	4b58      	ldr	r3, [pc, #352]	; (8000788 <uart_commands+0x174>)
 8000626:	881b      	ldrh	r3, [r3, #0]
 8000628:	b29b      	uxth	r3, r3
 800062a:	429a      	cmp	r2, r3
 800062c:	f000 809a 	beq.w	8000764 <uart_commands+0x150>
 8000630:	4b56      	ldr	r3, [pc, #344]	; (800078c <uart_commands+0x178>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	f000 8095 	beq.w	8000764 <uart_commands+0x150>

			if((*memo_comando != '$')&& (val_com_flag)){
 800063a:	4b55      	ldr	r3, [pc, #340]	; (8000790 <uart_commands+0x17c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b24      	cmp	r3, #36	; 0x24
 8000642:	d019      	beq.n	8000678 <uart_commands+0x64>
 8000644:	4b53      	ldr	r3, [pc, #332]	; (8000794 <uart_commands+0x180>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d015      	beq.n	8000678 <uart_commands+0x64>
				memo_valid_comando = (char*)malloc(strlen(memo_comando)+1);
 800064c:	4b50      	ldr	r3, [pc, #320]	; (8000790 <uart_commands+0x17c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4618      	mov	r0, r3
 8000652:	f7ff fdff 	bl	8000254 <strlen>
 8000656:	4603      	mov	r3, r0
 8000658:	3301      	adds	r3, #1
 800065a:	4618      	mov	r0, r3
 800065c:	f005 fa36 	bl	8005acc <malloc>
 8000660:	4603      	mov	r3, r0
 8000662:	461a      	mov	r2, r3
 8000664:	4b4c      	ldr	r3, [pc, #304]	; (8000798 <uart_commands+0x184>)
 8000666:	601a      	str	r2, [r3, #0]
				strcpy (memo_valid_comando,memo_comando);
 8000668:	4b4b      	ldr	r3, [pc, #300]	; (8000798 <uart_commands+0x184>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a48      	ldr	r2, [pc, #288]	; (8000790 <uart_commands+0x17c>)
 800066e:	6812      	ldr	r2, [r2, #0]
 8000670:	4611      	mov	r1, r2
 8000672:	4618      	mov	r0, r3
 8000674:	f005 fbf0 	bl	8005e58 <strcpy>
			}

			comando = _my_strtok(&rx_buffer[r_rx_bindex&(FIFO_LEN-1)], delim_1[0]);
 8000678:	4b43      	ldr	r3, [pc, #268]	; (8000788 <uart_commands+0x174>)
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	b29b      	uxth	r3, r3
 800067e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000682:	4a46      	ldr	r2, [pc, #280]	; (800079c <uart_commands+0x188>)
 8000684:	4413      	add	r3, r2
 8000686:	4a46      	ldr	r2, [pc, #280]	; (80007a0 <uart_commands+0x18c>)
 8000688:	7812      	ldrb	r2, [r2, #0]
 800068a:	4611      	mov	r1, r2
 800068c:	4618      	mov	r0, r3
 800068e:	f000 f90d 	bl	80008ac <_my_strtok>
 8000692:	4603      	mov	r3, r0
 8000694:	4a43      	ldr	r2, [pc, #268]	; (80007a4 <uart_commands+0x190>)
 8000696:	6013      	str	r3, [r2, #0]
			memo_comando = (char*)malloc(strlen(comando)+1);//+1 para o caractere '\0'
 8000698:	4b42      	ldr	r3, [pc, #264]	; (80007a4 <uart_commands+0x190>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff fdd9 	bl	8000254 <strlen>
 80006a2:	4603      	mov	r3, r0
 80006a4:	3301      	adds	r3, #1
 80006a6:	4618      	mov	r0, r3
 80006a8:	f005 fa10 	bl	8005acc <malloc>
 80006ac:	4603      	mov	r3, r0
 80006ae:	461a      	mov	r2, r3
 80006b0:	4b37      	ldr	r3, [pc, #220]	; (8000790 <uart_commands+0x17c>)
 80006b2:	601a      	str	r2, [r3, #0]
			strcpy (memo_comando,comando);
 80006b4:	4b36      	ldr	r3, [pc, #216]	; (8000790 <uart_commands+0x17c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a3a      	ldr	r2, [pc, #232]	; (80007a4 <uart_commands+0x190>)
 80006ba:	6812      	ldr	r2, [r2, #0]
 80006bc:	4611      	mov	r1, r2
 80006be:	4618      	mov	r0, r3
 80006c0:	f005 fbca 	bl	8005e58 <strcpy>
			r_rx_bindex += (strlen(comando)+1);
 80006c4:	4b37      	ldr	r3, [pc, #220]	; (80007a4 <uart_commands+0x190>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff fdc3 	bl	8000254 <strlen>
 80006ce:	4603      	mov	r3, r0
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <uart_commands+0x174>)
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	4413      	add	r3, r2
 80006da:	b29b      	uxth	r3, r3
 80006dc:	3301      	adds	r3, #1
 80006de:	b29a      	uxth	r2, r3
 80006e0:	4b29      	ldr	r3, [pc, #164]	; (8000788 <uart_commands+0x174>)
 80006e2:	801a      	strh	r2, [r3, #0]
			token = strtok(comando, delim_2);
 80006e4:	4b2f      	ldr	r3, [pc, #188]	; (80007a4 <uart_commands+0x190>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	492f      	ldr	r1, [pc, #188]	; (80007a8 <uart_commands+0x194>)
 80006ea:	4618      	mov	r0, r3
 80006ec:	f005 fbbc 	bl	8005e68 <strtok>
 80006f0:	4603      	mov	r3, r0
 80006f2:	4a2e      	ldr	r2, [pc, #184]	; (80007ac <uart_commands+0x198>)
 80006f4:	6013      	str	r3, [r2, #0]
			_push_message(memo_comando);
 80006f6:	4b26      	ldr	r3, [pc, #152]	; (8000790 <uart_commands+0x17c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 f860 	bl	80007c0 <_push_message>
			append_char(delim_1[0]);
 8000700:	4b27      	ldr	r3, [pc, #156]	; (80007a0 <uart_commands+0x18c>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	4618      	mov	r0, r3
 8000706:	f000 f88d 	bl	8000824 <append_char>

			switch(find_com(com_arr, token, 27)){
 800070a:	4b28      	ldr	r3, [pc, #160]	; (80007ac <uart_commands+0x198>)
 800070c:	6819      	ldr	r1, [r3, #0]
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	221b      	movs	r2, #27
 8000712:	4618      	mov	r0, r3
 8000714:	f000 f8f4 	bl	8000900 <find_com>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d10e      	bne.n	800073c <uart_commands+0x128>
			case 0:
				if (state == state_stand_by || state == state_yellow){
 800071e:	4b24      	ldr	r3, [pc, #144]	; (80007b0 <uart_commands+0x19c>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d003      	beq.n	800072e <uart_commands+0x11a>
 8000726:	4b22      	ldr	r3, [pc, #136]	; (80007b0 <uart_commands+0x19c>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b02      	cmp	r3, #2
 800072c:	d102      	bne.n	8000734 <uart_commands+0x120>
						//Start PWM
						//Start medidodres de tem
					turn_on_heater();
 800072e:	f000 f931 	bl	8000994 <turn_on_heater>
					break;
 8000732:	e00a      	b.n	800074a <uart_commands+0x136>
				}
				else
					_push_message("Erro");
 8000734:	481f      	ldr	r0, [pc, #124]	; (80007b4 <uart_commands+0x1a0>)
 8000736:	f000 f843 	bl	80007c0 <_push_message>

				break;
 800073a:	e006      	b.n	800074a <uart_commands+0x136>
				default:
					_push_message("INVALID COMMAND!\n");
 800073c:	481e      	ldr	r0, [pc, #120]	; (80007b8 <uart_commands+0x1a4>)
 800073e:	f000 f83f 	bl	80007c0 <_push_message>
					 val_com_flag = FALSE;
 8000742:	4b14      	ldr	r3, [pc, #80]	; (8000794 <uart_commands+0x180>)
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]
					break;
 8000748:	bf00      	nop
			}
			new_com--; //Limpa a flag de novo comando
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <uart_commands+0x178>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	3b01      	subs	r3, #1
 8000750:	b2da      	uxtb	r2, r3
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <uart_commands+0x178>)
 8000754:	701a      	strb	r2, [r3, #0]
			append_char(delim_1[0]);
 8000756:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <uart_commands+0x18c>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	4618      	mov	r0, r3
 800075c:	f000 f862 	bl	8000824 <append_char>
			//append_char('>');
			start_tx();
 8000760:	f000 f87e 	bl	8000860 <start_tx>
	}
 	if(tx_flag){
 8000764:	4b15      	ldr	r3, [pc, #84]	; (80007bc <uart_commands+0x1a8>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d004      	beq.n	8000776 <uart_commands+0x162>
 		start_tx();
 800076c:	f000 f878 	bl	8000860 <start_tx>
 		tx_flag = FALSE;
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <uart_commands+0x1a8>)
 8000772:	2200      	movs	r2, #0
 8000774:	701a      	strb	r2, [r3, #0]
 	}
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	08006d3c 	.word	0x08006d3c
 8000784:	20000496 	.word	0x20000496
 8000788:	2000049a 	.word	0x2000049a
 800078c:	20000093 	.word	0x20000093
 8000790:	200004a8 	.word	0x200004a8
 8000794:	20000495 	.word	0x20000495
 8000798:	200004ac 	.word	0x200004ac
 800079c:	20000094 	.word	0x20000094
 80007a0:	20000090 	.word	0x20000090
 80007a4:	200004a0 	.word	0x200004a0
 80007a8:	20000000 	.word	0x20000000
 80007ac:	200004a4 	.word	0x200004a4
 80007b0:	200004c4 	.word	0x200004c4
 80007b4:	08006d40 	.word	0x08006d40
 80007b8:	08006d48 	.word	0x08006d48
 80007bc:	20000494 	.word	0x20000494

080007c0 <_push_message>:
void _push_message(char *message){
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]

	char *aux_ptr;
	uint8_t i = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	72fb      	strb	r3, [r7, #11]
	aux_ptr = message;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	60fb      	str	r3, [r7, #12]

	for (i=0; i<strlen(message); i++){
 80007d0:	2300      	movs	r3, #0
 80007d2:	72fb      	strb	r3, [r7, #11]
 80007d4:	e015      	b.n	8000802 <_push_message+0x42>

		 tx_buffer[w_tx_bindex&(FIFO_LEN-1)] = *aux_ptr;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <_push_message+0x5c>)
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	b29b      	uxth	r3, r3
 80007dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80007e0:	68fa      	ldr	r2, [r7, #12]
 80007e2:	7811      	ldrb	r1, [r2, #0]
 80007e4:	4a0e      	ldr	r2, [pc, #56]	; (8000820 <_push_message+0x60>)
 80007e6:	54d1      	strb	r1, [r2, r3]
		  aux_ptr++;
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	3301      	adds	r3, #1
 80007ec:	60fb      	str	r3, [r7, #12]
		  w_tx_bindex++;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <_push_message+0x5c>)
 80007f0:	881b      	ldrh	r3, [r3, #0]
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	3301      	adds	r3, #1
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	4b08      	ldr	r3, [pc, #32]	; (800081c <_push_message+0x5c>)
 80007fa:	801a      	strh	r2, [r3, #0]
	for (i=0; i<strlen(message); i++){
 80007fc:	7afb      	ldrb	r3, [r7, #11]
 80007fe:	3301      	adds	r3, #1
 8000800:	72fb      	strb	r3, [r7, #11]
 8000802:	7afc      	ldrb	r4, [r7, #11]
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f7ff fd25 	bl	8000254 <strlen>
 800080a:	4603      	mov	r3, r0
 800080c:	429c      	cmp	r4, r3
 800080e:	d3e2      	bcc.n	80007d6 <_push_message+0x16>
	}
}
 8000810:	bf00      	nop
 8000812:	bf00      	nop
 8000814:	3714      	adds	r7, #20
 8000816:	46bd      	mov	sp, r7
 8000818:	bd90      	pop	{r4, r7, pc}
 800081a:	bf00      	nop
 800081c:	2000049c 	.word	0x2000049c
 8000820:	20000294 	.word	0x20000294

08000824 <append_char>:
void append_char(char caract){ // ACRESCENTA UM CARRIAGE RETURN NO TERMINAL
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]

	tx_buffer[w_tx_bindex&(FIFO_LEN-1)] = caract;
 800082e:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <append_char+0x34>)
 8000830:	881b      	ldrh	r3, [r3, #0]
 8000832:	b29b      	uxth	r3, r3
 8000834:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000838:	4908      	ldr	r1, [pc, #32]	; (800085c <append_char+0x38>)
 800083a:	79fa      	ldrb	r2, [r7, #7]
 800083c:	54ca      	strb	r2, [r1, r3]
	w_tx_bindex++;
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <append_char+0x34>)
 8000840:	881b      	ldrh	r3, [r3, #0]
 8000842:	b29b      	uxth	r3, r3
 8000844:	3301      	adds	r3, #1
 8000846:	b29a      	uxth	r2, r3
 8000848:	4b03      	ldr	r3, [pc, #12]	; (8000858 <append_char+0x34>)
 800084a:	801a      	strh	r2, [r3, #0]
}
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	2000049c 	.word	0x2000049c
 800085c:	20000294 	.word	0x20000294

08000860 <start_tx>:
void start_tx(){
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0

	if (USART3->ISR & USART_ISR_TC){// Transmission Complete (TC) É ATIVADA QUANDO A TRANSMISSÃO É CONCLUIDA - CASO NAO ESTEJA CONCLUIDA NAO SE DEVE INVOCAR NOVAMENTE HAL_UART_Transmit_IT()
 8000864:	4b0d      	ldr	r3, [pc, #52]	; (800089c <start_tx+0x3c>)
 8000866:	69db      	ldr	r3, [r3, #28]
 8000868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800086c:	2b00      	cmp	r3, #0
 800086e:	d012      	beq.n	8000896 <start_tx+0x36>
		HAL_UART_Transmit_IT(&huart3, (uint8_t *)&tx_buffer[r_tx_bindex&(FIFO_LEN-1)],1);
 8000870:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <start_tx+0x40>)
 8000872:	881b      	ldrh	r3, [r3, #0]
 8000874:	b29b      	uxth	r3, r3
 8000876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800087a:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <start_tx+0x44>)
 800087c:	4413      	add	r3, r2
 800087e:	2201      	movs	r2, #1
 8000880:	4619      	mov	r1, r3
 8000882:	4809      	ldr	r0, [pc, #36]	; (80008a8 <start_tx+0x48>)
 8000884:	f003 fda8 	bl	80043d8 <HAL_UART_Transmit_IT>
		r_tx_bindex++;
 8000888:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <start_tx+0x40>)
 800088a:	881b      	ldrh	r3, [r3, #0]
 800088c:	b29b      	uxth	r3, r3
 800088e:	3301      	adds	r3, #1
 8000890:	b29a      	uxth	r2, r3
 8000892:	4b03      	ldr	r3, [pc, #12]	; (80008a0 <start_tx+0x40>)
 8000894:	801a      	strh	r2, [r3, #0]

	}
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40004800 	.word	0x40004800
 80008a0:	20000498 	.word	0x20000498
 80008a4:	20000294 	.word	0x20000294
 80008a8:	20000518 	.word	0x20000518

080008ac <_my_strtok>:
char* _my_strtok(char* str, uint8_t delimiter){
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	460b      	mov	r3, r1
 80008b6:	70fb      	strb	r3, [r7, #3]
	uint8_t i=0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	73fb      	strb	r3, [r7, #15]
	for(i=0; str[i] != delimiter; i++){
 80008bc:	2300      	movs	r3, #0
 80008be:	73fb      	strb	r3, [r7, #15]
 80008c0:	e009      	b.n	80008d6 <_my_strtok+0x2a>
		i&= (FIFO_LEN-1);
		temp_arr[i] = str[i];
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	441a      	add	r2, r3
 80008c8:	7bfb      	ldrb	r3, [r7, #15]
 80008ca:	7811      	ldrb	r1, [r2, #0]
 80008cc:	4a0b      	ldr	r2, [pc, #44]	; (80008fc <_my_strtok+0x50>)
 80008ce:	54d1      	strb	r1, [r2, r3]
	for(i=0; str[i] != delimiter; i++){
 80008d0:	7bfb      	ldrb	r3, [r7, #15]
 80008d2:	3301      	adds	r3, #1
 80008d4:	73fb      	strb	r3, [r7, #15]
 80008d6:	7bfb      	ldrb	r3, [r7, #15]
 80008d8:	687a      	ldr	r2, [r7, #4]
 80008da:	4413      	add	r3, r2
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	78fa      	ldrb	r2, [r7, #3]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d1ee      	bne.n	80008c2 <_my_strtok+0x16>

	}

	temp_arr[i] = '\0';
 80008e4:	7bfb      	ldrb	r3, [r7, #15]
 80008e6:	4a05      	ldr	r2, [pc, #20]	; (80008fc <_my_strtok+0x50>)
 80008e8:	2100      	movs	r1, #0
 80008ea:	54d1      	strb	r1, [r2, r3]
	return temp_arr;
 80008ec:	4b03      	ldr	r3, [pc, #12]	; (80008fc <_my_strtok+0x50>)
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3714      	adds	r7, #20
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	200004b0 	.word	0x200004b0

08000900 <find_com>:
uint8_t find_com(char *com_array[], char*token, uint8_t arr_len){
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	4613      	mov	r3, r2
 800090c:	71fb      	strb	r3, [r7, #7]

	uint8_t i = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	75fb      	strb	r3, [r7, #23]
	while((strcmp(com_array[i], token))){
 8000912:	e00a      	b.n	800092a <find_com+0x2a>
		if(i == (arr_len-1)){
 8000914:	7dfa      	ldrb	r2, [r7, #23]
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	3b01      	subs	r3, #1
 800091a:	429a      	cmp	r2, r3
 800091c:	d102      	bne.n	8000924 <find_com+0x24>
			i = -1;
 800091e:	23ff      	movs	r3, #255	; 0xff
 8000920:	75fb      	strb	r3, [r7, #23]
			break;
 8000922:	e00e      	b.n	8000942 <find_com+0x42>
		}
		i++;
 8000924:	7dfb      	ldrb	r3, [r7, #23]
 8000926:	3301      	adds	r3, #1
 8000928:	75fb      	strb	r3, [r7, #23]
	while((strcmp(com_array[i], token))){
 800092a:	7dfb      	ldrb	r3, [r7, #23]
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	68fa      	ldr	r2, [r7, #12]
 8000930:	4413      	add	r3, r2
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	68b9      	ldr	r1, [r7, #8]
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff fc82 	bl	8000240 <strcmp>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d1e8      	bne.n	8000914 <find_com+0x14>
	}
	return i;
 8000942:	7dfb      	ldrb	r3, [r7, #23]
}
 8000944:	4618      	mov	r0, r3
 8000946:	3718      	adds	r7, #24
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_GPIO_Init+0x44>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a0e      	ldr	r2, [pc, #56]	; (8000990 <MX_GPIO_Init+0x44>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_GPIO_Init+0x44>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_GPIO_Init+0x44>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a08      	ldr	r2, [pc, #32]	; (8000990 <MX_GPIO_Init+0x44>)
 8000970:	f043 0308 	orr.w	r3, r3, #8
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_GPIO_Init+0x44>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0308 	and.w	r3, r3, #8
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]

}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800

08000994 <turn_on_heater>:
#include <string.h>
#include <stdlib.h>
#include "heater.h"
#include "function.h"

void turn_on_heater(){
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
	...

080009a4 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80009ac:	1d39      	adds	r1, r7, #4
 80009ae:	f04f 33ff 	mov.w	r3, #4294967295
 80009b2:	2201      	movs	r2, #1
 80009b4:	4803      	ldr	r0, [pc, #12]	; (80009c4 <__io_putchar+0x20>)
 80009b6:	f003 fbc7 	bl	8004148 <HAL_UART_Transmit>
	return ch;
 80009ba:	687b      	ldr	r3, [r7, #4]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000518 	.word	0x20000518

080009c8 <__io_getchar>:
int __io_getchar(void){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	71fb      	strb	r3, [r7, #7]
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <__io_getchar+0x38>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2208      	movs	r2, #8
 80009d8:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80009da:	1df9      	adds	r1, r7, #7
 80009dc:	f04f 33ff 	mov.w	r3, #4294967295
 80009e0:	2201      	movs	r2, #1
 80009e2:	4807      	ldr	r0, [pc, #28]	; (8000a00 <__io_getchar+0x38>)
 80009e4:	f003 fc33 	bl	800424e <HAL_UART_Receive>
	HAL_UART_Transmit(&huart3,(uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80009e8:	1df9      	adds	r1, r7, #7
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295
 80009ee:	2201      	movs	r2, #1
 80009f0:	4803      	ldr	r0, [pc, #12]	; (8000a00 <__io_getchar+0x38>)
 80009f2:	f003 fba9 	bl	8004148 <HAL_UART_Transmit>
	return ch;
 80009f6:	79fb      	ldrb	r3, [r7, #7]

}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000518 	.word	0x20000518

08000a04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a08:	f000 fc91 	bl	800132e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0c:	f000 f82a 	bl	8000a64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a10:	f7ff ff9c 	bl	800094c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a14:	f000 fb5e 	bl	80010d4 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000a18:	f000 fa8a 	bl	8000f30 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000a1c:	480d      	ldr	r0, [pc, #52]	; (8000a54 <main+0x50>)
 8000a1e:	f002 f9d7 	bl	8002dd0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a22:	2100      	movs	r1, #0
 8000a24:	480b      	ldr	r0, [pc, #44]	; (8000a54 <main+0x50>)
 8000a26:	f002 faad 	bl	8002f84 <HAL_TIM_PWM_Start>
  setvbuf(stdin, NULL, _IONBF, 0);
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <main+0x54>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	6858      	ldr	r0, [r3, #4]
 8000a30:	2300      	movs	r3, #0
 8000a32:	2202      	movs	r2, #2
 8000a34:	2100      	movs	r1, #0
 8000a36:	f005 f949 	bl	8005ccc <setvbuf>
  HAL_UART_Receive_IT(&huart3, (uint8_t *)&rx_data, 1);
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	4907      	ldr	r1, [pc, #28]	; (8000a5c <main+0x58>)
 8000a3e:	4808      	ldr	r0, [pc, #32]	; (8000a60 <main+0x5c>)
 8000a40:	f003 fd28 	bl	8004494 <HAL_UART_Receive_IT>
  append_char('>');
 8000a44:	203e      	movs	r0, #62	; 0x3e
 8000a46:	f7ff feed 	bl	8000824 <append_char>
  start_tx();
 8000a4a:	f7ff ff09 	bl	8000860 <start_tx>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uart_commands();
 8000a4e:	f7ff fde1 	bl	8000614 <uart_commands>
 8000a52:	e7fc      	b.n	8000a4e <main+0x4a>
 8000a54:	200004cc 	.word	0x200004cc
 8000a58:	20000010 	.word	0x20000010
 8000a5c:	20000091 	.word	0x20000091
 8000a60:	20000518 	.word	0x20000518

08000a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b094      	sub	sp, #80	; 0x50
 8000a68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6a:	f107 031c 	add.w	r3, r7, #28
 8000a6e:	2234      	movs	r2, #52	; 0x34
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f005 f832 	bl	8005adc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a78:	f107 0308 	add.w	r3, r7, #8
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a88:	4b2b      	ldr	r3, [pc, #172]	; (8000b38 <SystemClock_Config+0xd4>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8c:	4a2a      	ldr	r2, [pc, #168]	; (8000b38 <SystemClock_Config+0xd4>)
 8000a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a92:	6413      	str	r3, [r2, #64]	; 0x40
 8000a94:	4b28      	ldr	r3, [pc, #160]	; (8000b38 <SystemClock_Config+0xd4>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aa0:	4b26      	ldr	r3, [pc, #152]	; (8000b3c <SystemClock_Config+0xd8>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a25      	ldr	r2, [pc, #148]	; (8000b3c <SystemClock_Config+0xd8>)
 8000aa6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000aaa:	6013      	str	r3, [r2, #0]
 8000aac:	4b23      	ldr	r3, [pc, #140]	; (8000b3c <SystemClock_Config+0xd8>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000abc:	2301      	movs	r3, #1
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ac0:	2310      	movs	r3, #16
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000acc:	2308      	movs	r3, #8
 8000ace:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000ad0:	23d8      	movs	r3, #216	; 0xd8
 8000ad2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ad8:	2304      	movs	r3, #4
 8000ada:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000adc:	2302      	movs	r3, #2
 8000ade:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f001 f81f 	bl	8001b28 <HAL_RCC_OscConfig>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000af0:	f000 f826 	bl	8000b40 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000af4:	f000 ffc8 	bl	8001a88 <HAL_PWREx_EnableOverDrive>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000afe:	f000 f81f 	bl	8000b40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b02:	230f      	movs	r3, #15
 8000b04:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b06:	2302      	movs	r3, #2
 8000b08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b0e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b18:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000b1a:	f107 0308 	add.w	r3, r7, #8
 8000b1e:	2107      	movs	r1, #7
 8000b20:	4618      	mov	r0, r3
 8000b22:	f001 faaf 	bl	8002084 <HAL_RCC_ClockConfig>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000b2c:	f000 f808 	bl	8000b40 <Error_Handler>
  }
}
 8000b30:	bf00      	nop
 8000b32:	3750      	adds	r7, #80	; 0x50
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40007000 	.word	0x40007000

08000b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
}
 8000b46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <Error_Handler+0x8>
	...

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b74:	6453      	str	r3, [r2, #68]	; 0x44
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	40023800 	.word	0x40023800

08000b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <NMI_Handler+0x4>

08000b9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <HardFault_Handler+0x4>

08000ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <MemManage_Handler+0x4>

08000ba6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <BusFault_Handler+0x4>

08000bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <UsageFault_Handler+0x4>

08000bb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be0:	f000 fbe2 	bl	80013a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bec:	4802      	ldr	r0, [pc, #8]	; (8000bf8 <TIM2_IRQHandler+0x10>)
 8000bee:	f002 fac3 	bl	8003178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200004cc 	.word	0x200004cc

08000bfc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c00:	4802      	ldr	r0, [pc, #8]	; (8000c0c <USART3_IRQHandler+0x10>)
 8000c02:	f003 fc8b 	bl	800451c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000518 	.word	0x20000518

08000c10 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]

	uint32_t i = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60fb      	str	r3, [r7, #12]

	if(huart == &huart3){
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a35      	ldr	r2, [pc, #212]	; (8000cf4 <HAL_UART_RxCpltCallback+0xe4>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d163      	bne.n	8000cec <HAL_UART_RxCpltCallback+0xdc>

		HAL_UART_Receive_IT(&huart3, (uint8_t *)&rx_data, 1);
 8000c24:	2201      	movs	r2, #1
 8000c26:	4934      	ldr	r1, [pc, #208]	; (8000cf8 <HAL_UART_RxCpltCallback+0xe8>)
 8000c28:	4832      	ldr	r0, [pc, #200]	; (8000cf4 <HAL_UART_RxCpltCallback+0xe4>)
 8000c2a:	f003 fc33 	bl	8004494 <HAL_UART_Receive_IT>
		rx_buffer[w_rx_bindex&(FIFO_LEN-1)] = rx_data;
 8000c2e:	4b33      	ldr	r3, [pc, #204]	; (8000cfc <HAL_UART_RxCpltCallback+0xec>)
 8000c30:	881b      	ldrh	r3, [r3, #0]
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c38:	4a2f      	ldr	r2, [pc, #188]	; (8000cf8 <HAL_UART_RxCpltCallback+0xe8>)
 8000c3a:	7811      	ldrb	r1, [r2, #0]
 8000c3c:	4a30      	ldr	r2, [pc, #192]	; (8000d00 <HAL_UART_RxCpltCallback+0xf0>)
 8000c3e:	54d1      	strb	r1, [r2, r3]
		w_rx_bindex++;
 8000c40:	4b2e      	ldr	r3, [pc, #184]	; (8000cfc <HAL_UART_RxCpltCallback+0xec>)
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	3301      	adds	r3, #1
 8000c48:	b29a      	uxth	r2, r3
 8000c4a:	4b2c      	ldr	r3, [pc, #176]	; (8000cfc <HAL_UART_RxCpltCallback+0xec>)
 8000c4c:	801a      	strh	r2, [r3, #0]

		if((rx_data == '\n') || (rx_data == '\r'))
 8000c4e:	4b2a      	ldr	r3, [pc, #168]	; (8000cf8 <HAL_UART_RxCpltCallback+0xe8>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b0a      	cmp	r3, #10
 8000c54:	d003      	beq.n	8000c5e <HAL_UART_RxCpltCallback+0x4e>
 8000c56:	4b28      	ldr	r3, [pc, #160]	; (8000cf8 <HAL_UART_RxCpltCallback+0xe8>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b0d      	cmp	r3, #13
 8000c5c:	d10a      	bne.n	8000c74 <HAL_UART_RxCpltCallback+0x64>
		{
			new_com++;
 8000c5e:	4b29      	ldr	r3, [pc, #164]	; (8000d04 <HAL_UART_RxCpltCallback+0xf4>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	3301      	adds	r3, #1
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	4b27      	ldr	r3, [pc, #156]	; (8000d04 <HAL_UART_RxCpltCallback+0xf4>)
 8000c68:	701a      	strb	r2, [r3, #0]
			delim_1[0] = rx_data;// dependendo de terminal pode estar configurado para carriage return ou new line
 8000c6a:	4b23      	ldr	r3, [pc, #140]	; (8000cf8 <HAL_UART_RxCpltCallback+0xe8>)
 8000c6c:	781a      	ldrb	r2, [r3, #0]
 8000c6e:	4b26      	ldr	r3, [pc, #152]	; (8000d08 <HAL_UART_RxCpltCallback+0xf8>)
 8000c70:	701a      	strb	r2, [r3, #0]
			w_rx_bindex-=2;
			rx_buffer[w_rx_bindex&(FIFO_LEN-1)] = 0;
			rx_buffer[(w_rx_bindex+1)&(FIFO_LEN-1)] = 0;
		}
	}
}
 8000c72:	e03b      	b.n	8000cec <HAL_UART_RxCpltCallback+0xdc>
		}else if(rx_data == '\e')
 8000c74:	4b20      	ldr	r3, [pc, #128]	; (8000cf8 <HAL_UART_RxCpltCallback+0xe8>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b1b      	cmp	r3, #27
 8000c7a:	d11b      	bne.n	8000cb4 <HAL_UART_RxCpltCallback+0xa4>
		 for(i = 0; i< FIFO_LEN; i++) // Limpa o array
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	e007      	b.n	8000c92 <HAL_UART_RxCpltCallback+0x82>
			  rx_buffer[i] = 0;
 8000c82:	4a1f      	ldr	r2, [pc, #124]	; (8000d00 <HAL_UART_RxCpltCallback+0xf0>)
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	4413      	add	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	701a      	strb	r2, [r3, #0]
		 for(i = 0; i< FIFO_LEN; i++) // Limpa o array
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c98:	d3f3      	bcc.n	8000c82 <HAL_UART_RxCpltCallback+0x72>
		  w_rx_bindex = 0;
 8000c9a:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <HAL_UART_RxCpltCallback+0xec>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	801a      	strh	r2, [r3, #0]
		  r_rx_bindex = 0;
 8000ca0:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <HAL_UART_RxCpltCallback+0xfc>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	801a      	strh	r2, [r3, #0]
		  _push_message("ESC\rALL CLEAR\r\r>");
 8000ca6:	481a      	ldr	r0, [pc, #104]	; (8000d10 <HAL_UART_RxCpltCallback+0x100>)
 8000ca8:	f7ff fd8a 	bl	80007c0 <_push_message>
		  tx_flag = TRUE; // EXSTE ALGO PARA TRANSMITIR
 8000cac:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <HAL_UART_RxCpltCallback+0x104>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	701a      	strb	r2, [r3, #0]
}
 8000cb2:	e01b      	b.n	8000cec <HAL_UART_RxCpltCallback+0xdc>
		else if(rx_data == '\b')
 8000cb4:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <HAL_UART_RxCpltCallback+0xe8>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b08      	cmp	r3, #8
 8000cba:	d117      	bne.n	8000cec <HAL_UART_RxCpltCallback+0xdc>
			w_rx_bindex-=2;
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <HAL_UART_RxCpltCallback+0xec>)
 8000cbe:	881b      	ldrh	r3, [r3, #0]
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	3b02      	subs	r3, #2
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <HAL_UART_RxCpltCallback+0xec>)
 8000cc8:	801a      	strh	r2, [r3, #0]
			rx_buffer[w_rx_bindex&(FIFO_LEN-1)] = 0;
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <HAL_UART_RxCpltCallback+0xec>)
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000cd4:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <HAL_UART_RxCpltCallback+0xf0>)
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	54d1      	strb	r1, [r2, r3]
			rx_buffer[(w_rx_bindex+1)&(FIFO_LEN-1)] = 0;
 8000cda:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <HAL_UART_RxCpltCallback+0xec>)
 8000cdc:	881b      	ldrh	r3, [r3, #0]
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ce6:	4a06      	ldr	r2, [pc, #24]	; (8000d00 <HAL_UART_RxCpltCallback+0xf0>)
 8000ce8:	2100      	movs	r1, #0
 8000cea:	54d1      	strb	r1, [r2, r3]
}
 8000cec:	bf00      	nop
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000518 	.word	0x20000518
 8000cf8:	20000091 	.word	0x20000091
 8000cfc:	20000496 	.word	0x20000496
 8000d00:	20000094 	.word	0x20000094
 8000d04:	20000093 	.word	0x20000093
 8000d08:	20000090 	.word	0x20000090
 8000d0c:	2000049a 	.word	0x2000049a
 8000d10:	08006d5c 	.word	0x08006d5c
 8000d14:	20000494 	.word	0x20000494

08000d18 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]

	if(huart == &huart3){
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a12      	ldr	r2, [pc, #72]	; (8000d6c <HAL_UART_TxCpltCallback+0x54>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d11c      	bne.n	8000d62 <HAL_UART_TxCpltCallback+0x4a>

		if((w_tx_bindex-r_tx_bindex) != 0)
 8000d28:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <HAL_UART_TxCpltCallback+0x58>)
 8000d2a:	881b      	ldrh	r3, [r3, #0]
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <HAL_UART_TxCpltCallback+0x5c>)
 8000d30:	881b      	ldrh	r3, [r3, #0]
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d014      	beq.n	8000d62 <HAL_UART_TxCpltCallback+0x4a>
		{
			tx_data = tx_buffer[r_tx_bindex&(FIFO_LEN-1)];
 8000d38:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <HAL_UART_TxCpltCallback+0x5c>)
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d42:	4a0d      	ldr	r2, [pc, #52]	; (8000d78 <HAL_UART_TxCpltCallback+0x60>)
 8000d44:	5cd2      	ldrb	r2, [r2, r3]
 8000d46:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <HAL_UART_TxCpltCallback+0x64>)
 8000d48:	701a      	strb	r2, [r3, #0]
			r_tx_bindex++;
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <HAL_UART_TxCpltCallback+0x5c>)
 8000d4c:	881b      	ldrh	r3, [r3, #0]
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	3301      	adds	r3, #1
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <HAL_UART_TxCpltCallback+0x5c>)
 8000d56:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart3, (uint8_t *)&tx_data,1);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	4908      	ldr	r1, [pc, #32]	; (8000d7c <HAL_UART_TxCpltCallback+0x64>)
 8000d5c:	4803      	ldr	r0, [pc, #12]	; (8000d6c <HAL_UART_TxCpltCallback+0x54>)
 8000d5e:	f003 fb3b 	bl	80043d8 <HAL_UART_Transmit_IT>

		}
	}
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000518 	.word	0x20000518
 8000d70:	2000049c 	.word	0x2000049c
 8000d74:	20000498 	.word	0x20000498
 8000d78:	20000294 	.word	0x20000294
 8000d7c:	20000092 	.word	0x20000092

08000d80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return 1;
 8000d84:	2301      	movs	r3, #1
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <_kill>:

int _kill(int pid, int sig)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d9a:	f004 fe6d 	bl	8005a78 <__errno>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2216      	movs	r2, #22
 8000da2:	601a      	str	r2, [r3, #0]
  return -1;
 8000da4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <_exit>:

void _exit (int status)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000db8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff ffe7 	bl	8000d90 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000dc2:	e7fe      	b.n	8000dc2 <_exit+0x12>

08000dc4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	e00a      	b.n	8000dec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dd6:	f7ff fdf7 	bl	80009c8 <__io_getchar>
 8000dda:	4601      	mov	r1, r0
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	1c5a      	adds	r2, r3, #1
 8000de0:	60ba      	str	r2, [r7, #8]
 8000de2:	b2ca      	uxtb	r2, r1
 8000de4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	3301      	adds	r3, #1
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	697a      	ldr	r2, [r7, #20]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	dbf0      	blt.n	8000dd6 <_read+0x12>
  }

  return len;
 8000df4:	687b      	ldr	r3, [r7, #4]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b086      	sub	sp, #24
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	60f8      	str	r0, [r7, #12]
 8000e06:	60b9      	str	r1, [r7, #8]
 8000e08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
 8000e0e:	e009      	b.n	8000e24 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	1c5a      	adds	r2, r3, #1
 8000e14:	60ba      	str	r2, [r7, #8]
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fdc3 	bl	80009a4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	3301      	adds	r3, #1
 8000e22:	617b      	str	r3, [r7, #20]
 8000e24:	697a      	ldr	r2, [r7, #20]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	dbf1      	blt.n	8000e10 <_write+0x12>
  }
  return len;
 8000e2c:	687b      	ldr	r3, [r7, #4]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3718      	adds	r7, #24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <_close>:

int _close(int file)
{
 8000e36:	b480      	push	{r7}
 8000e38:	b083      	sub	sp, #12
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b083      	sub	sp, #12
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
 8000e56:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e5e:	605a      	str	r2, [r3, #4]
  return 0;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <_isatty>:

int _isatty(int file)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e76:	2301      	movs	r3, #1
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
	...

08000ea0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea8:	4a14      	ldr	r2, [pc, #80]	; (8000efc <_sbrk+0x5c>)
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <_sbrk+0x60>)
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb4:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <_sbrk+0x64>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d102      	bne.n	8000ec2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <_sbrk+0x64>)
 8000ebe:	4a12      	ldr	r2, [pc, #72]	; (8000f08 <_sbrk+0x68>)
 8000ec0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ec2:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <_sbrk+0x64>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d207      	bcs.n	8000ee0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ed0:	f004 fdd2 	bl	8005a78 <__errno>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	220c      	movs	r2, #12
 8000ed8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295
 8000ede:	e009      	b.n	8000ef4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <_sbrk+0x64>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ee6:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <_sbrk+0x64>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	4a05      	ldr	r2, [pc, #20]	; (8000f04 <_sbrk+0x64>)
 8000ef0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20080000 	.word	0x20080000
 8000f00:	00000400 	.word	0x00000400
 8000f04:	200004c8 	.word	0x200004c8
 8000f08:	200005b8 	.word	0x200005b8

08000f0c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <SystemInit+0x20>)
 8000f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f16:	4a05      	ldr	r2, [pc, #20]	; (8000f2c <SystemInit+0x20>)
 8000f18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08e      	sub	sp, #56	; 0x38
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f44:	f107 031c 	add.w	r3, r7, #28
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f50:	463b      	mov	r3, r7
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]
 8000f5c:	611a      	str	r2, [r3, #16]
 8000f5e:	615a      	str	r2, [r3, #20]
 8000f60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f62:	4b2e      	ldr	r3, [pc, #184]	; (800101c <MX_TIM2_Init+0xec>)
 8000f64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10800;
 8000f6a:	4b2c      	ldr	r3, [pc, #176]	; (800101c <MX_TIM2_Init+0xec>)
 8000f6c:	f642 2230 	movw	r2, #10800	; 0x2a30
 8000f70:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f72:	4b2a      	ldr	r3, [pc, #168]	; (800101c <MX_TIM2_Init+0xec>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8000f78:	4b28      	ldr	r3, [pc, #160]	; (800101c <MX_TIM2_Init+0xec>)
 8000f7a:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000f7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f80:	4b26      	ldr	r3, [pc, #152]	; (800101c <MX_TIM2_Init+0xec>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f86:	4b25      	ldr	r3, [pc, #148]	; (800101c <MX_TIM2_Init+0xec>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f8c:	4823      	ldr	r0, [pc, #140]	; (800101c <MX_TIM2_Init+0xec>)
 8000f8e:	f001 fec7 	bl	8002d20 <HAL_TIM_Base_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000f98:	f7ff fdd2 	bl	8000b40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fa2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	481c      	ldr	r0, [pc, #112]	; (800101c <MX_TIM2_Init+0xec>)
 8000faa:	f002 fb19 	bl	80035e0 <HAL_TIM_ConfigClockSource>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000fb4:	f7ff fdc4 	bl	8000b40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000fb8:	4818      	ldr	r0, [pc, #96]	; (800101c <MX_TIM2_Init+0xec>)
 8000fba:	f001 ff81 	bl	8002ec0 <HAL_TIM_PWM_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000fc4:	f7ff fdbc 	bl	8000b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4811      	ldr	r0, [pc, #68]	; (800101c <MX_TIM2_Init+0xec>)
 8000fd8:	f002 ffbc 	bl	8003f54 <HAL_TIMEx_MasterConfigSynchronization>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000fe2:	f7ff fdad 	bl	8000b40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fe6:	2360      	movs	r3, #96	; 0x60
 8000fe8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4807      	ldr	r0, [pc, #28]	; (800101c <MX_TIM2_Init+0xec>)
 8000ffe:	f002 f9db 	bl	80033b8 <HAL_TIM_PWM_ConfigChannel>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001008:	f7ff fd9a 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800100c:	4803      	ldr	r0, [pc, #12]	; (800101c <MX_TIM2_Init+0xec>)
 800100e:	f000 f82b 	bl	8001068 <HAL_TIM_MspPostInit>

}
 8001012:	bf00      	nop
 8001014:	3738      	adds	r7, #56	; 0x38
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200004cc 	.word	0x200004cc

08001020 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001030:	d113      	bne.n	800105a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <HAL_TIM_Base_MspInit+0x44>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	4a0b      	ldr	r2, [pc, #44]	; (8001064 <HAL_TIM_Base_MspInit+0x44>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6413      	str	r3, [r2, #64]	; 0x40
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <HAL_TIM_Base_MspInit+0x44>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2100      	movs	r1, #0
 800104e:	201c      	movs	r0, #28
 8001050:	f000 faa5 	bl	800159e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001054:	201c      	movs	r0, #28
 8001056:	f000 fabe 	bl	80015d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40023800 	.word	0x40023800

08001068 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001088:	d11b      	bne.n	80010c2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <HAL_TIM_MspPostInit+0x64>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a0f      	ldr	r2, [pc, #60]	; (80010cc <HAL_TIM_MspPostInit+0x64>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <HAL_TIM_MspPostInit+0x64>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010a2:	2301      	movs	r3, #1
 80010a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a6:	2302      	movs	r3, #2
 80010a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010b2:	2301      	movs	r3, #1
 80010b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b6:	f107 030c 	add.w	r3, r7, #12
 80010ba:	4619      	mov	r1, r3
 80010bc:	4804      	ldr	r0, [pc, #16]	; (80010d0 <HAL_TIM_MspPostInit+0x68>)
 80010be:	f000 fb37 	bl	8001730 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80010c2:	bf00      	nop
 80010c4:	3720      	adds	r7, #32
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40020000 	.word	0x40020000

080010d4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010d8:	4b14      	ldr	r3, [pc, #80]	; (800112c <MX_USART3_UART_Init+0x58>)
 80010da:	4a15      	ldr	r2, [pc, #84]	; (8001130 <MX_USART3_UART_Init+0x5c>)
 80010dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010de:	4b13      	ldr	r3, [pc, #76]	; (800112c <MX_USART3_UART_Init+0x58>)
 80010e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <MX_USART3_UART_Init+0x58>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010ec:	4b0f      	ldr	r3, [pc, #60]	; (800112c <MX_USART3_UART_Init+0x58>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <MX_USART3_UART_Init+0x58>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <MX_USART3_UART_Init+0x58>)
 80010fa:	220c      	movs	r2, #12
 80010fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <MX_USART3_UART_Init+0x58>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001104:	4b09      	ldr	r3, [pc, #36]	; (800112c <MX_USART3_UART_Init+0x58>)
 8001106:	2200      	movs	r2, #0
 8001108:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800110a:	4b08      	ldr	r3, [pc, #32]	; (800112c <MX_USART3_UART_Init+0x58>)
 800110c:	2200      	movs	r2, #0
 800110e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <MX_USART3_UART_Init+0x58>)
 8001112:	2200      	movs	r2, #0
 8001114:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001116:	4805      	ldr	r0, [pc, #20]	; (800112c <MX_USART3_UART_Init+0x58>)
 8001118:	f002 ffc8 	bl	80040ac <HAL_UART_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001122:	f7ff fd0d 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000518 	.word	0x20000518
 8001130:	40004800 	.word	0x40004800

08001134 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b0b4      	sub	sp, #208	; 0xd0
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800114c:	f107 0318 	add.w	r3, r7, #24
 8001150:	2290      	movs	r2, #144	; 0x90
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f004 fcc1 	bl	8005adc <memset>
  if(uartHandle->Instance==USART3)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a58      	ldr	r2, [pc, #352]	; (80012c0 <HAL_UART_MspInit+0x18c>)
 8001160:	4293      	cmp	r3, r2
 8001162:	f040 80a8 	bne.w	80012b6 <HAL_UART_MspInit+0x182>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001166:	f44f 7380 	mov.w	r3, #256	; 0x100
 800116a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800116c:	2300      	movs	r3, #0
 800116e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001170:	f107 0318 	add.w	r3, r7, #24
 8001174:	4618      	mov	r0, r3
 8001176:	f001 f9ab 	bl	80024d0 <HAL_RCCEx_PeriphCLKConfig>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001180:	f7ff fcde 	bl	8000b40 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001184:	4b4f      	ldr	r3, [pc, #316]	; (80012c4 <HAL_UART_MspInit+0x190>)
 8001186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001188:	4a4e      	ldr	r2, [pc, #312]	; (80012c4 <HAL_UART_MspInit+0x190>)
 800118a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800118e:	6413      	str	r3, [r2, #64]	; 0x40
 8001190:	4b4c      	ldr	r3, [pc, #304]	; (80012c4 <HAL_UART_MspInit+0x190>)
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001198:	617b      	str	r3, [r7, #20]
 800119a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800119c:	4b49      	ldr	r3, [pc, #292]	; (80012c4 <HAL_UART_MspInit+0x190>)
 800119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a0:	4a48      	ldr	r2, [pc, #288]	; (80012c4 <HAL_UART_MspInit+0x190>)
 80011a2:	f043 0308 	orr.w	r3, r3, #8
 80011a6:	6313      	str	r3, [r2, #48]	; 0x30
 80011a8:	4b46      	ldr	r3, [pc, #280]	; (80012c4 <HAL_UART_MspInit+0x190>)
 80011aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ac:	f003 0308 	and.w	r3, r3, #8
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	693b      	ldr	r3, [r7, #16]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c8:	2303      	movs	r3, #3
 80011ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011ce:	2307      	movs	r3, #7
 80011d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80011d8:	4619      	mov	r1, r3
 80011da:	483b      	ldr	r0, [pc, #236]	; (80012c8 <HAL_UART_MspInit+0x194>)
 80011dc:	f000 faa8 	bl	8001730 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2100      	movs	r1, #0
 80011e4:	2027      	movs	r0, #39	; 0x27
 80011e6:	f000 f9da 	bl	800159e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80011ea:	2027      	movs	r0, #39	; 0x27
 80011ec:	f000 f9f3 	bl	80015d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

    uint32_t *ptr_RCC_RCC_APB1ENR = RCC_base + 0x40;
 80011f0:	4b36      	ldr	r3, [pc, #216]	; (80012cc <HAL_UART_MspInit+0x198>)
 80011f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    uint32_t *ptr_RCC_RCC_DCKCFGR2 = RCC_base + 0x90;
 80011f6:	4b36      	ldr	r3, [pc, #216]	; (80012d0 <HAL_UART_MspInit+0x19c>)
 80011f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    uint32_t *ptr_GPIOD_GPIOx_MODER = GPIOD_base + 0x0;
 80011fc:	4b32      	ldr	r3, [pc, #200]	; (80012c8 <HAL_UART_MspInit+0x194>)
 80011fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    uint32_t *ptr_GPIOD_GPIOx_OSPEEDR = GPIOD_base + 0x08;
 8001202:	4b34      	ldr	r3, [pc, #208]	; (80012d4 <HAL_UART_MspInit+0x1a0>)
 8001204:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    uint32_t *ptr_GPIOD_GPIOx_AFRH = GPIOD_base + 0x24;
 8001208:	4b33      	ldr	r3, [pc, #204]	; (80012d8 <HAL_UART_MspInit+0x1a4>)
 800120a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

    *ptr_RCC_RCC_DCKCFGR2 |= (UART3SEL) << UART3SEL_pos;// configurar o clock da USART3
 800120e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f043 0210 	orr.w	r2, r3, #16
 8001218:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800121c:	601a      	str	r2, [r3, #0]

    *ptr_RCC_RCC_APB1ENR |= (RCC_USART3EN) << RCC_USART3EN_pos; //enable ao clock da USART3
 800121e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001228:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800122c:	601a      	str	r2, [r3, #0]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800122e:	4b25      	ldr	r3, [pc, #148]	; (80012c4 <HAL_UART_MspInit+0x190>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a24      	ldr	r2, [pc, #144]	; (80012c4 <HAL_UART_MspInit+0x190>)
 8001234:	f043 0308 	orr.w	r3, r3, #8
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b22      	ldr	r3, [pc, #136]	; (80012c4 <HAL_UART_MspInit+0x190>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0308 	and.w	r3, r3, #8
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]

     *ptr_GPIOD_GPIOx_MODER |= (MODER9) << MODER9_pos; // TX & RX
 8001246:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001250:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001254:	601a      	str	r2, [r3, #0]
     *ptr_GPIOD_GPIOx_MODER |= (MODER8) << MODER8_pos;
 8001256:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001260:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001264:	601a      	str	r2, [r3, #0]

     *ptr_GPIOD_GPIOx_OSPEEDR |= (OSPEEDR9) << OSPEEDR9_pos;// Configurar speed
 8001266:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f443 2240 	orr.w	r2, r3, #786432	; 0xc0000
 8001270:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001274:	601a      	str	r2, [r3, #0]
     *ptr_GPIOD_GPIOx_OSPEEDR |= (OSPEEDR8) << OSPEEDR8_pos;
 8001276:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f443 3240 	orr.w	r2, r3, #196608	; 0x30000
 8001280:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001284:	601a      	str	r2, [r3, #0]

     *ptr_GPIOD_GPIOx_AFRH |= (AFR9) << AFR9_pos;   // configurar o alternate
 8001286:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f043 0270 	orr.w	r2, r3, #112	; 0x70
 8001290:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001294:	601a      	str	r2, [r3, #0]
     *ptr_GPIOD_GPIOx_AFRH |= (AFR8) << AFR8_pos;
 8001296:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f043 0207 	orr.w	r2, r3, #7
 80012a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80012a4:	601a      	str	r2, [r3, #0]

     HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2100      	movs	r1, #0
 80012aa:	2027      	movs	r0, #39	; 0x27
 80012ac:	f000 f977 	bl	800159e <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(USART3_IRQn);
 80012b0:	2027      	movs	r0, #39	; 0x27
 80012b2:	f000 f990 	bl	80015d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART3_MspInit 1 */
  }
}
 80012b6:	bf00      	nop
 80012b8:	37d0      	adds	r7, #208	; 0xd0
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40004800 	.word	0x40004800
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40020c00 	.word	0x40020c00
 80012cc:	40023840 	.word	0x40023840
 80012d0:	40023890 	.word	0x40023890
 80012d4:	40020c08 	.word	0x40020c08
 80012d8:	40020c24 	.word	0x40020c24

080012dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001314 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012e0:	480d      	ldr	r0, [pc, #52]	; (8001318 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012e2:	490e      	ldr	r1, [pc, #56]	; (800131c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012e4:	4a0e      	ldr	r2, [pc, #56]	; (8001320 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e8:	e002      	b.n	80012f0 <LoopCopyDataInit>

080012ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ee:	3304      	adds	r3, #4

080012f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f4:	d3f9      	bcc.n	80012ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012f6:	4a0b      	ldr	r2, [pc, #44]	; (8001324 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012f8:	4c0b      	ldr	r4, [pc, #44]	; (8001328 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012fc:	e001      	b.n	8001302 <LoopFillZerobss>

080012fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001300:	3204      	adds	r2, #4

08001302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001304:	d3fb      	bcc.n	80012fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001306:	f7ff fe01 	bl	8000f0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800130a:	f004 fbbb 	bl	8005a84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800130e:	f7ff fb79 	bl	8000a04 <main>
  bx  lr    
 8001312:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001314:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800131c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001320:	08006ee0 	.word	0x08006ee0
  ldr r2, =_sbss
 8001324:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001328:	200005b4 	.word	0x200005b4

0800132c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800132c:	e7fe      	b.n	800132c <ADC_IRQHandler>

0800132e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001332:	2003      	movs	r0, #3
 8001334:	f000 f928 	bl	8001588 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001338:	2000      	movs	r0, #0
 800133a:	f000 f805 	bl	8001348 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800133e:	f7ff fc05 	bl	8000b4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	bd80      	pop	{r7, pc}

08001348 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <HAL_InitTick+0x54>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <HAL_InitTick+0x58>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	4619      	mov	r1, r3
 800135a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001362:	fbb2 f3f3 	udiv	r3, r2, r3
 8001366:	4618      	mov	r0, r3
 8001368:	f000 f943 	bl	80015f2 <HAL_SYSTICK_Config>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e00e      	b.n	8001394 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b0f      	cmp	r3, #15
 800137a:	d80a      	bhi.n	8001392 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800137c:	2200      	movs	r2, #0
 800137e:	6879      	ldr	r1, [r7, #4]
 8001380:	f04f 30ff 	mov.w	r0, #4294967295
 8001384:	f000 f90b 	bl	800159e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001388:	4a06      	ldr	r2, [pc, #24]	; (80013a4 <HAL_InitTick+0x5c>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800138e:	2300      	movs	r3, #0
 8001390:	e000      	b.n	8001394 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
}
 8001394:	4618      	mov	r0, r3
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000004 	.word	0x20000004
 80013a0:	2000000c 	.word	0x2000000c
 80013a4:	20000008 	.word	0x20000008

080013a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_IncTick+0x20>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	461a      	mov	r2, r3
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_IncTick+0x24>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4413      	add	r3, r2
 80013b8:	4a04      	ldr	r2, [pc, #16]	; (80013cc <HAL_IncTick+0x24>)
 80013ba:	6013      	str	r3, [r2, #0]
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	2000000c 	.word	0x2000000c
 80013cc:	200005a0 	.word	0x200005a0

080013d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return uwTick;
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <HAL_GetTick+0x14>)
 80013d6:	681b      	ldr	r3, [r3, #0]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	200005a0 	.word	0x200005a0

080013e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <__NVIC_SetPriorityGrouping+0x40>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001404:	4013      	ands	r3, r2
 8001406:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <__NVIC_SetPriorityGrouping+0x44>)
 8001412:	4313      	orrs	r3, r2
 8001414:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001416:	4a04      	ldr	r2, [pc, #16]	; (8001428 <__NVIC_SetPriorityGrouping+0x40>)
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	60d3      	str	r3, [r2, #12]
}
 800141c:	bf00      	nop
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000ed00 	.word	0xe000ed00
 800142c:	05fa0000 	.word	0x05fa0000

08001430 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001434:	4b04      	ldr	r3, [pc, #16]	; (8001448 <__NVIC_GetPriorityGrouping+0x18>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	0a1b      	lsrs	r3, r3, #8
 800143a:	f003 0307 	and.w	r3, r3, #7
}
 800143e:	4618      	mov	r0, r3
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	2b00      	cmp	r3, #0
 800145c:	db0b      	blt.n	8001476 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	f003 021f 	and.w	r2, r3, #31
 8001464:	4907      	ldr	r1, [pc, #28]	; (8001484 <__NVIC_EnableIRQ+0x38>)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	095b      	lsrs	r3, r3, #5
 800146c:	2001      	movs	r0, #1
 800146e:	fa00 f202 	lsl.w	r2, r0, r2
 8001472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	e000e100 	.word	0xe000e100

08001488 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	6039      	str	r1, [r7, #0]
 8001492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001498:	2b00      	cmp	r3, #0
 800149a:	db0a      	blt.n	80014b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	490c      	ldr	r1, [pc, #48]	; (80014d4 <__NVIC_SetPriority+0x4c>)
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a6:	0112      	lsls	r2, r2, #4
 80014a8:	b2d2      	uxtb	r2, r2
 80014aa:	440b      	add	r3, r1
 80014ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014b0:	e00a      	b.n	80014c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	4908      	ldr	r1, [pc, #32]	; (80014d8 <__NVIC_SetPriority+0x50>)
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	f003 030f 	and.w	r3, r3, #15
 80014be:	3b04      	subs	r3, #4
 80014c0:	0112      	lsls	r2, r2, #4
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	440b      	add	r3, r1
 80014c6:	761a      	strb	r2, [r3, #24]
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	e000e100 	.word	0xe000e100
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014dc:	b480      	push	{r7}
 80014de:	b089      	sub	sp, #36	; 0x24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	f1c3 0307 	rsb	r3, r3, #7
 80014f6:	2b04      	cmp	r3, #4
 80014f8:	bf28      	it	cs
 80014fa:	2304      	movcs	r3, #4
 80014fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3304      	adds	r3, #4
 8001502:	2b06      	cmp	r3, #6
 8001504:	d902      	bls.n	800150c <NVIC_EncodePriority+0x30>
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3b03      	subs	r3, #3
 800150a:	e000      	b.n	800150e <NVIC_EncodePriority+0x32>
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001510:	f04f 32ff 	mov.w	r2, #4294967295
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43da      	mvns	r2, r3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	401a      	ands	r2, r3
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001524:	f04f 31ff 	mov.w	r1, #4294967295
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	fa01 f303 	lsl.w	r3, r1, r3
 800152e:	43d9      	mvns	r1, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001534:	4313      	orrs	r3, r2
         );
}
 8001536:	4618      	mov	r0, r3
 8001538:	3724      	adds	r7, #36	; 0x24
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
	...

08001544 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3b01      	subs	r3, #1
 8001550:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001554:	d301      	bcc.n	800155a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001556:	2301      	movs	r3, #1
 8001558:	e00f      	b.n	800157a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800155a:	4a0a      	ldr	r2, [pc, #40]	; (8001584 <SysTick_Config+0x40>)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3b01      	subs	r3, #1
 8001560:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001562:	210f      	movs	r1, #15
 8001564:	f04f 30ff 	mov.w	r0, #4294967295
 8001568:	f7ff ff8e 	bl	8001488 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800156c:	4b05      	ldr	r3, [pc, #20]	; (8001584 <SysTick_Config+0x40>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001572:	4b04      	ldr	r3, [pc, #16]	; (8001584 <SysTick_Config+0x40>)
 8001574:	2207      	movs	r2, #7
 8001576:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	e000e010 	.word	0xe000e010

08001588 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff ff29 	bl	80013e8 <__NVIC_SetPriorityGrouping>
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800159e:	b580      	push	{r7, lr}
 80015a0:	b086      	sub	sp, #24
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	4603      	mov	r3, r0
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	607a      	str	r2, [r7, #4]
 80015aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015b0:	f7ff ff3e 	bl	8001430 <__NVIC_GetPriorityGrouping>
 80015b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	68b9      	ldr	r1, [r7, #8]
 80015ba:	6978      	ldr	r0, [r7, #20]
 80015bc:	f7ff ff8e 	bl	80014dc <NVIC_EncodePriority>
 80015c0:	4602      	mov	r2, r0
 80015c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c6:	4611      	mov	r1, r2
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff5d 	bl	8001488 <__NVIC_SetPriority>
}
 80015ce:	bf00      	nop
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	4603      	mov	r3, r0
 80015de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff31 	bl	800144c <__NVIC_EnableIRQ>
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff ffa2 	bl	8001544 <SysTick_Config>
 8001600:	4603      	mov	r3, r0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b084      	sub	sp, #16
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001616:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001618:	f7ff feda 	bl	80013d0 <HAL_GetTick>
 800161c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d008      	beq.n	800163c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2280      	movs	r2, #128	; 0x80
 800162e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e052      	b.n	80016e2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f022 0216 	bic.w	r2, r2, #22
 800164a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	695a      	ldr	r2, [r3, #20]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800165a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	2b00      	cmp	r3, #0
 8001662:	d103      	bne.n	800166c <HAL_DMA_Abort+0x62>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001668:	2b00      	cmp	r3, #0
 800166a:	d007      	beq.n	800167c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 0208 	bic.w	r2, r2, #8
 800167a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 0201 	bic.w	r2, r2, #1
 800168a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800168c:	e013      	b.n	80016b6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800168e:	f7ff fe9f 	bl	80013d0 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b05      	cmp	r3, #5
 800169a:	d90c      	bls.n	80016b6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2220      	movs	r2, #32
 80016a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2203      	movs	r2, #3
 80016a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e015      	b.n	80016e2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1e4      	bne.n	800168e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c8:	223f      	movs	r2, #63	; 0x3f
 80016ca:	409a      	lsls	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d004      	beq.n	8001708 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2280      	movs	r2, #128	; 0x80
 8001702:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e00c      	b.n	8001722 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2205      	movs	r2, #5
 800170c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 0201 	bic.w	r2, r2, #1
 800171e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
	...

08001730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001730:	b480      	push	{r7}
 8001732:	b089      	sub	sp, #36	; 0x24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001746:	2300      	movs	r3, #0
 8001748:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
 800174e:	e175      	b.n	8001a3c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001750:	2201      	movs	r2, #1
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	4013      	ands	r3, r2
 8001762:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	429a      	cmp	r2, r3
 800176a:	f040 8164 	bne.w	8001a36 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	2b01      	cmp	r3, #1
 8001778:	d005      	beq.n	8001786 <HAL_GPIO_Init+0x56>
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f003 0303 	and.w	r3, r3, #3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d130      	bne.n	80017e8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	2203      	movs	r2, #3
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43db      	mvns	r3, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4013      	ands	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	68da      	ldr	r2, [r3, #12]
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017bc:	2201      	movs	r2, #1
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4013      	ands	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	091b      	lsrs	r3, r3, #4
 80017d2:	f003 0201 	and.w	r2, r3, #1
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4313      	orrs	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f003 0303 	and.w	r3, r3, #3
 80017f0:	2b03      	cmp	r3, #3
 80017f2:	d017      	beq.n	8001824 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	2203      	movs	r2, #3
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4313      	orrs	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 0303 	and.w	r3, r3, #3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d123      	bne.n	8001878 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	08da      	lsrs	r2, r3, #3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3208      	adds	r2, #8
 8001838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800183c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	220f      	movs	r2, #15
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4013      	ands	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	691a      	ldr	r2, [r3, #16]
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4313      	orrs	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	08da      	lsrs	r2, r3, #3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3208      	adds	r2, #8
 8001872:	69b9      	ldr	r1, [r7, #24]
 8001874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	2203      	movs	r2, #3
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4013      	ands	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 0203 	and.w	r2, r3, #3
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 80be 	beq.w	8001a36 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ba:	4b66      	ldr	r3, [pc, #408]	; (8001a54 <HAL_GPIO_Init+0x324>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	4a65      	ldr	r2, [pc, #404]	; (8001a54 <HAL_GPIO_Init+0x324>)
 80018c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c4:	6453      	str	r3, [r2, #68]	; 0x44
 80018c6:	4b63      	ldr	r3, [pc, #396]	; (8001a54 <HAL_GPIO_Init+0x324>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80018d2:	4a61      	ldr	r2, [pc, #388]	; (8001a58 <HAL_GPIO_Init+0x328>)
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	089b      	lsrs	r3, r3, #2
 80018d8:	3302      	adds	r3, #2
 80018da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	f003 0303 	and.w	r3, r3, #3
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	220f      	movs	r2, #15
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4013      	ands	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a58      	ldr	r2, [pc, #352]	; (8001a5c <HAL_GPIO_Init+0x32c>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d037      	beq.n	800196e <HAL_GPIO_Init+0x23e>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a57      	ldr	r2, [pc, #348]	; (8001a60 <HAL_GPIO_Init+0x330>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d031      	beq.n	800196a <HAL_GPIO_Init+0x23a>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a56      	ldr	r2, [pc, #344]	; (8001a64 <HAL_GPIO_Init+0x334>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d02b      	beq.n	8001966 <HAL_GPIO_Init+0x236>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a55      	ldr	r2, [pc, #340]	; (8001a68 <HAL_GPIO_Init+0x338>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d025      	beq.n	8001962 <HAL_GPIO_Init+0x232>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a54      	ldr	r2, [pc, #336]	; (8001a6c <HAL_GPIO_Init+0x33c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d01f      	beq.n	800195e <HAL_GPIO_Init+0x22e>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a53      	ldr	r2, [pc, #332]	; (8001a70 <HAL_GPIO_Init+0x340>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d019      	beq.n	800195a <HAL_GPIO_Init+0x22a>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a52      	ldr	r2, [pc, #328]	; (8001a74 <HAL_GPIO_Init+0x344>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d013      	beq.n	8001956 <HAL_GPIO_Init+0x226>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a51      	ldr	r2, [pc, #324]	; (8001a78 <HAL_GPIO_Init+0x348>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d00d      	beq.n	8001952 <HAL_GPIO_Init+0x222>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a50      	ldr	r2, [pc, #320]	; (8001a7c <HAL_GPIO_Init+0x34c>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d007      	beq.n	800194e <HAL_GPIO_Init+0x21e>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a4f      	ldr	r2, [pc, #316]	; (8001a80 <HAL_GPIO_Init+0x350>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d101      	bne.n	800194a <HAL_GPIO_Init+0x21a>
 8001946:	2309      	movs	r3, #9
 8001948:	e012      	b.n	8001970 <HAL_GPIO_Init+0x240>
 800194a:	230a      	movs	r3, #10
 800194c:	e010      	b.n	8001970 <HAL_GPIO_Init+0x240>
 800194e:	2308      	movs	r3, #8
 8001950:	e00e      	b.n	8001970 <HAL_GPIO_Init+0x240>
 8001952:	2307      	movs	r3, #7
 8001954:	e00c      	b.n	8001970 <HAL_GPIO_Init+0x240>
 8001956:	2306      	movs	r3, #6
 8001958:	e00a      	b.n	8001970 <HAL_GPIO_Init+0x240>
 800195a:	2305      	movs	r3, #5
 800195c:	e008      	b.n	8001970 <HAL_GPIO_Init+0x240>
 800195e:	2304      	movs	r3, #4
 8001960:	e006      	b.n	8001970 <HAL_GPIO_Init+0x240>
 8001962:	2303      	movs	r3, #3
 8001964:	e004      	b.n	8001970 <HAL_GPIO_Init+0x240>
 8001966:	2302      	movs	r3, #2
 8001968:	e002      	b.n	8001970 <HAL_GPIO_Init+0x240>
 800196a:	2301      	movs	r3, #1
 800196c:	e000      	b.n	8001970 <HAL_GPIO_Init+0x240>
 800196e:	2300      	movs	r3, #0
 8001970:	69fa      	ldr	r2, [r7, #28]
 8001972:	f002 0203 	and.w	r2, r2, #3
 8001976:	0092      	lsls	r2, r2, #2
 8001978:	4093      	lsls	r3, r2
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4313      	orrs	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001980:	4935      	ldr	r1, [pc, #212]	; (8001a58 <HAL_GPIO_Init+0x328>)
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	089b      	lsrs	r3, r3, #2
 8001986:	3302      	adds	r3, #2
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800198e:	4b3d      	ldr	r3, [pc, #244]	; (8001a84 <HAL_GPIO_Init+0x354>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	43db      	mvns	r3, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4013      	ands	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019b2:	4a34      	ldr	r2, [pc, #208]	; (8001a84 <HAL_GPIO_Init+0x354>)
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019b8:	4b32      	ldr	r3, [pc, #200]	; (8001a84 <HAL_GPIO_Init+0x354>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d003      	beq.n	80019dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	4313      	orrs	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019dc:	4a29      	ldr	r2, [pc, #164]	; (8001a84 <HAL_GPIO_Init+0x354>)
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019e2:	4b28      	ldr	r3, [pc, #160]	; (8001a84 <HAL_GPIO_Init+0x354>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	43db      	mvns	r3, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4013      	ands	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a06:	4a1f      	ldr	r2, [pc, #124]	; (8001a84 <HAL_GPIO_Init+0x354>)
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a0c:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <HAL_GPIO_Init+0x354>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	43db      	mvns	r3, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a30:	4a14      	ldr	r2, [pc, #80]	; (8001a84 <HAL_GPIO_Init+0x354>)
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	61fb      	str	r3, [r7, #28]
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	2b0f      	cmp	r3, #15
 8001a40:	f67f ae86 	bls.w	8001750 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001a44:	bf00      	nop
 8001a46:	bf00      	nop
 8001a48:	3724      	adds	r7, #36	; 0x24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40013800 	.word	0x40013800
 8001a5c:	40020000 	.word	0x40020000
 8001a60:	40020400 	.word	0x40020400
 8001a64:	40020800 	.word	0x40020800
 8001a68:	40020c00 	.word	0x40020c00
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	40021400 	.word	0x40021400
 8001a74:	40021800 	.word	0x40021800
 8001a78:	40021c00 	.word	0x40021c00
 8001a7c:	40022000 	.word	0x40022000
 8001a80:	40022400 	.word	0x40022400
 8001a84:	40013c00 	.word	0x40013c00

08001a88 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a92:	4b23      	ldr	r3, [pc, #140]	; (8001b20 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	4a22      	ldr	r2, [pc, #136]	; (8001b20 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a9e:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <HAL_PWREx_EnableOverDrive+0x98>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa6:	603b      	str	r3, [r7, #0]
 8001aa8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001aaa:	4b1e      	ldr	r3, [pc, #120]	; (8001b24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a1d      	ldr	r2, [pc, #116]	; (8001b24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ab6:	f7ff fc8b 	bl	80013d0 <HAL_GetTick>
 8001aba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001abc:	e009      	b.n	8001ad2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001abe:	f7ff fc87 	bl	80013d0 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001acc:	d901      	bls.n	8001ad2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e022      	b.n	8001b18 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001ad2:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ade:	d1ee      	bne.n	8001abe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001ae0:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a0f      	ldr	r2, [pc, #60]	; (8001b24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ae6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001aec:	f7ff fc70 	bl	80013d0 <HAL_GetTick>
 8001af0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001af2:	e009      	b.n	8001b08 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001af4:	f7ff fc6c 	bl	80013d0 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b02:	d901      	bls.n	8001b08 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e007      	b.n	8001b18 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b14:	d1ee      	bne.n	8001af4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40023800 	.word	0x40023800
 8001b24:	40007000 	.word	0x40007000

08001b28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001b30:	2300      	movs	r3, #0
 8001b32:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e29b      	b.n	8002076 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 8087 	beq.w	8001c5a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b4c:	4b96      	ldr	r3, [pc, #600]	; (8001da8 <HAL_RCC_OscConfig+0x280>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 030c 	and.w	r3, r3, #12
 8001b54:	2b04      	cmp	r3, #4
 8001b56:	d00c      	beq.n	8001b72 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b58:	4b93      	ldr	r3, [pc, #588]	; (8001da8 <HAL_RCC_OscConfig+0x280>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 030c 	and.w	r3, r3, #12
 8001b60:	2b08      	cmp	r3, #8
 8001b62:	d112      	bne.n	8001b8a <HAL_RCC_OscConfig+0x62>
 8001b64:	4b90      	ldr	r3, [pc, #576]	; (8001da8 <HAL_RCC_OscConfig+0x280>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b70:	d10b      	bne.n	8001b8a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b72:	4b8d      	ldr	r3, [pc, #564]	; (8001da8 <HAL_RCC_OscConfig+0x280>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d06c      	beq.n	8001c58 <HAL_RCC_OscConfig+0x130>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d168      	bne.n	8001c58 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e275      	b.n	8002076 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b92:	d106      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x7a>
 8001b94:	4b84      	ldr	r3, [pc, #528]	; (8001da8 <HAL_RCC_OscConfig+0x280>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a83      	ldr	r2, [pc, #524]	; (8001da8 <HAL_RCC_OscConfig+0x280>)
 8001b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	e02e      	b.n	8001c00 <HAL_RCC_OscConfig+0xd8>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d10c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x9c>
 8001baa:	4b7f      	ldr	r3, [pc, #508]	; (8001da8 <HAL_RCC_OscConfig+0x280>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a7e      	ldr	r2, [pc, #504]	; (8001da8 <HAL_RCC_OscConfig+0x280>)
 8001bb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	4b7c      	ldr	r3, [pc, #496]	; (8001da8 <HAL_RCC_OscConfig+0x280>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a7b      	ldr	r2, [pc, #492]	; (8001da8 <HAL_RCC_OscConfig+0x280>)
 8001bbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	e01d      	b.n	8001c00 <HAL_RCC_OscConfig+0xd8>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bcc:	d10c      	bne.n	8001be8 <HAL_RCC_OscConfig+0xc0>
 8001bce:	4b76      	ldr	r3, [pc, #472]	; (8001da8 <HAL_RCC_OscConfig+0x280>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a75      	ldr	r2, [pc, #468]	; (8001da8 <HAL_RCC_OscConfig+0x280>)
 8001bd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	4b73      	ldr	r3, [pc, #460]	; (8001da8 <HAL_RCC_OscConfig+0x280>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a72      	ldr	r2, [pc, #456]	; (8001da8 <HAL_RCC_OscConfig+0x280>)
 8001be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	e00b      	b.n	8001c00 <HAL_RCC_OscConfig+0xd8>
 8001be8:	4b6f      	ldr	r3, [pc, #444]	; (8001da8 <HAL_RCC_OscConfig+0x280>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a6e      	ldr	r2, [pc, #440]	; (8001da8 <HAL_RCC_OscConfig+0x280>)
 8001bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	4b6c      	ldr	r3, [pc, #432]	; (8001da8 <HAL_RCC_OscConfig+0x280>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a6b      	ldr	r2, [pc, #428]	; (8001da8 <HAL_RCC_OscConfig+0x280>)
 8001bfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d013      	beq.n	8001c30 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c08:	f7ff fbe2 	bl	80013d0 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c10:	f7ff fbde 	bl	80013d0 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b64      	cmp	r3, #100	; 0x64
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e229      	b.n	8002076 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c22:	4b61      	ldr	r3, [pc, #388]	; (8001da8 <HAL_RCC_OscConfig+0x280>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0f0      	beq.n	8001c10 <HAL_RCC_OscConfig+0xe8>
 8001c2e:	e014      	b.n	8001c5a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c30:	f7ff fbce 	bl	80013d0 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c38:	f7ff fbca 	bl	80013d0 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b64      	cmp	r3, #100	; 0x64
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e215      	b.n	8002076 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c4a:	4b57      	ldr	r3, [pc, #348]	; (8001da8 <HAL_RCC_OscConfig+0x280>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0x110>
 8001c56:	e000      	b.n	8001c5a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d069      	beq.n	8001d3a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c66:	4b50      	ldr	r3, [pc, #320]	; (8001da8 <HAL_RCC_OscConfig+0x280>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00b      	beq.n	8001c8a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c72:	4b4d      	ldr	r3, [pc, #308]	; (8001da8 <HAL_RCC_OscConfig+0x280>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 030c 	and.w	r3, r3, #12
 8001c7a:	2b08      	cmp	r3, #8
 8001c7c:	d11c      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x190>
 8001c7e:	4b4a      	ldr	r3, [pc, #296]	; (8001da8 <HAL_RCC_OscConfig+0x280>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d116      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c8a:	4b47      	ldr	r3, [pc, #284]	; (8001da8 <HAL_RCC_OscConfig+0x280>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d005      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x17a>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d001      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e1e9      	b.n	8002076 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca2:	4b41      	ldr	r3, [pc, #260]	; (8001da8 <HAL_RCC_OscConfig+0x280>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	493d      	ldr	r1, [pc, #244]	; (8001da8 <HAL_RCC_OscConfig+0x280>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb6:	e040      	b.n	8001d3a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d023      	beq.n	8001d08 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cc0:	4b39      	ldr	r3, [pc, #228]	; (8001da8 <HAL_RCC_OscConfig+0x280>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a38      	ldr	r2, [pc, #224]	; (8001da8 <HAL_RCC_OscConfig+0x280>)
 8001cc6:	f043 0301 	orr.w	r3, r3, #1
 8001cca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ccc:	f7ff fb80 	bl	80013d0 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd4:	f7ff fb7c 	bl	80013d0 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e1c7      	b.n	8002076 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce6:	4b30      	ldr	r3, [pc, #192]	; (8001da8 <HAL_RCC_OscConfig+0x280>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d0f0      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf2:	4b2d      	ldr	r3, [pc, #180]	; (8001da8 <HAL_RCC_OscConfig+0x280>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	4929      	ldr	r1, [pc, #164]	; (8001da8 <HAL_RCC_OscConfig+0x280>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	600b      	str	r3, [r1, #0]
 8001d06:	e018      	b.n	8001d3a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d08:	4b27      	ldr	r3, [pc, #156]	; (8001da8 <HAL_RCC_OscConfig+0x280>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a26      	ldr	r2, [pc, #152]	; (8001da8 <HAL_RCC_OscConfig+0x280>)
 8001d0e:	f023 0301 	bic.w	r3, r3, #1
 8001d12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d14:	f7ff fb5c 	bl	80013d0 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d1c:	f7ff fb58 	bl	80013d0 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e1a3      	b.n	8002076 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d2e:	4b1e      	ldr	r3, [pc, #120]	; (8001da8 <HAL_RCC_OscConfig+0x280>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f0      	bne.n	8001d1c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0308 	and.w	r3, r3, #8
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d038      	beq.n	8001db8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d019      	beq.n	8001d82 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d4e:	4b16      	ldr	r3, [pc, #88]	; (8001da8 <HAL_RCC_OscConfig+0x280>)
 8001d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d52:	4a15      	ldr	r2, [pc, #84]	; (8001da8 <HAL_RCC_OscConfig+0x280>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5a:	f7ff fb39 	bl	80013d0 <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d62:	f7ff fb35 	bl	80013d0 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e180      	b.n	8002076 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <HAL_RCC_OscConfig+0x280>)
 8001d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0f0      	beq.n	8001d62 <HAL_RCC_OscConfig+0x23a>
 8001d80:	e01a      	b.n	8001db8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d82:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <HAL_RCC_OscConfig+0x280>)
 8001d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d86:	4a08      	ldr	r2, [pc, #32]	; (8001da8 <HAL_RCC_OscConfig+0x280>)
 8001d88:	f023 0301 	bic.w	r3, r3, #1
 8001d8c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d8e:	f7ff fb1f 	bl	80013d0 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d94:	e00a      	b.n	8001dac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d96:	f7ff fb1b 	bl	80013d0 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d903      	bls.n	8001dac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e166      	b.n	8002076 <HAL_RCC_OscConfig+0x54e>
 8001da8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dac:	4b92      	ldr	r3, [pc, #584]	; (8001ff8 <HAL_RCC_OscConfig+0x4d0>)
 8001dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1ee      	bne.n	8001d96 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f000 80a4 	beq.w	8001f0e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dc6:	4b8c      	ldr	r3, [pc, #560]	; (8001ff8 <HAL_RCC_OscConfig+0x4d0>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d10d      	bne.n	8001dee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd2:	4b89      	ldr	r3, [pc, #548]	; (8001ff8 <HAL_RCC_OscConfig+0x4d0>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	4a88      	ldr	r2, [pc, #544]	; (8001ff8 <HAL_RCC_OscConfig+0x4d0>)
 8001dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dde:	4b86      	ldr	r3, [pc, #536]	; (8001ff8 <HAL_RCC_OscConfig+0x4d0>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dea:	2301      	movs	r3, #1
 8001dec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dee:	4b83      	ldr	r3, [pc, #524]	; (8001ffc <HAL_RCC_OscConfig+0x4d4>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d118      	bne.n	8001e2c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001dfa:	4b80      	ldr	r3, [pc, #512]	; (8001ffc <HAL_RCC_OscConfig+0x4d4>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a7f      	ldr	r2, [pc, #508]	; (8001ffc <HAL_RCC_OscConfig+0x4d4>)
 8001e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e06:	f7ff fae3 	bl	80013d0 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e0e:	f7ff fadf 	bl	80013d0 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b64      	cmp	r3, #100	; 0x64
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e12a      	b.n	8002076 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e20:	4b76      	ldr	r3, [pc, #472]	; (8001ffc <HAL_RCC_OscConfig+0x4d4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0f0      	beq.n	8001e0e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d106      	bne.n	8001e42 <HAL_RCC_OscConfig+0x31a>
 8001e34:	4b70      	ldr	r3, [pc, #448]	; (8001ff8 <HAL_RCC_OscConfig+0x4d0>)
 8001e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e38:	4a6f      	ldr	r2, [pc, #444]	; (8001ff8 <HAL_RCC_OscConfig+0x4d0>)
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e40:	e02d      	b.n	8001e9e <HAL_RCC_OscConfig+0x376>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10c      	bne.n	8001e64 <HAL_RCC_OscConfig+0x33c>
 8001e4a:	4b6b      	ldr	r3, [pc, #428]	; (8001ff8 <HAL_RCC_OscConfig+0x4d0>)
 8001e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e4e:	4a6a      	ldr	r2, [pc, #424]	; (8001ff8 <HAL_RCC_OscConfig+0x4d0>)
 8001e50:	f023 0301 	bic.w	r3, r3, #1
 8001e54:	6713      	str	r3, [r2, #112]	; 0x70
 8001e56:	4b68      	ldr	r3, [pc, #416]	; (8001ff8 <HAL_RCC_OscConfig+0x4d0>)
 8001e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5a:	4a67      	ldr	r2, [pc, #412]	; (8001ff8 <HAL_RCC_OscConfig+0x4d0>)
 8001e5c:	f023 0304 	bic.w	r3, r3, #4
 8001e60:	6713      	str	r3, [r2, #112]	; 0x70
 8001e62:	e01c      	b.n	8001e9e <HAL_RCC_OscConfig+0x376>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	2b05      	cmp	r3, #5
 8001e6a:	d10c      	bne.n	8001e86 <HAL_RCC_OscConfig+0x35e>
 8001e6c:	4b62      	ldr	r3, [pc, #392]	; (8001ff8 <HAL_RCC_OscConfig+0x4d0>)
 8001e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e70:	4a61      	ldr	r2, [pc, #388]	; (8001ff8 <HAL_RCC_OscConfig+0x4d0>)
 8001e72:	f043 0304 	orr.w	r3, r3, #4
 8001e76:	6713      	str	r3, [r2, #112]	; 0x70
 8001e78:	4b5f      	ldr	r3, [pc, #380]	; (8001ff8 <HAL_RCC_OscConfig+0x4d0>)
 8001e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7c:	4a5e      	ldr	r2, [pc, #376]	; (8001ff8 <HAL_RCC_OscConfig+0x4d0>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	6713      	str	r3, [r2, #112]	; 0x70
 8001e84:	e00b      	b.n	8001e9e <HAL_RCC_OscConfig+0x376>
 8001e86:	4b5c      	ldr	r3, [pc, #368]	; (8001ff8 <HAL_RCC_OscConfig+0x4d0>)
 8001e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8a:	4a5b      	ldr	r2, [pc, #364]	; (8001ff8 <HAL_RCC_OscConfig+0x4d0>)
 8001e8c:	f023 0301 	bic.w	r3, r3, #1
 8001e90:	6713      	str	r3, [r2, #112]	; 0x70
 8001e92:	4b59      	ldr	r3, [pc, #356]	; (8001ff8 <HAL_RCC_OscConfig+0x4d0>)
 8001e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e96:	4a58      	ldr	r2, [pc, #352]	; (8001ff8 <HAL_RCC_OscConfig+0x4d0>)
 8001e98:	f023 0304 	bic.w	r3, r3, #4
 8001e9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d015      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea6:	f7ff fa93 	bl	80013d0 <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eac:	e00a      	b.n	8001ec4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eae:	f7ff fa8f 	bl	80013d0 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e0d8      	b.n	8002076 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec4:	4b4c      	ldr	r3, [pc, #304]	; (8001ff8 <HAL_RCC_OscConfig+0x4d0>)
 8001ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0ee      	beq.n	8001eae <HAL_RCC_OscConfig+0x386>
 8001ed0:	e014      	b.n	8001efc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed2:	f7ff fa7d 	bl	80013d0 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed8:	e00a      	b.n	8001ef0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eda:	f7ff fa79 	bl	80013d0 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e0c2      	b.n	8002076 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef0:	4b41      	ldr	r3, [pc, #260]	; (8001ff8 <HAL_RCC_OscConfig+0x4d0>)
 8001ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1ee      	bne.n	8001eda <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001efc:	7dfb      	ldrb	r3, [r7, #23]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d105      	bne.n	8001f0e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f02:	4b3d      	ldr	r3, [pc, #244]	; (8001ff8 <HAL_RCC_OscConfig+0x4d0>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	4a3c      	ldr	r2, [pc, #240]	; (8001ff8 <HAL_RCC_OscConfig+0x4d0>)
 8001f08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 80ae 	beq.w	8002074 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f18:	4b37      	ldr	r3, [pc, #220]	; (8001ff8 <HAL_RCC_OscConfig+0x4d0>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f003 030c 	and.w	r3, r3, #12
 8001f20:	2b08      	cmp	r3, #8
 8001f22:	d06d      	beq.n	8002000 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d14b      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f2c:	4b32      	ldr	r3, [pc, #200]	; (8001ff8 <HAL_RCC_OscConfig+0x4d0>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a31      	ldr	r2, [pc, #196]	; (8001ff8 <HAL_RCC_OscConfig+0x4d0>)
 8001f32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f38:	f7ff fa4a 	bl	80013d0 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f40:	f7ff fa46 	bl	80013d0 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e091      	b.n	8002076 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f52:	4b29      	ldr	r3, [pc, #164]	; (8001ff8 <HAL_RCC_OscConfig+0x4d0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1f0      	bne.n	8001f40 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69da      	ldr	r2, [r3, #28]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	431a      	orrs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	019b      	lsls	r3, r3, #6
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f74:	085b      	lsrs	r3, r3, #1
 8001f76:	3b01      	subs	r3, #1
 8001f78:	041b      	lsls	r3, r3, #16
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f80:	061b      	lsls	r3, r3, #24
 8001f82:	431a      	orrs	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f88:	071b      	lsls	r3, r3, #28
 8001f8a:	491b      	ldr	r1, [pc, #108]	; (8001ff8 <HAL_RCC_OscConfig+0x4d0>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f90:	4b19      	ldr	r3, [pc, #100]	; (8001ff8 <HAL_RCC_OscConfig+0x4d0>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a18      	ldr	r2, [pc, #96]	; (8001ff8 <HAL_RCC_OscConfig+0x4d0>)
 8001f96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9c:	f7ff fa18 	bl	80013d0 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa4:	f7ff fa14 	bl	80013d0 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e05f      	b.n	8002076 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb6:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <HAL_RCC_OscConfig+0x4d0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d0f0      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x47c>
 8001fc2:	e057      	b.n	8002074 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <HAL_RCC_OscConfig+0x4d0>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a0b      	ldr	r2, [pc, #44]	; (8001ff8 <HAL_RCC_OscConfig+0x4d0>)
 8001fca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd0:	f7ff f9fe 	bl	80013d0 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd8:	f7ff f9fa 	bl	80013d0 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e045      	b.n	8002076 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fea:	4b03      	ldr	r3, [pc, #12]	; (8001ff8 <HAL_RCC_OscConfig+0x4d0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1f0      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x4b0>
 8001ff6:	e03d      	b.n	8002074 <HAL_RCC_OscConfig+0x54c>
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002000:	4b1f      	ldr	r3, [pc, #124]	; (8002080 <HAL_RCC_OscConfig+0x558>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d030      	beq.n	8002070 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002018:	429a      	cmp	r2, r3
 800201a:	d129      	bne.n	8002070 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002026:	429a      	cmp	r2, r3
 8002028:	d122      	bne.n	8002070 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002030:	4013      	ands	r3, r2
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002036:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002038:	4293      	cmp	r3, r2
 800203a:	d119      	bne.n	8002070 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002046:	085b      	lsrs	r3, r3, #1
 8002048:	3b01      	subs	r3, #1
 800204a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800204c:	429a      	cmp	r2, r3
 800204e:	d10f      	bne.n	8002070 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800205c:	429a      	cmp	r2, r3
 800205e:	d107      	bne.n	8002070 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800206c:	429a      	cmp	r2, r3
 800206e:	d001      	beq.n	8002074 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e000      	b.n	8002076 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40023800 	.word	0x40023800

08002084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e0d0      	b.n	800223e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800209c:	4b6a      	ldr	r3, [pc, #424]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 030f 	and.w	r3, r3, #15
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d910      	bls.n	80020cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020aa:	4b67      	ldr	r3, [pc, #412]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f023 020f 	bic.w	r2, r3, #15
 80020b2:	4965      	ldr	r1, [pc, #404]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ba:	4b63      	ldr	r3, [pc, #396]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d001      	beq.n	80020cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e0b8      	b.n	800223e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d020      	beq.n	800211a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d005      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020e4:	4b59      	ldr	r3, [pc, #356]	; (800224c <HAL_RCC_ClockConfig+0x1c8>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	4a58      	ldr	r2, [pc, #352]	; (800224c <HAL_RCC_ClockConfig+0x1c8>)
 80020ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0308 	and.w	r3, r3, #8
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d005      	beq.n	8002108 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020fc:	4b53      	ldr	r3, [pc, #332]	; (800224c <HAL_RCC_ClockConfig+0x1c8>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	4a52      	ldr	r2, [pc, #328]	; (800224c <HAL_RCC_ClockConfig+0x1c8>)
 8002102:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002106:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002108:	4b50      	ldr	r3, [pc, #320]	; (800224c <HAL_RCC_ClockConfig+0x1c8>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	494d      	ldr	r1, [pc, #308]	; (800224c <HAL_RCC_ClockConfig+0x1c8>)
 8002116:	4313      	orrs	r3, r2
 8002118:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d040      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d107      	bne.n	800213e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212e:	4b47      	ldr	r3, [pc, #284]	; (800224c <HAL_RCC_ClockConfig+0x1c8>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d115      	bne.n	8002166 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e07f      	b.n	800223e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b02      	cmp	r3, #2
 8002144:	d107      	bne.n	8002156 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002146:	4b41      	ldr	r3, [pc, #260]	; (800224c <HAL_RCC_ClockConfig+0x1c8>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d109      	bne.n	8002166 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e073      	b.n	800223e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002156:	4b3d      	ldr	r3, [pc, #244]	; (800224c <HAL_RCC_ClockConfig+0x1c8>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e06b      	b.n	800223e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002166:	4b39      	ldr	r3, [pc, #228]	; (800224c <HAL_RCC_ClockConfig+0x1c8>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f023 0203 	bic.w	r2, r3, #3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	4936      	ldr	r1, [pc, #216]	; (800224c <HAL_RCC_ClockConfig+0x1c8>)
 8002174:	4313      	orrs	r3, r2
 8002176:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002178:	f7ff f92a 	bl	80013d0 <HAL_GetTick>
 800217c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217e:	e00a      	b.n	8002196 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002180:	f7ff f926 	bl	80013d0 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	f241 3288 	movw	r2, #5000	; 0x1388
 800218e:	4293      	cmp	r3, r2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e053      	b.n	800223e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002196:	4b2d      	ldr	r3, [pc, #180]	; (800224c <HAL_RCC_ClockConfig+0x1c8>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 020c 	and.w	r2, r3, #12
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d1eb      	bne.n	8002180 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021a8:	4b27      	ldr	r3, [pc, #156]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 030f 	and.w	r3, r3, #15
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d210      	bcs.n	80021d8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b6:	4b24      	ldr	r3, [pc, #144]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f023 020f 	bic.w	r2, r3, #15
 80021be:	4922      	ldr	r1, [pc, #136]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c6:	4b20      	ldr	r3, [pc, #128]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d001      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e032      	b.n	800223e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d008      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021e4:	4b19      	ldr	r3, [pc, #100]	; (800224c <HAL_RCC_ClockConfig+0x1c8>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	4916      	ldr	r1, [pc, #88]	; (800224c <HAL_RCC_ClockConfig+0x1c8>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0308 	and.w	r3, r3, #8
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d009      	beq.n	8002216 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002202:	4b12      	ldr	r3, [pc, #72]	; (800224c <HAL_RCC_ClockConfig+0x1c8>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	490e      	ldr	r1, [pc, #56]	; (800224c <HAL_RCC_ClockConfig+0x1c8>)
 8002212:	4313      	orrs	r3, r2
 8002214:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002216:	f000 f821 	bl	800225c <HAL_RCC_GetSysClockFreq>
 800221a:	4602      	mov	r2, r0
 800221c:	4b0b      	ldr	r3, [pc, #44]	; (800224c <HAL_RCC_ClockConfig+0x1c8>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	091b      	lsrs	r3, r3, #4
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	490a      	ldr	r1, [pc, #40]	; (8002250 <HAL_RCC_ClockConfig+0x1cc>)
 8002228:	5ccb      	ldrb	r3, [r1, r3]
 800222a:	fa22 f303 	lsr.w	r3, r2, r3
 800222e:	4a09      	ldr	r2, [pc, #36]	; (8002254 <HAL_RCC_ClockConfig+0x1d0>)
 8002230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002232:	4b09      	ldr	r3, [pc, #36]	; (8002258 <HAL_RCC_ClockConfig+0x1d4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff f886 	bl	8001348 <HAL_InitTick>

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40023c00 	.word	0x40023c00
 800224c:	40023800 	.word	0x40023800
 8002250:	08006d70 	.word	0x08006d70
 8002254:	20000004 	.word	0x20000004
 8002258:	20000008 	.word	0x20000008

0800225c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800225c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002260:	b094      	sub	sp, #80	; 0x50
 8002262:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002264:	2300      	movs	r3, #0
 8002266:	647b      	str	r3, [r7, #68]	; 0x44
 8002268:	2300      	movs	r3, #0
 800226a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800226c:	2300      	movs	r3, #0
 800226e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002270:	2300      	movs	r3, #0
 8002272:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002274:	4b79      	ldr	r3, [pc, #484]	; (800245c <HAL_RCC_GetSysClockFreq+0x200>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 030c 	and.w	r3, r3, #12
 800227c:	2b08      	cmp	r3, #8
 800227e:	d00d      	beq.n	800229c <HAL_RCC_GetSysClockFreq+0x40>
 8002280:	2b08      	cmp	r3, #8
 8002282:	f200 80e1 	bhi.w	8002448 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002286:	2b00      	cmp	r3, #0
 8002288:	d002      	beq.n	8002290 <HAL_RCC_GetSysClockFreq+0x34>
 800228a:	2b04      	cmp	r3, #4
 800228c:	d003      	beq.n	8002296 <HAL_RCC_GetSysClockFreq+0x3a>
 800228e:	e0db      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002290:	4b73      	ldr	r3, [pc, #460]	; (8002460 <HAL_RCC_GetSysClockFreq+0x204>)
 8002292:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002294:	e0db      	b.n	800244e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002296:	4b73      	ldr	r3, [pc, #460]	; (8002464 <HAL_RCC_GetSysClockFreq+0x208>)
 8002298:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800229a:	e0d8      	b.n	800244e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800229c:	4b6f      	ldr	r3, [pc, #444]	; (800245c <HAL_RCC_GetSysClockFreq+0x200>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022a4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80022a6:	4b6d      	ldr	r3, [pc, #436]	; (800245c <HAL_RCC_GetSysClockFreq+0x200>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d063      	beq.n	800237a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022b2:	4b6a      	ldr	r3, [pc, #424]	; (800245c <HAL_RCC_GetSysClockFreq+0x200>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	099b      	lsrs	r3, r3, #6
 80022b8:	2200      	movs	r2, #0
 80022ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80022bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80022be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022c4:	633b      	str	r3, [r7, #48]	; 0x30
 80022c6:	2300      	movs	r3, #0
 80022c8:	637b      	str	r3, [r7, #52]	; 0x34
 80022ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80022ce:	4622      	mov	r2, r4
 80022d0:	462b      	mov	r3, r5
 80022d2:	f04f 0000 	mov.w	r0, #0
 80022d6:	f04f 0100 	mov.w	r1, #0
 80022da:	0159      	lsls	r1, r3, #5
 80022dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022e0:	0150      	lsls	r0, r2, #5
 80022e2:	4602      	mov	r2, r0
 80022e4:	460b      	mov	r3, r1
 80022e6:	4621      	mov	r1, r4
 80022e8:	1a51      	subs	r1, r2, r1
 80022ea:	6139      	str	r1, [r7, #16]
 80022ec:	4629      	mov	r1, r5
 80022ee:	eb63 0301 	sbc.w	r3, r3, r1
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	f04f 0200 	mov.w	r2, #0
 80022f8:	f04f 0300 	mov.w	r3, #0
 80022fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002300:	4659      	mov	r1, fp
 8002302:	018b      	lsls	r3, r1, #6
 8002304:	4651      	mov	r1, sl
 8002306:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800230a:	4651      	mov	r1, sl
 800230c:	018a      	lsls	r2, r1, #6
 800230e:	4651      	mov	r1, sl
 8002310:	ebb2 0801 	subs.w	r8, r2, r1
 8002314:	4659      	mov	r1, fp
 8002316:	eb63 0901 	sbc.w	r9, r3, r1
 800231a:	f04f 0200 	mov.w	r2, #0
 800231e:	f04f 0300 	mov.w	r3, #0
 8002322:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002326:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800232a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800232e:	4690      	mov	r8, r2
 8002330:	4699      	mov	r9, r3
 8002332:	4623      	mov	r3, r4
 8002334:	eb18 0303 	adds.w	r3, r8, r3
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	462b      	mov	r3, r5
 800233c:	eb49 0303 	adc.w	r3, r9, r3
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	f04f 0300 	mov.w	r3, #0
 800234a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800234e:	4629      	mov	r1, r5
 8002350:	024b      	lsls	r3, r1, #9
 8002352:	4621      	mov	r1, r4
 8002354:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002358:	4621      	mov	r1, r4
 800235a:	024a      	lsls	r2, r1, #9
 800235c:	4610      	mov	r0, r2
 800235e:	4619      	mov	r1, r3
 8002360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002362:	2200      	movs	r2, #0
 8002364:	62bb      	str	r3, [r7, #40]	; 0x28
 8002366:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002368:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800236c:	f7fd ffd0 	bl	8000310 <__aeabi_uldivmod>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	4613      	mov	r3, r2
 8002376:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002378:	e058      	b.n	800242c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800237a:	4b38      	ldr	r3, [pc, #224]	; (800245c <HAL_RCC_GetSysClockFreq+0x200>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	099b      	lsrs	r3, r3, #6
 8002380:	2200      	movs	r2, #0
 8002382:	4618      	mov	r0, r3
 8002384:	4611      	mov	r1, r2
 8002386:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800238a:	623b      	str	r3, [r7, #32]
 800238c:	2300      	movs	r3, #0
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
 8002390:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002394:	4642      	mov	r2, r8
 8002396:	464b      	mov	r3, r9
 8002398:	f04f 0000 	mov.w	r0, #0
 800239c:	f04f 0100 	mov.w	r1, #0
 80023a0:	0159      	lsls	r1, r3, #5
 80023a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023a6:	0150      	lsls	r0, r2, #5
 80023a8:	4602      	mov	r2, r0
 80023aa:	460b      	mov	r3, r1
 80023ac:	4641      	mov	r1, r8
 80023ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80023b2:	4649      	mov	r1, r9
 80023b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	f04f 0300 	mov.w	r3, #0
 80023c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80023c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80023c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023cc:	ebb2 040a 	subs.w	r4, r2, sl
 80023d0:	eb63 050b 	sbc.w	r5, r3, fp
 80023d4:	f04f 0200 	mov.w	r2, #0
 80023d8:	f04f 0300 	mov.w	r3, #0
 80023dc:	00eb      	lsls	r3, r5, #3
 80023de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023e2:	00e2      	lsls	r2, r4, #3
 80023e4:	4614      	mov	r4, r2
 80023e6:	461d      	mov	r5, r3
 80023e8:	4643      	mov	r3, r8
 80023ea:	18e3      	adds	r3, r4, r3
 80023ec:	603b      	str	r3, [r7, #0]
 80023ee:	464b      	mov	r3, r9
 80023f0:	eb45 0303 	adc.w	r3, r5, r3
 80023f4:	607b      	str	r3, [r7, #4]
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	f04f 0300 	mov.w	r3, #0
 80023fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002402:	4629      	mov	r1, r5
 8002404:	028b      	lsls	r3, r1, #10
 8002406:	4621      	mov	r1, r4
 8002408:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800240c:	4621      	mov	r1, r4
 800240e:	028a      	lsls	r2, r1, #10
 8002410:	4610      	mov	r0, r2
 8002412:	4619      	mov	r1, r3
 8002414:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002416:	2200      	movs	r2, #0
 8002418:	61bb      	str	r3, [r7, #24]
 800241a:	61fa      	str	r2, [r7, #28]
 800241c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002420:	f7fd ff76 	bl	8000310 <__aeabi_uldivmod>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	4613      	mov	r3, r2
 800242a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800242c:	4b0b      	ldr	r3, [pc, #44]	; (800245c <HAL_RCC_GetSysClockFreq+0x200>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	0c1b      	lsrs	r3, r3, #16
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	3301      	adds	r3, #1
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800243c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800243e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002440:	fbb2 f3f3 	udiv	r3, r2, r3
 8002444:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002446:	e002      	b.n	800244e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002448:	4b05      	ldr	r3, [pc, #20]	; (8002460 <HAL_RCC_GetSysClockFreq+0x204>)
 800244a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800244c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800244e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002450:	4618      	mov	r0, r3
 8002452:	3750      	adds	r7, #80	; 0x50
 8002454:	46bd      	mov	sp, r7
 8002456:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800245a:	bf00      	nop
 800245c:	40023800 	.word	0x40023800
 8002460:	00f42400 	.word	0x00f42400
 8002464:	007a1200 	.word	0x007a1200

08002468 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800246c:	4b03      	ldr	r3, [pc, #12]	; (800247c <HAL_RCC_GetHCLKFreq+0x14>)
 800246e:	681b      	ldr	r3, [r3, #0]
}
 8002470:	4618      	mov	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	20000004 	.word	0x20000004

08002480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002484:	f7ff fff0 	bl	8002468 <HAL_RCC_GetHCLKFreq>
 8002488:	4602      	mov	r2, r0
 800248a:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	0a9b      	lsrs	r3, r3, #10
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	4903      	ldr	r1, [pc, #12]	; (80024a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002496:	5ccb      	ldrb	r3, [r1, r3]
 8002498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800249c:	4618      	mov	r0, r3
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40023800 	.word	0x40023800
 80024a4:	08006d80 	.word	0x08006d80

080024a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024ac:	f7ff ffdc 	bl	8002468 <HAL_RCC_GetHCLKFreq>
 80024b0:	4602      	mov	r2, r0
 80024b2:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	0b5b      	lsrs	r3, r3, #13
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	4903      	ldr	r1, [pc, #12]	; (80024cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80024be:	5ccb      	ldrb	r3, [r1, r3]
 80024c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40023800 	.word	0x40023800
 80024cc:	08006d80 	.word	0x08006d80

080024d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b088      	sub	sp, #32
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d012      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024f8:	4b69      	ldr	r3, [pc, #420]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	4a68      	ldr	r2, [pc, #416]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002502:	6093      	str	r3, [r2, #8]
 8002504:	4b66      	ldr	r3, [pc, #408]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800250c:	4964      	ldr	r1, [pc, #400]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800250e:	4313      	orrs	r3, r2
 8002510:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800251a:	2301      	movs	r3, #1
 800251c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d017      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800252a:	4b5d      	ldr	r3, [pc, #372]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800252c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002530:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002538:	4959      	ldr	r1, [pc, #356]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800253a:	4313      	orrs	r3, r2
 800253c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002544:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002548:	d101      	bne.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800254a:	2301      	movs	r3, #1
 800254c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002556:	2301      	movs	r3, #1
 8002558:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d017      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002566:	4b4e      	ldr	r3, [pc, #312]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002568:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800256c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002574:	494a      	ldr	r1, [pc, #296]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002576:	4313      	orrs	r3, r2
 8002578:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002580:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002584:	d101      	bne.n	800258a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002586:	2301      	movs	r3, #1
 8002588:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002592:	2301      	movs	r3, #1
 8002594:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80025a2:	2301      	movs	r3, #1
 80025a4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0320 	and.w	r3, r3, #32
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 808b 	beq.w	80026ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80025b4:	4b3a      	ldr	r3, [pc, #232]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b8:	4a39      	ldr	r2, [pc, #228]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025be:	6413      	str	r3, [r2, #64]	; 0x40
 80025c0:	4b37      	ldr	r3, [pc, #220]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c8:	60bb      	str	r3, [r7, #8]
 80025ca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80025cc:	4b35      	ldr	r3, [pc, #212]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a34      	ldr	r2, [pc, #208]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025d8:	f7fe fefa 	bl	80013d0 <HAL_GetTick>
 80025dc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e0:	f7fe fef6 	bl	80013d0 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b64      	cmp	r3, #100	; 0x64
 80025ec:	d901      	bls.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e38f      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80025f2:	4b2c      	ldr	r3, [pc, #176]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025fe:	4b28      	ldr	r3, [pc, #160]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002606:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d035      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	429a      	cmp	r2, r3
 800261a:	d02e      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800261c:	4b20      	ldr	r3, [pc, #128]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800261e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002624:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002626:	4b1e      	ldr	r3, [pc, #120]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262a:	4a1d      	ldr	r2, [pc, #116]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800262c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002630:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002632:	4b1b      	ldr	r3, [pc, #108]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002636:	4a1a      	ldr	r2, [pc, #104]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800263c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800263e:	4a18      	ldr	r2, [pc, #96]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002644:	4b16      	ldr	r3, [pc, #88]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b01      	cmp	r3, #1
 800264e:	d114      	bne.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002650:	f7fe febe 	bl	80013d0 <HAL_GetTick>
 8002654:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002656:	e00a      	b.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002658:	f7fe feba 	bl	80013d0 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	f241 3288 	movw	r2, #5000	; 0x1388
 8002666:	4293      	cmp	r3, r2
 8002668:	d901      	bls.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e351      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800266e:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0ee      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002682:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002686:	d111      	bne.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002688:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002694:	4b04      	ldr	r3, [pc, #16]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002696:	400b      	ands	r3, r1
 8002698:	4901      	ldr	r1, [pc, #4]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800269a:	4313      	orrs	r3, r2
 800269c:	608b      	str	r3, [r1, #8]
 800269e:	e00b      	b.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40007000 	.word	0x40007000
 80026a8:	0ffffcff 	.word	0x0ffffcff
 80026ac:	4bac      	ldr	r3, [pc, #688]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	4aab      	ldr	r2, [pc, #684]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80026b6:	6093      	str	r3, [r2, #8]
 80026b8:	4ba9      	ldr	r3, [pc, #676]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c4:	49a6      	ldr	r1, [pc, #664]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0310 	and.w	r3, r3, #16
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d010      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80026d6:	4ba2      	ldr	r3, [pc, #648]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026dc:	4aa0      	ldr	r2, [pc, #640]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80026e6:	4b9e      	ldr	r3, [pc, #632]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026e8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f0:	499b      	ldr	r1, [pc, #620]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00a      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002704:	4b96      	ldr	r3, [pc, #600]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002712:	4993      	ldr	r1, [pc, #588]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002714:	4313      	orrs	r3, r2
 8002716:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00a      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002726:	4b8e      	ldr	r3, [pc, #568]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002734:	498a      	ldr	r1, [pc, #552]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002736:	4313      	orrs	r3, r2
 8002738:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00a      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002748:	4b85      	ldr	r3, [pc, #532]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800274a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800274e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002756:	4982      	ldr	r1, [pc, #520]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002758:	4313      	orrs	r3, r2
 800275a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00a      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800276a:	4b7d      	ldr	r3, [pc, #500]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800276c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002770:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002778:	4979      	ldr	r1, [pc, #484]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800277a:	4313      	orrs	r3, r2
 800277c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00a      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800278c:	4b74      	ldr	r3, [pc, #464]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800278e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002792:	f023 0203 	bic.w	r2, r3, #3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279a:	4971      	ldr	r1, [pc, #452]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800279c:	4313      	orrs	r3, r2
 800279e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00a      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027ae:	4b6c      	ldr	r3, [pc, #432]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b4:	f023 020c 	bic.w	r2, r3, #12
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027bc:	4968      	ldr	r1, [pc, #416]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00a      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027d0:	4b63      	ldr	r3, [pc, #396]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027de:	4960      	ldr	r1, [pc, #384]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00a      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027f2:	4b5b      	ldr	r3, [pc, #364]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002800:	4957      	ldr	r1, [pc, #348]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002802:	4313      	orrs	r3, r2
 8002804:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00a      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002814:	4b52      	ldr	r3, [pc, #328]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800281a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002822:	494f      	ldr	r1, [pc, #316]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002824:	4313      	orrs	r3, r2
 8002826:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00a      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002836:	4b4a      	ldr	r3, [pc, #296]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002844:	4946      	ldr	r1, [pc, #280]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002846:	4313      	orrs	r3, r2
 8002848:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00a      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002858:	4b41      	ldr	r3, [pc, #260]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800285a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800285e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002866:	493e      	ldr	r1, [pc, #248]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002868:	4313      	orrs	r3, r2
 800286a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00a      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800287a:	4b39      	ldr	r3, [pc, #228]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800287c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002880:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002888:	4935      	ldr	r1, [pc, #212]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00a      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800289c:	4b30      	ldr	r3, [pc, #192]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800289e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028aa:	492d      	ldr	r1, [pc, #180]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d011      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80028be:	4b28      	ldr	r3, [pc, #160]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028cc:	4924      	ldr	r1, [pc, #144]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028dc:	d101      	bne.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80028de:	2301      	movs	r3, #1
 80028e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80028ee:	2301      	movs	r3, #1
 80028f0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00a      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028fe:	4b18      	ldr	r3, [pc, #96]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002904:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800290c:	4914      	ldr	r1, [pc, #80]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800290e:	4313      	orrs	r3, r2
 8002910:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00b      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002920:	4b0f      	ldr	r3, [pc, #60]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002926:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002930:	490b      	ldr	r1, [pc, #44]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002932:	4313      	orrs	r3, r2
 8002934:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00f      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002944:	4b06      	ldr	r3, [pc, #24]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002954:	4902      	ldr	r1, [pc, #8]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002956:	4313      	orrs	r3, r2
 8002958:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800295c:	e002      	b.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800295e:	bf00      	nop
 8002960:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00b      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002970:	4b8a      	ldr	r3, [pc, #552]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002972:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002976:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002980:	4986      	ldr	r1, [pc, #536]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002982:	4313      	orrs	r3, r2
 8002984:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00b      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002994:	4b81      	ldr	r3, [pc, #516]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002996:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800299a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029a4:	497d      	ldr	r1, [pc, #500]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d006      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 80d6 	beq.w	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80029c0:	4b76      	ldr	r3, [pc, #472]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a75      	ldr	r2, [pc, #468]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029cc:	f7fe fd00 	bl	80013d0 <HAL_GetTick>
 80029d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80029d4:	f7fe fcfc 	bl	80013d0 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b64      	cmp	r3, #100	; 0x64
 80029e0:	d901      	bls.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e195      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029e6:	4b6d      	ldr	r3, [pc, #436]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f0      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d021      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d11d      	bne.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a06:	4b65      	ldr	r3, [pc, #404]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a0c:	0c1b      	lsrs	r3, r3, #16
 8002a0e:	f003 0303 	and.w	r3, r3, #3
 8002a12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a14:	4b61      	ldr	r3, [pc, #388]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a1a:	0e1b      	lsrs	r3, r3, #24
 8002a1c:	f003 030f 	and.w	r3, r3, #15
 8002a20:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	019a      	lsls	r2, r3, #6
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	041b      	lsls	r3, r3, #16
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	061b      	lsls	r3, r3, #24
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	071b      	lsls	r3, r3, #28
 8002a3a:	4958      	ldr	r1, [pc, #352]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d004      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a56:	d00a      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d02e      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a6c:	d129      	bne.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a6e:	4b4b      	ldr	r3, [pc, #300]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a74:	0c1b      	lsrs	r3, r3, #16
 8002a76:	f003 0303 	and.w	r3, r3, #3
 8002a7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a7c:	4b47      	ldr	r3, [pc, #284]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a82:	0f1b      	lsrs	r3, r3, #28
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	019a      	lsls	r2, r3, #6
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	041b      	lsls	r3, r3, #16
 8002a94:	431a      	orrs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	061b      	lsls	r3, r3, #24
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	071b      	lsls	r3, r3, #28
 8002aa2:	493e      	ldr	r1, [pc, #248]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002aaa:	4b3c      	ldr	r3, [pc, #240]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ab0:	f023 021f 	bic.w	r2, r3, #31
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	4938      	ldr	r1, [pc, #224]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d01d      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ace:	4b33      	ldr	r3, [pc, #204]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ad4:	0e1b      	lsrs	r3, r3, #24
 8002ad6:	f003 030f 	and.w	r3, r3, #15
 8002ada:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002adc:	4b2f      	ldr	r3, [pc, #188]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ae2:	0f1b      	lsrs	r3, r3, #28
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	019a      	lsls	r2, r3, #6
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	041b      	lsls	r3, r3, #16
 8002af6:	431a      	orrs	r2, r3
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	061b      	lsls	r3, r3, #24
 8002afc:	431a      	orrs	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	071b      	lsls	r3, r3, #28
 8002b02:	4926      	ldr	r1, [pc, #152]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d011      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	019a      	lsls	r2, r3, #6
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	041b      	lsls	r3, r3, #16
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	061b      	lsls	r3, r3, #24
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	071b      	lsls	r3, r3, #28
 8002b32:	491a      	ldr	r1, [pc, #104]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b3a:	4b18      	ldr	r3, [pc, #96]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a17      	ldr	r2, [pc, #92]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b46:	f7fe fc43 	bl	80013d0 <HAL_GetTick>
 8002b4a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b4c:	e008      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b4e:	f7fe fc3f 	bl	80013d0 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b64      	cmp	r3, #100	; 0x64
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e0d8      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b60:	4b0e      	ldr	r3, [pc, #56]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0f0      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	f040 80ce 	bne.w	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002b74:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a08      	ldr	r2, [pc, #32]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b80:	f7fe fc26 	bl	80013d0 <HAL_GetTick>
 8002b84:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b86:	e00b      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b88:	f7fe fc22 	bl	80013d0 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b64      	cmp	r3, #100	; 0x64
 8002b94:	d904      	bls.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e0bb      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002b9a:	bf00      	nop
 8002b9c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ba0:	4b5e      	ldr	r3, [pc, #376]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ba8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bac:	d0ec      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d009      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d02e      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d12a      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002bd6:	4b51      	ldr	r3, [pc, #324]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bdc:	0c1b      	lsrs	r3, r3, #16
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002be4:	4b4d      	ldr	r3, [pc, #308]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bea:	0f1b      	lsrs	r3, r3, #28
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	019a      	lsls	r2, r3, #6
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	041b      	lsls	r3, r3, #16
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	061b      	lsls	r3, r3, #24
 8002c04:	431a      	orrs	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	071b      	lsls	r3, r3, #28
 8002c0a:	4944      	ldr	r1, [pc, #272]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c12:	4b42      	ldr	r3, [pc, #264]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c18:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c20:	3b01      	subs	r3, #1
 8002c22:	021b      	lsls	r3, r3, #8
 8002c24:	493d      	ldr	r1, [pc, #244]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d022      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c40:	d11d      	bne.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c42:	4b36      	ldr	r3, [pc, #216]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c48:	0e1b      	lsrs	r3, r3, #24
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c50:	4b32      	ldr	r3, [pc, #200]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c56:	0f1b      	lsrs	r3, r3, #28
 8002c58:	f003 0307 	and.w	r3, r3, #7
 8002c5c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	019a      	lsls	r2, r3, #6
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	041b      	lsls	r3, r3, #16
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	061b      	lsls	r3, r3, #24
 8002c70:	431a      	orrs	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	071b      	lsls	r3, r3, #28
 8002c76:	4929      	ldr	r1, [pc, #164]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d028      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c8a:	4b24      	ldr	r3, [pc, #144]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c90:	0e1b      	lsrs	r3, r3, #24
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c98:	4b20      	ldr	r3, [pc, #128]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9e:	0c1b      	lsrs	r3, r3, #16
 8002ca0:	f003 0303 	and.w	r3, r3, #3
 8002ca4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	019a      	lsls	r2, r3, #6
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	041b      	lsls	r3, r3, #16
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	061b      	lsls	r3, r3, #24
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	071b      	lsls	r3, r3, #28
 8002cbe:	4917      	ldr	r1, [pc, #92]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002cc6:	4b15      	ldr	r3, [pc, #84]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ccc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd4:	4911      	ldr	r1, [pc, #68]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002cdc:	4b0f      	ldr	r3, [pc, #60]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a0e      	ldr	r2, [pc, #56]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ce6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ce8:	f7fe fb72 	bl	80013d0 <HAL_GetTick>
 8002cec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002cf0:	f7fe fb6e 	bl	80013d0 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b64      	cmp	r3, #100	; 0x64
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e007      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d02:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d0e:	d1ef      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3720      	adds	r7, #32
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40023800 	.word	0x40023800

08002d20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e049      	b.n	8002dc6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d106      	bne.n	8002d4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7fe f96a 	bl	8001020 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3304      	adds	r3, #4
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	4610      	mov	r0, r2
 8002d60:	f000 fd3a 	bl	80037d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
	...

08002dd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d001      	beq.n	8002de8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e054      	b.n	8002e92 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2202      	movs	r2, #2
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68da      	ldr	r2, [r3, #12]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0201 	orr.w	r2, r2, #1
 8002dfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a26      	ldr	r2, [pc, #152]	; (8002ea0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d022      	beq.n	8002e50 <HAL_TIM_Base_Start_IT+0x80>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e12:	d01d      	beq.n	8002e50 <HAL_TIM_Base_Start_IT+0x80>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a22      	ldr	r2, [pc, #136]	; (8002ea4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d018      	beq.n	8002e50 <HAL_TIM_Base_Start_IT+0x80>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a21      	ldr	r2, [pc, #132]	; (8002ea8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d013      	beq.n	8002e50 <HAL_TIM_Base_Start_IT+0x80>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a1f      	ldr	r2, [pc, #124]	; (8002eac <HAL_TIM_Base_Start_IT+0xdc>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d00e      	beq.n	8002e50 <HAL_TIM_Base_Start_IT+0x80>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a1e      	ldr	r2, [pc, #120]	; (8002eb0 <HAL_TIM_Base_Start_IT+0xe0>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d009      	beq.n	8002e50 <HAL_TIM_Base_Start_IT+0x80>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a1c      	ldr	r2, [pc, #112]	; (8002eb4 <HAL_TIM_Base_Start_IT+0xe4>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d004      	beq.n	8002e50 <HAL_TIM_Base_Start_IT+0x80>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a1b      	ldr	r2, [pc, #108]	; (8002eb8 <HAL_TIM_Base_Start_IT+0xe8>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d115      	bne.n	8002e7c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	4b19      	ldr	r3, [pc, #100]	; (8002ebc <HAL_TIM_Base_Start_IT+0xec>)
 8002e58:	4013      	ands	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2b06      	cmp	r3, #6
 8002e60:	d015      	beq.n	8002e8e <HAL_TIM_Base_Start_IT+0xbe>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e68:	d011      	beq.n	8002e8e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f042 0201 	orr.w	r2, r2, #1
 8002e78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e7a:	e008      	b.n	8002e8e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 0201 	orr.w	r2, r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	e000      	b.n	8002e90 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3714      	adds	r7, #20
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40010000 	.word	0x40010000
 8002ea4:	40000400 	.word	0x40000400
 8002ea8:	40000800 	.word	0x40000800
 8002eac:	40000c00 	.word	0x40000c00
 8002eb0:	40010400 	.word	0x40010400
 8002eb4:	40014000 	.word	0x40014000
 8002eb8:	40001800 	.word	0x40001800
 8002ebc:	00010007 	.word	0x00010007

08002ec0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e049      	b.n	8002f66 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d106      	bne.n	8002eec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f841 	bl	8002f6e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2202      	movs	r2, #2
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3304      	adds	r3, #4
 8002efc:	4619      	mov	r1, r3
 8002efe:	4610      	mov	r0, r2
 8002f00:	f000 fc6a 	bl	80037d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b083      	sub	sp, #12
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
	...

08002f84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d109      	bne.n	8002fa8 <HAL_TIM_PWM_Start+0x24>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	bf14      	ite	ne
 8002fa0:	2301      	movne	r3, #1
 8002fa2:	2300      	moveq	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	e03c      	b.n	8003022 <HAL_TIM_PWM_Start+0x9e>
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d109      	bne.n	8002fc2 <HAL_TIM_PWM_Start+0x3e>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	bf14      	ite	ne
 8002fba:	2301      	movne	r3, #1
 8002fbc:	2300      	moveq	r3, #0
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	e02f      	b.n	8003022 <HAL_TIM_PWM_Start+0x9e>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d109      	bne.n	8002fdc <HAL_TIM_PWM_Start+0x58>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	bf14      	ite	ne
 8002fd4:	2301      	movne	r3, #1
 8002fd6:	2300      	moveq	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	e022      	b.n	8003022 <HAL_TIM_PWM_Start+0x9e>
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	2b0c      	cmp	r3, #12
 8002fe0:	d109      	bne.n	8002ff6 <HAL_TIM_PWM_Start+0x72>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	bf14      	ite	ne
 8002fee:	2301      	movne	r3, #1
 8002ff0:	2300      	moveq	r3, #0
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	e015      	b.n	8003022 <HAL_TIM_PWM_Start+0x9e>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2b10      	cmp	r3, #16
 8002ffa:	d109      	bne.n	8003010 <HAL_TIM_PWM_Start+0x8c>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b01      	cmp	r3, #1
 8003006:	bf14      	ite	ne
 8003008:	2301      	movne	r3, #1
 800300a:	2300      	moveq	r3, #0
 800300c:	b2db      	uxtb	r3, r3
 800300e:	e008      	b.n	8003022 <HAL_TIM_PWM_Start+0x9e>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b01      	cmp	r3, #1
 800301a:	bf14      	ite	ne
 800301c:	2301      	movne	r3, #1
 800301e:	2300      	moveq	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e092      	b.n	8003150 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d104      	bne.n	800303a <HAL_TIM_PWM_Start+0xb6>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2202      	movs	r2, #2
 8003034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003038:	e023      	b.n	8003082 <HAL_TIM_PWM_Start+0xfe>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	2b04      	cmp	r3, #4
 800303e:	d104      	bne.n	800304a <HAL_TIM_PWM_Start+0xc6>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003048:	e01b      	b.n	8003082 <HAL_TIM_PWM_Start+0xfe>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2b08      	cmp	r3, #8
 800304e:	d104      	bne.n	800305a <HAL_TIM_PWM_Start+0xd6>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2202      	movs	r2, #2
 8003054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003058:	e013      	b.n	8003082 <HAL_TIM_PWM_Start+0xfe>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	2b0c      	cmp	r3, #12
 800305e:	d104      	bne.n	800306a <HAL_TIM_PWM_Start+0xe6>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2202      	movs	r2, #2
 8003064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003068:	e00b      	b.n	8003082 <HAL_TIM_PWM_Start+0xfe>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	2b10      	cmp	r3, #16
 800306e:	d104      	bne.n	800307a <HAL_TIM_PWM_Start+0xf6>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2202      	movs	r2, #2
 8003074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003078:	e003      	b.n	8003082 <HAL_TIM_PWM_Start+0xfe>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2202      	movs	r2, #2
 800307e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2201      	movs	r2, #1
 8003088:	6839      	ldr	r1, [r7, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f000 ff3c 	bl	8003f08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a30      	ldr	r2, [pc, #192]	; (8003158 <HAL_TIM_PWM_Start+0x1d4>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d004      	beq.n	80030a4 <HAL_TIM_PWM_Start+0x120>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a2f      	ldr	r2, [pc, #188]	; (800315c <HAL_TIM_PWM_Start+0x1d8>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d101      	bne.n	80030a8 <HAL_TIM_PWM_Start+0x124>
 80030a4:	2301      	movs	r3, #1
 80030a6:	e000      	b.n	80030aa <HAL_TIM_PWM_Start+0x126>
 80030a8:	2300      	movs	r3, #0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d007      	beq.n	80030be <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a25      	ldr	r2, [pc, #148]	; (8003158 <HAL_TIM_PWM_Start+0x1d4>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d022      	beq.n	800310e <HAL_TIM_PWM_Start+0x18a>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d0:	d01d      	beq.n	800310e <HAL_TIM_PWM_Start+0x18a>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a22      	ldr	r2, [pc, #136]	; (8003160 <HAL_TIM_PWM_Start+0x1dc>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d018      	beq.n	800310e <HAL_TIM_PWM_Start+0x18a>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a20      	ldr	r2, [pc, #128]	; (8003164 <HAL_TIM_PWM_Start+0x1e0>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d013      	beq.n	800310e <HAL_TIM_PWM_Start+0x18a>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a1f      	ldr	r2, [pc, #124]	; (8003168 <HAL_TIM_PWM_Start+0x1e4>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d00e      	beq.n	800310e <HAL_TIM_PWM_Start+0x18a>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a19      	ldr	r2, [pc, #100]	; (800315c <HAL_TIM_PWM_Start+0x1d8>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d009      	beq.n	800310e <HAL_TIM_PWM_Start+0x18a>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a1b      	ldr	r2, [pc, #108]	; (800316c <HAL_TIM_PWM_Start+0x1e8>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d004      	beq.n	800310e <HAL_TIM_PWM_Start+0x18a>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a19      	ldr	r2, [pc, #100]	; (8003170 <HAL_TIM_PWM_Start+0x1ec>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d115      	bne.n	800313a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	4b17      	ldr	r3, [pc, #92]	; (8003174 <HAL_TIM_PWM_Start+0x1f0>)
 8003116:	4013      	ands	r3, r2
 8003118:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2b06      	cmp	r3, #6
 800311e:	d015      	beq.n	800314c <HAL_TIM_PWM_Start+0x1c8>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003126:	d011      	beq.n	800314c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0201 	orr.w	r2, r2, #1
 8003136:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003138:	e008      	b.n	800314c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f042 0201 	orr.w	r2, r2, #1
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	e000      	b.n	800314e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800314c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40010000 	.word	0x40010000
 800315c:	40010400 	.word	0x40010400
 8003160:	40000400 	.word	0x40000400
 8003164:	40000800 	.word	0x40000800
 8003168:	40000c00 	.word	0x40000c00
 800316c:	40014000 	.word	0x40014000
 8003170:	40001800 	.word	0x40001800
 8003174:	00010007 	.word	0x00010007

08003178 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b02      	cmp	r3, #2
 800318c:	d122      	bne.n	80031d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b02      	cmp	r3, #2
 800319a:	d11b      	bne.n	80031d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f06f 0202 	mvn.w	r2, #2
 80031a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 faee 	bl	800379c <HAL_TIM_IC_CaptureCallback>
 80031c0:	e005      	b.n	80031ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 fae0 	bl	8003788 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 faf1 	bl	80037b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	2b04      	cmp	r3, #4
 80031e0:	d122      	bne.n	8003228 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b04      	cmp	r3, #4
 80031ee:	d11b      	bne.n	8003228 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f06f 0204 	mvn.w	r2, #4
 80031f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2202      	movs	r2, #2
 80031fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 fac4 	bl	800379c <HAL_TIM_IC_CaptureCallback>
 8003214:	e005      	b.n	8003222 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 fab6 	bl	8003788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 fac7 	bl	80037b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b08      	cmp	r3, #8
 8003234:	d122      	bne.n	800327c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f003 0308 	and.w	r3, r3, #8
 8003240:	2b08      	cmp	r3, #8
 8003242:	d11b      	bne.n	800327c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f06f 0208 	mvn.w	r2, #8
 800324c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2204      	movs	r2, #4
 8003252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	f003 0303 	and.w	r3, r3, #3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 fa9a 	bl	800379c <HAL_TIM_IC_CaptureCallback>
 8003268:	e005      	b.n	8003276 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 fa8c 	bl	8003788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 fa9d 	bl	80037b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	f003 0310 	and.w	r3, r3, #16
 8003286:	2b10      	cmp	r3, #16
 8003288:	d122      	bne.n	80032d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f003 0310 	and.w	r3, r3, #16
 8003294:	2b10      	cmp	r3, #16
 8003296:	d11b      	bne.n	80032d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f06f 0210 	mvn.w	r2, #16
 80032a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2208      	movs	r2, #8
 80032a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 fa70 	bl	800379c <HAL_TIM_IC_CaptureCallback>
 80032bc:	e005      	b.n	80032ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 fa62 	bl	8003788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 fa73 	bl	80037b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d10e      	bne.n	80032fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d107      	bne.n	80032fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f06f 0201 	mvn.w	r2, #1
 80032f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 fa3c 	bl	8003774 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003306:	2b80      	cmp	r3, #128	; 0x80
 8003308:	d10e      	bne.n	8003328 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003314:	2b80      	cmp	r3, #128	; 0x80
 8003316:	d107      	bne.n	8003328 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 feae 	bl	8004084 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003336:	d10e      	bne.n	8003356 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003342:	2b80      	cmp	r3, #128	; 0x80
 8003344:	d107      	bne.n	8003356 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800334e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 fea1 	bl	8004098 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003360:	2b40      	cmp	r3, #64	; 0x40
 8003362:	d10e      	bne.n	8003382 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336e:	2b40      	cmp	r3, #64	; 0x40
 8003370:	d107      	bne.n	8003382 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800337a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 fa21 	bl	80037c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	f003 0320 	and.w	r3, r3, #32
 800338c:	2b20      	cmp	r3, #32
 800338e:	d10e      	bne.n	80033ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	f003 0320 	and.w	r3, r3, #32
 800339a:	2b20      	cmp	r3, #32
 800339c:	d107      	bne.n	80033ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f06f 0220 	mvn.w	r2, #32
 80033a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 fe61 	bl	8004070 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033ae:	bf00      	nop
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
	...

080033b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033c4:	2300      	movs	r3, #0
 80033c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d101      	bne.n	80033d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80033d2:	2302      	movs	r3, #2
 80033d4:	e0ff      	b.n	80035d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b14      	cmp	r3, #20
 80033e2:	f200 80f0 	bhi.w	80035c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80033e6:	a201      	add	r2, pc, #4	; (adr r2, 80033ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80033e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ec:	08003441 	.word	0x08003441
 80033f0:	080035c7 	.word	0x080035c7
 80033f4:	080035c7 	.word	0x080035c7
 80033f8:	080035c7 	.word	0x080035c7
 80033fc:	08003481 	.word	0x08003481
 8003400:	080035c7 	.word	0x080035c7
 8003404:	080035c7 	.word	0x080035c7
 8003408:	080035c7 	.word	0x080035c7
 800340c:	080034c3 	.word	0x080034c3
 8003410:	080035c7 	.word	0x080035c7
 8003414:	080035c7 	.word	0x080035c7
 8003418:	080035c7 	.word	0x080035c7
 800341c:	08003503 	.word	0x08003503
 8003420:	080035c7 	.word	0x080035c7
 8003424:	080035c7 	.word	0x080035c7
 8003428:	080035c7 	.word	0x080035c7
 800342c:	08003545 	.word	0x08003545
 8003430:	080035c7 	.word	0x080035c7
 8003434:	080035c7 	.word	0x080035c7
 8003438:	080035c7 	.word	0x080035c7
 800343c:	08003585 	.word	0x08003585
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68b9      	ldr	r1, [r7, #8]
 8003446:	4618      	mov	r0, r3
 8003448:	f000 fa66 	bl	8003918 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	699a      	ldr	r2, [r3, #24]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0208 	orr.w	r2, r2, #8
 800345a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	699a      	ldr	r2, [r3, #24]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 0204 	bic.w	r2, r2, #4
 800346a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6999      	ldr	r1, [r3, #24]
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	691a      	ldr	r2, [r3, #16]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	619a      	str	r2, [r3, #24]
      break;
 800347e:	e0a5      	b.n	80035cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68b9      	ldr	r1, [r7, #8]
 8003486:	4618      	mov	r0, r3
 8003488:	f000 fab8 	bl	80039fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699a      	ldr	r2, [r3, #24]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800349a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	699a      	ldr	r2, [r3, #24]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6999      	ldr	r1, [r3, #24]
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	021a      	lsls	r2, r3, #8
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	619a      	str	r2, [r3, #24]
      break;
 80034c0:	e084      	b.n	80035cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68b9      	ldr	r1, [r7, #8]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 fb0f 	bl	8003aec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	69da      	ldr	r2, [r3, #28]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f042 0208 	orr.w	r2, r2, #8
 80034dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	69da      	ldr	r2, [r3, #28]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0204 	bic.w	r2, r2, #4
 80034ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	69d9      	ldr	r1, [r3, #28]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	691a      	ldr	r2, [r3, #16]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	61da      	str	r2, [r3, #28]
      break;
 8003500:	e064      	b.n	80035cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68b9      	ldr	r1, [r7, #8]
 8003508:	4618      	mov	r0, r3
 800350a:	f000 fb65 	bl	8003bd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	69da      	ldr	r2, [r3, #28]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800351c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	69da      	ldr	r2, [r3, #28]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800352c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	69d9      	ldr	r1, [r3, #28]
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	021a      	lsls	r2, r3, #8
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	61da      	str	r2, [r3, #28]
      break;
 8003542:	e043      	b.n	80035cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68b9      	ldr	r1, [r7, #8]
 800354a:	4618      	mov	r0, r3
 800354c:	f000 fb9c 	bl	8003c88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0208 	orr.w	r2, r2, #8
 800355e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0204 	bic.w	r2, r2, #4
 800356e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	691a      	ldr	r2, [r3, #16]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003582:	e023      	b.n	80035cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68b9      	ldr	r1, [r7, #8]
 800358a:	4618      	mov	r0, r3
 800358c:	f000 fbce 	bl	8003d2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800359e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	021a      	lsls	r2, r3, #8
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80035c4:	e002      	b.n	80035cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	75fb      	strb	r3, [r7, #23]
      break;
 80035ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop

080035e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035ea:	2300      	movs	r3, #0
 80035ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d101      	bne.n	80035fc <HAL_TIM_ConfigClockSource+0x1c>
 80035f8:	2302      	movs	r3, #2
 80035fa:	e0b4      	b.n	8003766 <HAL_TIM_ConfigClockSource+0x186>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2202      	movs	r2, #2
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	4b56      	ldr	r3, [pc, #344]	; (8003770 <HAL_TIM_ConfigClockSource+0x190>)
 8003618:	4013      	ands	r3, r2
 800361a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003622:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003634:	d03e      	beq.n	80036b4 <HAL_TIM_ConfigClockSource+0xd4>
 8003636:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800363a:	f200 8087 	bhi.w	800374c <HAL_TIM_ConfigClockSource+0x16c>
 800363e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003642:	f000 8086 	beq.w	8003752 <HAL_TIM_ConfigClockSource+0x172>
 8003646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800364a:	d87f      	bhi.n	800374c <HAL_TIM_ConfigClockSource+0x16c>
 800364c:	2b70      	cmp	r3, #112	; 0x70
 800364e:	d01a      	beq.n	8003686 <HAL_TIM_ConfigClockSource+0xa6>
 8003650:	2b70      	cmp	r3, #112	; 0x70
 8003652:	d87b      	bhi.n	800374c <HAL_TIM_ConfigClockSource+0x16c>
 8003654:	2b60      	cmp	r3, #96	; 0x60
 8003656:	d050      	beq.n	80036fa <HAL_TIM_ConfigClockSource+0x11a>
 8003658:	2b60      	cmp	r3, #96	; 0x60
 800365a:	d877      	bhi.n	800374c <HAL_TIM_ConfigClockSource+0x16c>
 800365c:	2b50      	cmp	r3, #80	; 0x50
 800365e:	d03c      	beq.n	80036da <HAL_TIM_ConfigClockSource+0xfa>
 8003660:	2b50      	cmp	r3, #80	; 0x50
 8003662:	d873      	bhi.n	800374c <HAL_TIM_ConfigClockSource+0x16c>
 8003664:	2b40      	cmp	r3, #64	; 0x40
 8003666:	d058      	beq.n	800371a <HAL_TIM_ConfigClockSource+0x13a>
 8003668:	2b40      	cmp	r3, #64	; 0x40
 800366a:	d86f      	bhi.n	800374c <HAL_TIM_ConfigClockSource+0x16c>
 800366c:	2b30      	cmp	r3, #48	; 0x30
 800366e:	d064      	beq.n	800373a <HAL_TIM_ConfigClockSource+0x15a>
 8003670:	2b30      	cmp	r3, #48	; 0x30
 8003672:	d86b      	bhi.n	800374c <HAL_TIM_ConfigClockSource+0x16c>
 8003674:	2b20      	cmp	r3, #32
 8003676:	d060      	beq.n	800373a <HAL_TIM_ConfigClockSource+0x15a>
 8003678:	2b20      	cmp	r3, #32
 800367a:	d867      	bhi.n	800374c <HAL_TIM_ConfigClockSource+0x16c>
 800367c:	2b00      	cmp	r3, #0
 800367e:	d05c      	beq.n	800373a <HAL_TIM_ConfigClockSource+0x15a>
 8003680:	2b10      	cmp	r3, #16
 8003682:	d05a      	beq.n	800373a <HAL_TIM_ConfigClockSource+0x15a>
 8003684:	e062      	b.n	800374c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6818      	ldr	r0, [r3, #0]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	6899      	ldr	r1, [r3, #8]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	f000 fc17 	bl	8003ec8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68ba      	ldr	r2, [r7, #8]
 80036b0:	609a      	str	r2, [r3, #8]
      break;
 80036b2:	e04f      	b.n	8003754 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6818      	ldr	r0, [r3, #0]
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	6899      	ldr	r1, [r3, #8]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f000 fc00 	bl	8003ec8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036d6:	609a      	str	r2, [r3, #8]
      break;
 80036d8:	e03c      	b.n	8003754 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6818      	ldr	r0, [r3, #0]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	6859      	ldr	r1, [r3, #4]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	461a      	mov	r2, r3
 80036e8:	f000 fb74 	bl	8003dd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2150      	movs	r1, #80	; 0x50
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 fbcd 	bl	8003e92 <TIM_ITRx_SetConfig>
      break;
 80036f8:	e02c      	b.n	8003754 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6818      	ldr	r0, [r3, #0]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	6859      	ldr	r1, [r3, #4]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	461a      	mov	r2, r3
 8003708:	f000 fb93 	bl	8003e32 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2160      	movs	r1, #96	; 0x60
 8003712:	4618      	mov	r0, r3
 8003714:	f000 fbbd 	bl	8003e92 <TIM_ITRx_SetConfig>
      break;
 8003718:	e01c      	b.n	8003754 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6818      	ldr	r0, [r3, #0]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	6859      	ldr	r1, [r3, #4]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	461a      	mov	r2, r3
 8003728:	f000 fb54 	bl	8003dd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2140      	movs	r1, #64	; 0x40
 8003732:	4618      	mov	r0, r3
 8003734:	f000 fbad 	bl	8003e92 <TIM_ITRx_SetConfig>
      break;
 8003738:	e00c      	b.n	8003754 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4619      	mov	r1, r3
 8003744:	4610      	mov	r0, r2
 8003746:	f000 fba4 	bl	8003e92 <TIM_ITRx_SetConfig>
      break;
 800374a:	e003      	b.n	8003754 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	73fb      	strb	r3, [r7, #15]
      break;
 8003750:	e000      	b.n	8003754 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003752:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003764:	7bfb      	ldrb	r3, [r7, #15]
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	fffeff88 	.word	0xfffeff88

08003774 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a40      	ldr	r2, [pc, #256]	; (80038ec <TIM_Base_SetConfig+0x114>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d013      	beq.n	8003818 <TIM_Base_SetConfig+0x40>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f6:	d00f      	beq.n	8003818 <TIM_Base_SetConfig+0x40>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a3d      	ldr	r2, [pc, #244]	; (80038f0 <TIM_Base_SetConfig+0x118>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d00b      	beq.n	8003818 <TIM_Base_SetConfig+0x40>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a3c      	ldr	r2, [pc, #240]	; (80038f4 <TIM_Base_SetConfig+0x11c>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d007      	beq.n	8003818 <TIM_Base_SetConfig+0x40>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a3b      	ldr	r2, [pc, #236]	; (80038f8 <TIM_Base_SetConfig+0x120>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d003      	beq.n	8003818 <TIM_Base_SetConfig+0x40>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a3a      	ldr	r2, [pc, #232]	; (80038fc <TIM_Base_SetConfig+0x124>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d108      	bne.n	800382a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800381e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	4313      	orrs	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a2f      	ldr	r2, [pc, #188]	; (80038ec <TIM_Base_SetConfig+0x114>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d02b      	beq.n	800388a <TIM_Base_SetConfig+0xb2>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003838:	d027      	beq.n	800388a <TIM_Base_SetConfig+0xb2>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a2c      	ldr	r2, [pc, #176]	; (80038f0 <TIM_Base_SetConfig+0x118>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d023      	beq.n	800388a <TIM_Base_SetConfig+0xb2>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a2b      	ldr	r2, [pc, #172]	; (80038f4 <TIM_Base_SetConfig+0x11c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d01f      	beq.n	800388a <TIM_Base_SetConfig+0xb2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a2a      	ldr	r2, [pc, #168]	; (80038f8 <TIM_Base_SetConfig+0x120>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d01b      	beq.n	800388a <TIM_Base_SetConfig+0xb2>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a29      	ldr	r2, [pc, #164]	; (80038fc <TIM_Base_SetConfig+0x124>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d017      	beq.n	800388a <TIM_Base_SetConfig+0xb2>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a28      	ldr	r2, [pc, #160]	; (8003900 <TIM_Base_SetConfig+0x128>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d013      	beq.n	800388a <TIM_Base_SetConfig+0xb2>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a27      	ldr	r2, [pc, #156]	; (8003904 <TIM_Base_SetConfig+0x12c>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d00f      	beq.n	800388a <TIM_Base_SetConfig+0xb2>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a26      	ldr	r2, [pc, #152]	; (8003908 <TIM_Base_SetConfig+0x130>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d00b      	beq.n	800388a <TIM_Base_SetConfig+0xb2>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a25      	ldr	r2, [pc, #148]	; (800390c <TIM_Base_SetConfig+0x134>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d007      	beq.n	800388a <TIM_Base_SetConfig+0xb2>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a24      	ldr	r2, [pc, #144]	; (8003910 <TIM_Base_SetConfig+0x138>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d003      	beq.n	800388a <TIM_Base_SetConfig+0xb2>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a23      	ldr	r2, [pc, #140]	; (8003914 <TIM_Base_SetConfig+0x13c>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d108      	bne.n	800389c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	4313      	orrs	r3, r2
 800389a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a0a      	ldr	r2, [pc, #40]	; (80038ec <TIM_Base_SetConfig+0x114>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d003      	beq.n	80038d0 <TIM_Base_SetConfig+0xf8>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a0c      	ldr	r2, [pc, #48]	; (80038fc <TIM_Base_SetConfig+0x124>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d103      	bne.n	80038d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	615a      	str	r2, [r3, #20]
}
 80038de:	bf00      	nop
 80038e0:	3714      	adds	r7, #20
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	40010000 	.word	0x40010000
 80038f0:	40000400 	.word	0x40000400
 80038f4:	40000800 	.word	0x40000800
 80038f8:	40000c00 	.word	0x40000c00
 80038fc:	40010400 	.word	0x40010400
 8003900:	40014000 	.word	0x40014000
 8003904:	40014400 	.word	0x40014400
 8003908:	40014800 	.word	0x40014800
 800390c:	40001800 	.word	0x40001800
 8003910:	40001c00 	.word	0x40001c00
 8003914:	40002000 	.word	0x40002000

08003918 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003918:	b480      	push	{r7}
 800391a:	b087      	sub	sp, #28
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	f023 0201 	bic.w	r2, r3, #1
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	4b2b      	ldr	r3, [pc, #172]	; (80039f0 <TIM_OC1_SetConfig+0xd8>)
 8003944:	4013      	ands	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f023 0303 	bic.w	r3, r3, #3
 800394e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	4313      	orrs	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f023 0302 	bic.w	r3, r3, #2
 8003960:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	4313      	orrs	r3, r2
 800396a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a21      	ldr	r2, [pc, #132]	; (80039f4 <TIM_OC1_SetConfig+0xdc>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d003      	beq.n	800397c <TIM_OC1_SetConfig+0x64>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a20      	ldr	r2, [pc, #128]	; (80039f8 <TIM_OC1_SetConfig+0xe0>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d10c      	bne.n	8003996 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	f023 0308 	bic.w	r3, r3, #8
 8003982:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	4313      	orrs	r3, r2
 800398c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f023 0304 	bic.w	r3, r3, #4
 8003994:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a16      	ldr	r2, [pc, #88]	; (80039f4 <TIM_OC1_SetConfig+0xdc>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d003      	beq.n	80039a6 <TIM_OC1_SetConfig+0x8e>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a15      	ldr	r2, [pc, #84]	; (80039f8 <TIM_OC1_SetConfig+0xe0>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d111      	bne.n	80039ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	4313      	orrs	r3, r2
 80039be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	621a      	str	r2, [r3, #32]
}
 80039e4:	bf00      	nop
 80039e6:	371c      	adds	r7, #28
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	fffeff8f 	.word	0xfffeff8f
 80039f4:	40010000 	.word	0x40010000
 80039f8:	40010400 	.word	0x40010400

080039fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b087      	sub	sp, #28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	f023 0210 	bic.w	r2, r3, #16
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	4b2e      	ldr	r3, [pc, #184]	; (8003ae0 <TIM_OC2_SetConfig+0xe4>)
 8003a28:	4013      	ands	r3, r2
 8003a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	021b      	lsls	r3, r3, #8
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	f023 0320 	bic.w	r3, r3, #32
 8003a46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	011b      	lsls	r3, r3, #4
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a23      	ldr	r2, [pc, #140]	; (8003ae4 <TIM_OC2_SetConfig+0xe8>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d003      	beq.n	8003a64 <TIM_OC2_SetConfig+0x68>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a22      	ldr	r2, [pc, #136]	; (8003ae8 <TIM_OC2_SetConfig+0xec>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d10d      	bne.n	8003a80 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	011b      	lsls	r3, r3, #4
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a18      	ldr	r2, [pc, #96]	; (8003ae4 <TIM_OC2_SetConfig+0xe8>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d003      	beq.n	8003a90 <TIM_OC2_SetConfig+0x94>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a17      	ldr	r2, [pc, #92]	; (8003ae8 <TIM_OC2_SetConfig+0xec>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d113      	bne.n	8003ab8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	621a      	str	r2, [r3, #32]
}
 8003ad2:	bf00      	nop
 8003ad4:	371c      	adds	r7, #28
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	feff8fff 	.word	0xfeff8fff
 8003ae4:	40010000 	.word	0x40010000
 8003ae8:	40010400 	.word	0x40010400

08003aec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b087      	sub	sp, #28
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	4b2d      	ldr	r3, [pc, #180]	; (8003bcc <TIM_OC3_SetConfig+0xe0>)
 8003b18:	4013      	ands	r3, r2
 8003b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 0303 	bic.w	r3, r3, #3
 8003b22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	021b      	lsls	r3, r3, #8
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a22      	ldr	r2, [pc, #136]	; (8003bd0 <TIM_OC3_SetConfig+0xe4>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d003      	beq.n	8003b52 <TIM_OC3_SetConfig+0x66>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a21      	ldr	r2, [pc, #132]	; (8003bd4 <TIM_OC3_SetConfig+0xe8>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d10d      	bne.n	8003b6e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	021b      	lsls	r3, r3, #8
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a17      	ldr	r2, [pc, #92]	; (8003bd0 <TIM_OC3_SetConfig+0xe4>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d003      	beq.n	8003b7e <TIM_OC3_SetConfig+0x92>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a16      	ldr	r2, [pc, #88]	; (8003bd4 <TIM_OC3_SetConfig+0xe8>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d113      	bne.n	8003ba6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	011b      	lsls	r3, r3, #4
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	621a      	str	r2, [r3, #32]
}
 8003bc0:	bf00      	nop
 8003bc2:	371c      	adds	r7, #28
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	fffeff8f 	.word	0xfffeff8f
 8003bd0:	40010000 	.word	0x40010000
 8003bd4:	40010400 	.word	0x40010400

08003bd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b087      	sub	sp, #28
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	4b1e      	ldr	r3, [pc, #120]	; (8003c7c <TIM_OC4_SetConfig+0xa4>)
 8003c04:	4013      	ands	r3, r2
 8003c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	021b      	lsls	r3, r3, #8
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	031b      	lsls	r3, r3, #12
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a13      	ldr	r2, [pc, #76]	; (8003c80 <TIM_OC4_SetConfig+0xa8>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d003      	beq.n	8003c40 <TIM_OC4_SetConfig+0x68>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a12      	ldr	r2, [pc, #72]	; (8003c84 <TIM_OC4_SetConfig+0xac>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d109      	bne.n	8003c54 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	019b      	lsls	r3, r3, #6
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	621a      	str	r2, [r3, #32]
}
 8003c6e:	bf00      	nop
 8003c70:	371c      	adds	r7, #28
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	feff8fff 	.word	0xfeff8fff
 8003c80:	40010000 	.word	0x40010000
 8003c84:	40010400 	.word	0x40010400

08003c88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b087      	sub	sp, #28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	4b1b      	ldr	r3, [pc, #108]	; (8003d20 <TIM_OC5_SetConfig+0x98>)
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003cc8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	041b      	lsls	r3, r3, #16
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a12      	ldr	r2, [pc, #72]	; (8003d24 <TIM_OC5_SetConfig+0x9c>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d003      	beq.n	8003ce6 <TIM_OC5_SetConfig+0x5e>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a11      	ldr	r2, [pc, #68]	; (8003d28 <TIM_OC5_SetConfig+0xa0>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d109      	bne.n	8003cfa <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	021b      	lsls	r3, r3, #8
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	621a      	str	r2, [r3, #32]
}
 8003d14:	bf00      	nop
 8003d16:	371c      	adds	r7, #28
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	fffeff8f 	.word	0xfffeff8f
 8003d24:	40010000 	.word	0x40010000
 8003d28:	40010400 	.word	0x40010400

08003d2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b087      	sub	sp, #28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	4b1c      	ldr	r3, [pc, #112]	; (8003dc8 <TIM_OC6_SetConfig+0x9c>)
 8003d58:	4013      	ands	r3, r2
 8003d5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	021b      	lsls	r3, r3, #8
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	051b      	lsls	r3, r3, #20
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a13      	ldr	r2, [pc, #76]	; (8003dcc <TIM_OC6_SetConfig+0xa0>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d003      	beq.n	8003d8c <TIM_OC6_SetConfig+0x60>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a12      	ldr	r2, [pc, #72]	; (8003dd0 <TIM_OC6_SetConfig+0xa4>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d109      	bne.n	8003da0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	029b      	lsls	r3, r3, #10
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	621a      	str	r2, [r3, #32]
}
 8003dba:	bf00      	nop
 8003dbc:	371c      	adds	r7, #28
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	feff8fff 	.word	0xfeff8fff
 8003dcc:	40010000 	.word	0x40010000
 8003dd0:	40010400 	.word	0x40010400

08003dd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b087      	sub	sp, #28
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	f023 0201 	bic.w	r2, r3, #1
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	011b      	lsls	r3, r3, #4
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f023 030a 	bic.w	r3, r3, #10
 8003e10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	621a      	str	r2, [r3, #32]
}
 8003e26:	bf00      	nop
 8003e28:	371c      	adds	r7, #28
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b087      	sub	sp, #28
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	60f8      	str	r0, [r7, #12]
 8003e3a:	60b9      	str	r1, [r7, #8]
 8003e3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	f023 0210 	bic.w	r2, r3, #16
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	031b      	lsls	r3, r3, #12
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	011b      	lsls	r3, r3, #4
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	621a      	str	r2, [r3, #32]
}
 8003e86:	bf00      	nop
 8003e88:	371c      	adds	r7, #28
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b085      	sub	sp, #20
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
 8003e9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f043 0307 	orr.w	r3, r3, #7
 8003eb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	609a      	str	r2, [r3, #8]
}
 8003ebc:	bf00      	nop
 8003ebe:	3714      	adds	r7, #20
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
 8003ed4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ee2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	021a      	lsls	r2, r3, #8
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	431a      	orrs	r2, r3
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	609a      	str	r2, [r3, #8]
}
 8003efc:	bf00      	nop
 8003efe:	371c      	adds	r7, #28
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b087      	sub	sp, #28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	f003 031f 	and.w	r3, r3, #31
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6a1a      	ldr	r2, [r3, #32]
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	401a      	ands	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6a1a      	ldr	r2, [r3, #32]
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	f003 031f 	and.w	r3, r3, #31
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f40:	431a      	orrs	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	621a      	str	r2, [r3, #32]
}
 8003f46:	bf00      	nop
 8003f48:	371c      	adds	r7, #28
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
	...

08003f54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d101      	bne.n	8003f6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f68:	2302      	movs	r3, #2
 8003f6a:	e06d      	b.n	8004048 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2202      	movs	r2, #2
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a30      	ldr	r2, [pc, #192]	; (8004054 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d004      	beq.n	8003fa0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a2f      	ldr	r2, [pc, #188]	; (8004058 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d108      	bne.n	8003fb2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003fa6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a20      	ldr	r2, [pc, #128]	; (8004054 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d022      	beq.n	800401c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fde:	d01d      	beq.n	800401c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a1d      	ldr	r2, [pc, #116]	; (800405c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d018      	beq.n	800401c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a1c      	ldr	r2, [pc, #112]	; (8004060 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d013      	beq.n	800401c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a1a      	ldr	r2, [pc, #104]	; (8004064 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d00e      	beq.n	800401c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a15      	ldr	r2, [pc, #84]	; (8004058 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d009      	beq.n	800401c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a16      	ldr	r2, [pc, #88]	; (8004068 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d004      	beq.n	800401c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a15      	ldr	r2, [pc, #84]	; (800406c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d10c      	bne.n	8004036 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004022:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	4313      	orrs	r3, r2
 800402c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr
 8004054:	40010000 	.word	0x40010000
 8004058:	40010400 	.word	0x40010400
 800405c:	40000400 	.word	0x40000400
 8004060:	40000800 	.word	0x40000800
 8004064:	40000c00 	.word	0x40000c00
 8004068:	40014000 	.word	0x40014000
 800406c:	40001800 	.word	0x40001800

08004070 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e040      	b.n	8004140 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d106      	bne.n	80040d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7fd f830 	bl	8001134 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2224      	movs	r2, #36	; 0x24
 80040d8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0201 	bic.w	r2, r2, #1
 80040e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 fd1e 	bl	8004b2c <UART_SetConfig>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d101      	bne.n	80040fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e022      	b.n	8004140 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d002      	beq.n	8004108 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 ff76 	bl	8004ff4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685a      	ldr	r2, [r3, #4]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004116:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689a      	ldr	r2, [r3, #8]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004126:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f042 0201 	orr.w	r2, r2, #1
 8004136:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 fffd 	bl	8005138 <UART_CheckIdleState>
 800413e:	4603      	mov	r3, r0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3708      	adds	r7, #8
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b08a      	sub	sp, #40	; 0x28
 800414c:	af02      	add	r7, sp, #8
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	603b      	str	r3, [r7, #0]
 8004154:	4613      	mov	r3, r2
 8004156:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800415c:	2b20      	cmp	r3, #32
 800415e:	d171      	bne.n	8004244 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d002      	beq.n	800416c <HAL_UART_Transmit+0x24>
 8004166:	88fb      	ldrh	r3, [r7, #6]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d101      	bne.n	8004170 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e06a      	b.n	8004246 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2221      	movs	r2, #33	; 0x21
 800417c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800417e:	f7fd f927 	bl	80013d0 <HAL_GetTick>
 8004182:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	88fa      	ldrh	r2, [r7, #6]
 8004188:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	88fa      	ldrh	r2, [r7, #6]
 8004190:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800419c:	d108      	bne.n	80041b0 <HAL_UART_Transmit+0x68>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d104      	bne.n	80041b0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80041a6:	2300      	movs	r3, #0
 80041a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	61bb      	str	r3, [r7, #24]
 80041ae:	e003      	b.n	80041b8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041b4:	2300      	movs	r3, #0
 80041b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80041b8:	e02c      	b.n	8004214 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	2200      	movs	r2, #0
 80041c2:	2180      	movs	r1, #128	; 0x80
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f001 f804 	bl	80051d2 <UART_WaitOnFlagUntilTimeout>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e038      	b.n	8004246 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10b      	bne.n	80041f2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	881b      	ldrh	r3, [r3, #0]
 80041de:	461a      	mov	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	3302      	adds	r3, #2
 80041ee:	61bb      	str	r3, [r7, #24]
 80041f0:	e007      	b.n	8004202 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	781a      	ldrb	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	3301      	adds	r3, #1
 8004200:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004208:	b29b      	uxth	r3, r3
 800420a:	3b01      	subs	r3, #1
 800420c:	b29a      	uxth	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800421a:	b29b      	uxth	r3, r3
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1cc      	bne.n	80041ba <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	2200      	movs	r2, #0
 8004228:	2140      	movs	r1, #64	; 0x40
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 ffd1 	bl	80051d2 <UART_WaitOnFlagUntilTimeout>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e005      	b.n	8004246 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2220      	movs	r2, #32
 800423e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004240:	2300      	movs	r3, #0
 8004242:	e000      	b.n	8004246 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004244:	2302      	movs	r3, #2
  }
}
 8004246:	4618      	mov	r0, r3
 8004248:	3720      	adds	r7, #32
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b08a      	sub	sp, #40	; 0x28
 8004252:	af02      	add	r7, sp, #8
 8004254:	60f8      	str	r0, [r7, #12]
 8004256:	60b9      	str	r1, [r7, #8]
 8004258:	603b      	str	r3, [r7, #0]
 800425a:	4613      	mov	r3, r2
 800425c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004264:	2b20      	cmp	r3, #32
 8004266:	f040 80b1 	bne.w	80043cc <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d002      	beq.n	8004276 <HAL_UART_Receive+0x28>
 8004270:	88fb      	ldrh	r3, [r7, #6]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e0a9      	b.n	80043ce <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2222      	movs	r2, #34	; 0x22
 8004286:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004290:	f7fd f89e 	bl	80013d0 <HAL_GetTick>
 8004294:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	88fa      	ldrh	r2, [r7, #6]
 800429a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	88fa      	ldrh	r2, [r7, #6]
 80042a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ae:	d10e      	bne.n	80042ce <HAL_UART_Receive+0x80>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d105      	bne.n	80042c4 <HAL_UART_Receive+0x76>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f240 12ff 	movw	r2, #511	; 0x1ff
 80042be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042c2:	e02d      	b.n	8004320 <HAL_UART_Receive+0xd2>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	22ff      	movs	r2, #255	; 0xff
 80042c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042cc:	e028      	b.n	8004320 <HAL_UART_Receive+0xd2>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10d      	bne.n	80042f2 <HAL_UART_Receive+0xa4>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d104      	bne.n	80042e8 <HAL_UART_Receive+0x9a>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	22ff      	movs	r2, #255	; 0xff
 80042e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042e6:	e01b      	b.n	8004320 <HAL_UART_Receive+0xd2>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	227f      	movs	r2, #127	; 0x7f
 80042ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042f0:	e016      	b.n	8004320 <HAL_UART_Receive+0xd2>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042fa:	d10d      	bne.n	8004318 <HAL_UART_Receive+0xca>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d104      	bne.n	800430e <HAL_UART_Receive+0xc0>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	227f      	movs	r2, #127	; 0x7f
 8004308:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800430c:	e008      	b.n	8004320 <HAL_UART_Receive+0xd2>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	223f      	movs	r2, #63	; 0x3f
 8004312:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004316:	e003      	b.n	8004320 <HAL_UART_Receive+0xd2>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004326:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004330:	d108      	bne.n	8004344 <HAL_UART_Receive+0xf6>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d104      	bne.n	8004344 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800433a:	2300      	movs	r3, #0
 800433c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	61bb      	str	r3, [r7, #24]
 8004342:	e003      	b.n	800434c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004348:	2300      	movs	r3, #0
 800434a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800434c:	e032      	b.n	80043b4 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	2200      	movs	r2, #0
 8004356:	2120      	movs	r1, #32
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 ff3a 	bl	80051d2 <UART_WaitOnFlagUntilTimeout>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d001      	beq.n	8004368 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e032      	b.n	80043ce <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10c      	bne.n	8004388 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	b29a      	uxth	r2, r3
 8004376:	8a7b      	ldrh	r3, [r7, #18]
 8004378:	4013      	ands	r3, r2
 800437a:	b29a      	uxth	r2, r3
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	3302      	adds	r3, #2
 8004384:	61bb      	str	r3, [r7, #24]
 8004386:	e00c      	b.n	80043a2 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	b2da      	uxtb	r2, r3
 8004390:	8a7b      	ldrh	r3, [r7, #18]
 8004392:	b2db      	uxtb	r3, r3
 8004394:	4013      	ands	r3, r2
 8004396:	b2da      	uxtb	r2, r3
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	3301      	adds	r3, #1
 80043a0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	3b01      	subs	r3, #1
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1c6      	bne.n	800434e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2220      	movs	r2, #32
 80043c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80043c8:	2300      	movs	r3, #0
 80043ca:	e000      	b.n	80043ce <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80043cc:	2302      	movs	r3, #2
  }
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3720      	adds	r7, #32
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
	...

080043d8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80043d8:	b480      	push	{r7}
 80043da:	b08b      	sub	sp, #44	; 0x2c
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	4613      	mov	r3, r2
 80043e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043ea:	2b20      	cmp	r3, #32
 80043ec:	d147      	bne.n	800447e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d002      	beq.n	80043fa <HAL_UART_Transmit_IT+0x22>
 80043f4:	88fb      	ldrh	r3, [r7, #6]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e040      	b.n	8004480 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	88fa      	ldrh	r2, [r7, #6]
 8004408:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	88fa      	ldrh	r2, [r7, #6]
 8004410:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2221      	movs	r2, #33	; 0x21
 8004426:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004430:	d107      	bne.n	8004442 <HAL_UART_Transmit_IT+0x6a>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d103      	bne.n	8004442 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	4a13      	ldr	r2, [pc, #76]	; (800448c <HAL_UART_Transmit_IT+0xb4>)
 800443e:	66da      	str	r2, [r3, #108]	; 0x6c
 8004440:	e002      	b.n	8004448 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	4a12      	ldr	r2, [pc, #72]	; (8004490 <HAL_UART_Transmit_IT+0xb8>)
 8004446:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	e853 3f00 	ldrex	r3, [r3]
 8004454:	613b      	str	r3, [r7, #16]
   return(result);
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800445c:	627b      	str	r3, [r7, #36]	; 0x24
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	623b      	str	r3, [r7, #32]
 8004468:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446a:	69f9      	ldr	r1, [r7, #28]
 800446c:	6a3a      	ldr	r2, [r7, #32]
 800446e:	e841 2300 	strex	r3, r2, [r1]
 8004472:	61bb      	str	r3, [r7, #24]
   return(result);
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1e6      	bne.n	8004448 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800447a:	2300      	movs	r3, #0
 800447c:	e000      	b.n	8004480 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800447e:	2302      	movs	r3, #2
  }
}
 8004480:	4618      	mov	r0, r3
 8004482:	372c      	adds	r7, #44	; 0x2c
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	08005697 	.word	0x08005697
 8004490:	080055e1 	.word	0x080055e1

08004494 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b08a      	sub	sp, #40	; 0x28
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	4613      	mov	r3, r2
 80044a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044a8:	2b20      	cmp	r3, #32
 80044aa:	d132      	bne.n	8004512 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <HAL_UART_Receive_IT+0x24>
 80044b2:	88fb      	ldrh	r3, [r7, #6]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d101      	bne.n	80044bc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e02b      	b.n	8004514 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d018      	beq.n	8004502 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	e853 3f00 	ldrex	r3, [r3]
 80044dc:	613b      	str	r3, [r7, #16]
   return(result);
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044e4:	627b      	str	r3, [r7, #36]	; 0x24
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	461a      	mov	r2, r3
 80044ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ee:	623b      	str	r3, [r7, #32]
 80044f0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f2:	69f9      	ldr	r1, [r7, #28]
 80044f4:	6a3a      	ldr	r2, [r7, #32]
 80044f6:	e841 2300 	strex	r3, r2, [r1]
 80044fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1e6      	bne.n	80044d0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004502:	88fb      	ldrh	r3, [r7, #6]
 8004504:	461a      	mov	r2, r3
 8004506:	68b9      	ldr	r1, [r7, #8]
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f000 ff29 	bl	8005360 <UART_Start_Receive_IT>
 800450e:	4603      	mov	r3, r0
 8004510:	e000      	b.n	8004514 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004512:	2302      	movs	r3, #2
  }
}
 8004514:	4618      	mov	r0, r3
 8004516:	3728      	adds	r7, #40	; 0x28
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b0ba      	sub	sp, #232	; 0xe8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004542:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004546:	f640 030f 	movw	r3, #2063	; 0x80f
 800454a:	4013      	ands	r3, r2
 800454c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004550:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004554:	2b00      	cmp	r3, #0
 8004556:	d115      	bne.n	8004584 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800455c:	f003 0320 	and.w	r3, r3, #32
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00f      	beq.n	8004584 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004568:	f003 0320 	and.w	r3, r3, #32
 800456c:	2b00      	cmp	r3, #0
 800456e:	d009      	beq.n	8004584 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 82ac 	beq.w	8004ad2 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	4798      	blx	r3
      }
      return;
 8004582:	e2a6      	b.n	8004ad2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004584:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 8117 	beq.w	80047bc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800458e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	d106      	bne.n	80045a8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800459a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800459e:	4b85      	ldr	r3, [pc, #532]	; (80047b4 <HAL_UART_IRQHandler+0x298>)
 80045a0:	4013      	ands	r3, r2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f000 810a 	beq.w	80047bc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80045a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d011      	beq.n	80045d8 <HAL_UART_IRQHandler+0xbc>
 80045b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00b      	beq.n	80045d8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2201      	movs	r2, #1
 80045c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045ce:	f043 0201 	orr.w	r2, r3, #1
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d011      	beq.n	8004608 <HAL_UART_IRQHandler+0xec>
 80045e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00b      	beq.n	8004608 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2202      	movs	r2, #2
 80045f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045fe:	f043 0204 	orr.w	r2, r3, #4
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b00      	cmp	r3, #0
 8004612:	d011      	beq.n	8004638 <HAL_UART_IRQHandler+0x11c>
 8004614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00b      	beq.n	8004638 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2204      	movs	r2, #4
 8004626:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800462e:	f043 0202 	orr.w	r2, r3, #2
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800463c:	f003 0308 	and.w	r3, r3, #8
 8004640:	2b00      	cmp	r3, #0
 8004642:	d017      	beq.n	8004674 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004648:	f003 0320 	and.w	r3, r3, #32
 800464c:	2b00      	cmp	r3, #0
 800464e:	d105      	bne.n	800465c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004650:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004654:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00b      	beq.n	8004674 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2208      	movs	r2, #8
 8004662:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800466a:	f043 0208 	orr.w	r2, r3, #8
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004678:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800467c:	2b00      	cmp	r3, #0
 800467e:	d012      	beq.n	80046a6 <HAL_UART_IRQHandler+0x18a>
 8004680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004684:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00c      	beq.n	80046a6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004694:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800469c:	f043 0220 	orr.w	r2, r3, #32
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 8212 	beq.w	8004ad6 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80046b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046b6:	f003 0320 	and.w	r3, r3, #32
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00d      	beq.n	80046da <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80046be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046c2:	f003 0320 	and.w	r3, r3, #32
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d007      	beq.n	80046da <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ee:	2b40      	cmp	r3, #64	; 0x40
 80046f0:	d005      	beq.n	80046fe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80046f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d04f      	beq.n	800479e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 fef4 	bl	80054ec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800470e:	2b40      	cmp	r3, #64	; 0x40
 8004710:	d141      	bne.n	8004796 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	3308      	adds	r3, #8
 8004718:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004720:	e853 3f00 	ldrex	r3, [r3]
 8004724:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004728:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800472c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004730:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	3308      	adds	r3, #8
 800473a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800473e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004742:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004746:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800474a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800474e:	e841 2300 	strex	r3, r2, [r1]
 8004752:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004756:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1d9      	bne.n	8004712 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004762:	2b00      	cmp	r3, #0
 8004764:	d013      	beq.n	800478e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800476a:	4a13      	ldr	r2, [pc, #76]	; (80047b8 <HAL_UART_IRQHandler+0x29c>)
 800476c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004772:	4618      	mov	r0, r3
 8004774:	f7fc ffb9 	bl	80016ea <HAL_DMA_Abort_IT>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d017      	beq.n	80047ae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004788:	4610      	mov	r0, r2
 800478a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800478c:	e00f      	b.n	80047ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f9ac 	bl	8004aec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004794:	e00b      	b.n	80047ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f9a8 	bl	8004aec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800479c:	e007      	b.n	80047ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f9a4 	bl	8004aec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80047ac:	e193      	b.n	8004ad6 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ae:	bf00      	nop
    return;
 80047b0:	e191      	b.n	8004ad6 <HAL_UART_IRQHandler+0x5ba>
 80047b2:	bf00      	nop
 80047b4:	04000120 	.word	0x04000120
 80047b8:	080055b5 	.word	0x080055b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	f040 814c 	bne.w	8004a5e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80047c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ca:	f003 0310 	and.w	r3, r3, #16
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f000 8145 	beq.w	8004a5e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80047d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047d8:	f003 0310 	and.w	r3, r3, #16
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 813e 	beq.w	8004a5e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2210      	movs	r2, #16
 80047e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f4:	2b40      	cmp	r3, #64	; 0x40
 80047f6:	f040 80b6 	bne.w	8004966 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004806:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 8165 	beq.w	8004ada <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004816:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800481a:	429a      	cmp	r2, r3
 800481c:	f080 815d 	bcs.w	8004ada <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004826:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800482e:	69db      	ldr	r3, [r3, #28]
 8004830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004834:	f000 8086 	beq.w	8004944 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004840:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004844:	e853 3f00 	ldrex	r3, [r3]
 8004848:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800484c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004854:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	461a      	mov	r2, r3
 800485e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004862:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004866:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800486e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004872:	e841 2300 	strex	r3, r2, [r1]
 8004876:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800487a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1da      	bne.n	8004838 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	3308      	adds	r3, #8
 8004888:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800488c:	e853 3f00 	ldrex	r3, [r3]
 8004890:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004892:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004894:	f023 0301 	bic.w	r3, r3, #1
 8004898:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	3308      	adds	r3, #8
 80048a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80048a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80048aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80048ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80048b2:	e841 2300 	strex	r3, r2, [r1]
 80048b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80048b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1e1      	bne.n	8004882 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	3308      	adds	r3, #8
 80048c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048c8:	e853 3f00 	ldrex	r3, [r3]
 80048cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80048ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	3308      	adds	r3, #8
 80048de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80048e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80048e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80048e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80048ea:	e841 2300 	strex	r3, r2, [r1]
 80048ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80048f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1e3      	bne.n	80048be <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2220      	movs	r2, #32
 80048fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800490c:	e853 3f00 	ldrex	r3, [r3]
 8004910:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004914:	f023 0310 	bic.w	r3, r3, #16
 8004918:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	461a      	mov	r2, r3
 8004922:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004926:	65bb      	str	r3, [r7, #88]	; 0x58
 8004928:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800492c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800492e:	e841 2300 	strex	r3, r2, [r1]
 8004932:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1e4      	bne.n	8004904 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800493e:	4618      	mov	r0, r3
 8004940:	f7fc fe63 	bl	800160a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2202      	movs	r2, #2
 8004948:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004956:	b29b      	uxth	r3, r3
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	b29b      	uxth	r3, r3
 800495c:	4619      	mov	r1, r3
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f8ce 	bl	8004b00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004964:	e0b9      	b.n	8004ada <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004972:	b29b      	uxth	r3, r3
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004980:	b29b      	uxth	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	f000 80ab 	beq.w	8004ade <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8004988:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 80a6 	beq.w	8004ade <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499a:	e853 3f00 	ldrex	r3, [r3]
 800499e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	461a      	mov	r2, r3
 80049b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049b4:	647b      	str	r3, [r7, #68]	; 0x44
 80049b6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049bc:	e841 2300 	strex	r3, r2, [r1]
 80049c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1e4      	bne.n	8004992 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	3308      	adds	r3, #8
 80049ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	e853 3f00 	ldrex	r3, [r3]
 80049d6:	623b      	str	r3, [r7, #32]
   return(result);
 80049d8:	6a3b      	ldr	r3, [r7, #32]
 80049da:	f023 0301 	bic.w	r3, r3, #1
 80049de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	3308      	adds	r3, #8
 80049e8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80049ec:	633a      	str	r2, [r7, #48]	; 0x30
 80049ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049f4:	e841 2300 	strex	r3, r2, [r1]
 80049f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1e3      	bne.n	80049c8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2220      	movs	r2, #32
 8004a04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	e853 3f00 	ldrex	r3, [r3]
 8004a20:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f023 0310 	bic.w	r3, r3, #16
 8004a28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	461a      	mov	r2, r3
 8004a32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a36:	61fb      	str	r3, [r7, #28]
 8004a38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3a:	69b9      	ldr	r1, [r7, #24]
 8004a3c:	69fa      	ldr	r2, [r7, #28]
 8004a3e:	e841 2300 	strex	r3, r2, [r1]
 8004a42:	617b      	str	r3, [r7, #20]
   return(result);
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1e4      	bne.n	8004a14 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2202      	movs	r2, #2
 8004a4e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a54:	4619      	mov	r1, r3
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f852 	bl	8004b00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a5c:	e03f      	b.n	8004ade <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00e      	beq.n	8004a88 <HAL_UART_IRQHandler+0x56c>
 8004a6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d008      	beq.n	8004a88 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a7e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f849 	bl	8004b18 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a86:	e02d      	b.n	8004ae4 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00e      	beq.n	8004ab2 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d008      	beq.n	8004ab2 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d01c      	beq.n	8004ae2 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	4798      	blx	r3
    }
    return;
 8004ab0:	e017      	b.n	8004ae2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d012      	beq.n	8004ae4 <HAL_UART_IRQHandler+0x5c8>
 8004abe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00c      	beq.n	8004ae4 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 fe43 	bl	8005756 <UART_EndTransmit_IT>
    return;
 8004ad0:	e008      	b.n	8004ae4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004ad2:	bf00      	nop
 8004ad4:	e006      	b.n	8004ae4 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004ad6:	bf00      	nop
 8004ad8:	e004      	b.n	8004ae4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004ada:	bf00      	nop
 8004adc:	e002      	b.n	8004ae4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004ade:	bf00      	nop
 8004ae0:	e000      	b.n	8004ae4 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004ae2:	bf00      	nop
  }

}
 8004ae4:	37e8      	adds	r7, #232	; 0xe8
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop

08004aec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	460b      	mov	r3, r1
 8004b0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b088      	sub	sp, #32
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b34:	2300      	movs	r3, #0
 8004b36:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689a      	ldr	r2, [r3, #8]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	431a      	orrs	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	431a      	orrs	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	69db      	ldr	r3, [r3, #28]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	4ba6      	ldr	r3, [pc, #664]	; (8004df0 <UART_SetConfig+0x2c4>)
 8004b58:	4013      	ands	r3, r2
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	6812      	ldr	r2, [r2, #0]
 8004b5e:	6979      	ldr	r1, [r7, #20]
 8004b60:	430b      	orrs	r3, r1
 8004b62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68da      	ldr	r2, [r3, #12]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	430a      	orrs	r2, r1
 8004b78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a94      	ldr	r2, [pc, #592]	; (8004df4 <UART_SetConfig+0x2c8>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d120      	bne.n	8004bea <UART_SetConfig+0xbe>
 8004ba8:	4b93      	ldr	r3, [pc, #588]	; (8004df8 <UART_SetConfig+0x2cc>)
 8004baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bae:	f003 0303 	and.w	r3, r3, #3
 8004bb2:	2b03      	cmp	r3, #3
 8004bb4:	d816      	bhi.n	8004be4 <UART_SetConfig+0xb8>
 8004bb6:	a201      	add	r2, pc, #4	; (adr r2, 8004bbc <UART_SetConfig+0x90>)
 8004bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bbc:	08004bcd 	.word	0x08004bcd
 8004bc0:	08004bd9 	.word	0x08004bd9
 8004bc4:	08004bd3 	.word	0x08004bd3
 8004bc8:	08004bdf 	.word	0x08004bdf
 8004bcc:	2301      	movs	r3, #1
 8004bce:	77fb      	strb	r3, [r7, #31]
 8004bd0:	e150      	b.n	8004e74 <UART_SetConfig+0x348>
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	77fb      	strb	r3, [r7, #31]
 8004bd6:	e14d      	b.n	8004e74 <UART_SetConfig+0x348>
 8004bd8:	2304      	movs	r3, #4
 8004bda:	77fb      	strb	r3, [r7, #31]
 8004bdc:	e14a      	b.n	8004e74 <UART_SetConfig+0x348>
 8004bde:	2308      	movs	r3, #8
 8004be0:	77fb      	strb	r3, [r7, #31]
 8004be2:	e147      	b.n	8004e74 <UART_SetConfig+0x348>
 8004be4:	2310      	movs	r3, #16
 8004be6:	77fb      	strb	r3, [r7, #31]
 8004be8:	e144      	b.n	8004e74 <UART_SetConfig+0x348>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a83      	ldr	r2, [pc, #524]	; (8004dfc <UART_SetConfig+0x2d0>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d132      	bne.n	8004c5a <UART_SetConfig+0x12e>
 8004bf4:	4b80      	ldr	r3, [pc, #512]	; (8004df8 <UART_SetConfig+0x2cc>)
 8004bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bfa:	f003 030c 	and.w	r3, r3, #12
 8004bfe:	2b0c      	cmp	r3, #12
 8004c00:	d828      	bhi.n	8004c54 <UART_SetConfig+0x128>
 8004c02:	a201      	add	r2, pc, #4	; (adr r2, 8004c08 <UART_SetConfig+0xdc>)
 8004c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c08:	08004c3d 	.word	0x08004c3d
 8004c0c:	08004c55 	.word	0x08004c55
 8004c10:	08004c55 	.word	0x08004c55
 8004c14:	08004c55 	.word	0x08004c55
 8004c18:	08004c49 	.word	0x08004c49
 8004c1c:	08004c55 	.word	0x08004c55
 8004c20:	08004c55 	.word	0x08004c55
 8004c24:	08004c55 	.word	0x08004c55
 8004c28:	08004c43 	.word	0x08004c43
 8004c2c:	08004c55 	.word	0x08004c55
 8004c30:	08004c55 	.word	0x08004c55
 8004c34:	08004c55 	.word	0x08004c55
 8004c38:	08004c4f 	.word	0x08004c4f
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	77fb      	strb	r3, [r7, #31]
 8004c40:	e118      	b.n	8004e74 <UART_SetConfig+0x348>
 8004c42:	2302      	movs	r3, #2
 8004c44:	77fb      	strb	r3, [r7, #31]
 8004c46:	e115      	b.n	8004e74 <UART_SetConfig+0x348>
 8004c48:	2304      	movs	r3, #4
 8004c4a:	77fb      	strb	r3, [r7, #31]
 8004c4c:	e112      	b.n	8004e74 <UART_SetConfig+0x348>
 8004c4e:	2308      	movs	r3, #8
 8004c50:	77fb      	strb	r3, [r7, #31]
 8004c52:	e10f      	b.n	8004e74 <UART_SetConfig+0x348>
 8004c54:	2310      	movs	r3, #16
 8004c56:	77fb      	strb	r3, [r7, #31]
 8004c58:	e10c      	b.n	8004e74 <UART_SetConfig+0x348>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a68      	ldr	r2, [pc, #416]	; (8004e00 <UART_SetConfig+0x2d4>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d120      	bne.n	8004ca6 <UART_SetConfig+0x17a>
 8004c64:	4b64      	ldr	r3, [pc, #400]	; (8004df8 <UART_SetConfig+0x2cc>)
 8004c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c6a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c6e:	2b30      	cmp	r3, #48	; 0x30
 8004c70:	d013      	beq.n	8004c9a <UART_SetConfig+0x16e>
 8004c72:	2b30      	cmp	r3, #48	; 0x30
 8004c74:	d814      	bhi.n	8004ca0 <UART_SetConfig+0x174>
 8004c76:	2b20      	cmp	r3, #32
 8004c78:	d009      	beq.n	8004c8e <UART_SetConfig+0x162>
 8004c7a:	2b20      	cmp	r3, #32
 8004c7c:	d810      	bhi.n	8004ca0 <UART_SetConfig+0x174>
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d002      	beq.n	8004c88 <UART_SetConfig+0x15c>
 8004c82:	2b10      	cmp	r3, #16
 8004c84:	d006      	beq.n	8004c94 <UART_SetConfig+0x168>
 8004c86:	e00b      	b.n	8004ca0 <UART_SetConfig+0x174>
 8004c88:	2300      	movs	r3, #0
 8004c8a:	77fb      	strb	r3, [r7, #31]
 8004c8c:	e0f2      	b.n	8004e74 <UART_SetConfig+0x348>
 8004c8e:	2302      	movs	r3, #2
 8004c90:	77fb      	strb	r3, [r7, #31]
 8004c92:	e0ef      	b.n	8004e74 <UART_SetConfig+0x348>
 8004c94:	2304      	movs	r3, #4
 8004c96:	77fb      	strb	r3, [r7, #31]
 8004c98:	e0ec      	b.n	8004e74 <UART_SetConfig+0x348>
 8004c9a:	2308      	movs	r3, #8
 8004c9c:	77fb      	strb	r3, [r7, #31]
 8004c9e:	e0e9      	b.n	8004e74 <UART_SetConfig+0x348>
 8004ca0:	2310      	movs	r3, #16
 8004ca2:	77fb      	strb	r3, [r7, #31]
 8004ca4:	e0e6      	b.n	8004e74 <UART_SetConfig+0x348>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a56      	ldr	r2, [pc, #344]	; (8004e04 <UART_SetConfig+0x2d8>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d120      	bne.n	8004cf2 <UART_SetConfig+0x1c6>
 8004cb0:	4b51      	ldr	r3, [pc, #324]	; (8004df8 <UART_SetConfig+0x2cc>)
 8004cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004cba:	2bc0      	cmp	r3, #192	; 0xc0
 8004cbc:	d013      	beq.n	8004ce6 <UART_SetConfig+0x1ba>
 8004cbe:	2bc0      	cmp	r3, #192	; 0xc0
 8004cc0:	d814      	bhi.n	8004cec <UART_SetConfig+0x1c0>
 8004cc2:	2b80      	cmp	r3, #128	; 0x80
 8004cc4:	d009      	beq.n	8004cda <UART_SetConfig+0x1ae>
 8004cc6:	2b80      	cmp	r3, #128	; 0x80
 8004cc8:	d810      	bhi.n	8004cec <UART_SetConfig+0x1c0>
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d002      	beq.n	8004cd4 <UART_SetConfig+0x1a8>
 8004cce:	2b40      	cmp	r3, #64	; 0x40
 8004cd0:	d006      	beq.n	8004ce0 <UART_SetConfig+0x1b4>
 8004cd2:	e00b      	b.n	8004cec <UART_SetConfig+0x1c0>
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	77fb      	strb	r3, [r7, #31]
 8004cd8:	e0cc      	b.n	8004e74 <UART_SetConfig+0x348>
 8004cda:	2302      	movs	r3, #2
 8004cdc:	77fb      	strb	r3, [r7, #31]
 8004cde:	e0c9      	b.n	8004e74 <UART_SetConfig+0x348>
 8004ce0:	2304      	movs	r3, #4
 8004ce2:	77fb      	strb	r3, [r7, #31]
 8004ce4:	e0c6      	b.n	8004e74 <UART_SetConfig+0x348>
 8004ce6:	2308      	movs	r3, #8
 8004ce8:	77fb      	strb	r3, [r7, #31]
 8004cea:	e0c3      	b.n	8004e74 <UART_SetConfig+0x348>
 8004cec:	2310      	movs	r3, #16
 8004cee:	77fb      	strb	r3, [r7, #31]
 8004cf0:	e0c0      	b.n	8004e74 <UART_SetConfig+0x348>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a44      	ldr	r2, [pc, #272]	; (8004e08 <UART_SetConfig+0x2dc>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d125      	bne.n	8004d48 <UART_SetConfig+0x21c>
 8004cfc:	4b3e      	ldr	r3, [pc, #248]	; (8004df8 <UART_SetConfig+0x2cc>)
 8004cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d0a:	d017      	beq.n	8004d3c <UART_SetConfig+0x210>
 8004d0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d10:	d817      	bhi.n	8004d42 <UART_SetConfig+0x216>
 8004d12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d16:	d00b      	beq.n	8004d30 <UART_SetConfig+0x204>
 8004d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d1c:	d811      	bhi.n	8004d42 <UART_SetConfig+0x216>
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d003      	beq.n	8004d2a <UART_SetConfig+0x1fe>
 8004d22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d26:	d006      	beq.n	8004d36 <UART_SetConfig+0x20a>
 8004d28:	e00b      	b.n	8004d42 <UART_SetConfig+0x216>
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	77fb      	strb	r3, [r7, #31]
 8004d2e:	e0a1      	b.n	8004e74 <UART_SetConfig+0x348>
 8004d30:	2302      	movs	r3, #2
 8004d32:	77fb      	strb	r3, [r7, #31]
 8004d34:	e09e      	b.n	8004e74 <UART_SetConfig+0x348>
 8004d36:	2304      	movs	r3, #4
 8004d38:	77fb      	strb	r3, [r7, #31]
 8004d3a:	e09b      	b.n	8004e74 <UART_SetConfig+0x348>
 8004d3c:	2308      	movs	r3, #8
 8004d3e:	77fb      	strb	r3, [r7, #31]
 8004d40:	e098      	b.n	8004e74 <UART_SetConfig+0x348>
 8004d42:	2310      	movs	r3, #16
 8004d44:	77fb      	strb	r3, [r7, #31]
 8004d46:	e095      	b.n	8004e74 <UART_SetConfig+0x348>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a2f      	ldr	r2, [pc, #188]	; (8004e0c <UART_SetConfig+0x2e0>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d125      	bne.n	8004d9e <UART_SetConfig+0x272>
 8004d52:	4b29      	ldr	r3, [pc, #164]	; (8004df8 <UART_SetConfig+0x2cc>)
 8004d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d60:	d017      	beq.n	8004d92 <UART_SetConfig+0x266>
 8004d62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d66:	d817      	bhi.n	8004d98 <UART_SetConfig+0x26c>
 8004d68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d6c:	d00b      	beq.n	8004d86 <UART_SetConfig+0x25a>
 8004d6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d72:	d811      	bhi.n	8004d98 <UART_SetConfig+0x26c>
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d003      	beq.n	8004d80 <UART_SetConfig+0x254>
 8004d78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d7c:	d006      	beq.n	8004d8c <UART_SetConfig+0x260>
 8004d7e:	e00b      	b.n	8004d98 <UART_SetConfig+0x26c>
 8004d80:	2301      	movs	r3, #1
 8004d82:	77fb      	strb	r3, [r7, #31]
 8004d84:	e076      	b.n	8004e74 <UART_SetConfig+0x348>
 8004d86:	2302      	movs	r3, #2
 8004d88:	77fb      	strb	r3, [r7, #31]
 8004d8a:	e073      	b.n	8004e74 <UART_SetConfig+0x348>
 8004d8c:	2304      	movs	r3, #4
 8004d8e:	77fb      	strb	r3, [r7, #31]
 8004d90:	e070      	b.n	8004e74 <UART_SetConfig+0x348>
 8004d92:	2308      	movs	r3, #8
 8004d94:	77fb      	strb	r3, [r7, #31]
 8004d96:	e06d      	b.n	8004e74 <UART_SetConfig+0x348>
 8004d98:	2310      	movs	r3, #16
 8004d9a:	77fb      	strb	r3, [r7, #31]
 8004d9c:	e06a      	b.n	8004e74 <UART_SetConfig+0x348>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a1b      	ldr	r2, [pc, #108]	; (8004e10 <UART_SetConfig+0x2e4>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d138      	bne.n	8004e1a <UART_SetConfig+0x2ee>
 8004da8:	4b13      	ldr	r3, [pc, #76]	; (8004df8 <UART_SetConfig+0x2cc>)
 8004daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004db2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004db6:	d017      	beq.n	8004de8 <UART_SetConfig+0x2bc>
 8004db8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004dbc:	d82a      	bhi.n	8004e14 <UART_SetConfig+0x2e8>
 8004dbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dc2:	d00b      	beq.n	8004ddc <UART_SetConfig+0x2b0>
 8004dc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dc8:	d824      	bhi.n	8004e14 <UART_SetConfig+0x2e8>
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <UART_SetConfig+0x2aa>
 8004dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dd2:	d006      	beq.n	8004de2 <UART_SetConfig+0x2b6>
 8004dd4:	e01e      	b.n	8004e14 <UART_SetConfig+0x2e8>
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	77fb      	strb	r3, [r7, #31]
 8004dda:	e04b      	b.n	8004e74 <UART_SetConfig+0x348>
 8004ddc:	2302      	movs	r3, #2
 8004dde:	77fb      	strb	r3, [r7, #31]
 8004de0:	e048      	b.n	8004e74 <UART_SetConfig+0x348>
 8004de2:	2304      	movs	r3, #4
 8004de4:	77fb      	strb	r3, [r7, #31]
 8004de6:	e045      	b.n	8004e74 <UART_SetConfig+0x348>
 8004de8:	2308      	movs	r3, #8
 8004dea:	77fb      	strb	r3, [r7, #31]
 8004dec:	e042      	b.n	8004e74 <UART_SetConfig+0x348>
 8004dee:	bf00      	nop
 8004df0:	efff69f3 	.word	0xefff69f3
 8004df4:	40011000 	.word	0x40011000
 8004df8:	40023800 	.word	0x40023800
 8004dfc:	40004400 	.word	0x40004400
 8004e00:	40004800 	.word	0x40004800
 8004e04:	40004c00 	.word	0x40004c00
 8004e08:	40005000 	.word	0x40005000
 8004e0c:	40011400 	.word	0x40011400
 8004e10:	40007800 	.word	0x40007800
 8004e14:	2310      	movs	r3, #16
 8004e16:	77fb      	strb	r3, [r7, #31]
 8004e18:	e02c      	b.n	8004e74 <UART_SetConfig+0x348>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a72      	ldr	r2, [pc, #456]	; (8004fe8 <UART_SetConfig+0x4bc>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d125      	bne.n	8004e70 <UART_SetConfig+0x344>
 8004e24:	4b71      	ldr	r3, [pc, #452]	; (8004fec <UART_SetConfig+0x4c0>)
 8004e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e2a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004e2e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e32:	d017      	beq.n	8004e64 <UART_SetConfig+0x338>
 8004e34:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e38:	d817      	bhi.n	8004e6a <UART_SetConfig+0x33e>
 8004e3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e3e:	d00b      	beq.n	8004e58 <UART_SetConfig+0x32c>
 8004e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e44:	d811      	bhi.n	8004e6a <UART_SetConfig+0x33e>
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <UART_SetConfig+0x326>
 8004e4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e4e:	d006      	beq.n	8004e5e <UART_SetConfig+0x332>
 8004e50:	e00b      	b.n	8004e6a <UART_SetConfig+0x33e>
 8004e52:	2300      	movs	r3, #0
 8004e54:	77fb      	strb	r3, [r7, #31]
 8004e56:	e00d      	b.n	8004e74 <UART_SetConfig+0x348>
 8004e58:	2302      	movs	r3, #2
 8004e5a:	77fb      	strb	r3, [r7, #31]
 8004e5c:	e00a      	b.n	8004e74 <UART_SetConfig+0x348>
 8004e5e:	2304      	movs	r3, #4
 8004e60:	77fb      	strb	r3, [r7, #31]
 8004e62:	e007      	b.n	8004e74 <UART_SetConfig+0x348>
 8004e64:	2308      	movs	r3, #8
 8004e66:	77fb      	strb	r3, [r7, #31]
 8004e68:	e004      	b.n	8004e74 <UART_SetConfig+0x348>
 8004e6a:	2310      	movs	r3, #16
 8004e6c:	77fb      	strb	r3, [r7, #31]
 8004e6e:	e001      	b.n	8004e74 <UART_SetConfig+0x348>
 8004e70:	2310      	movs	r3, #16
 8004e72:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	69db      	ldr	r3, [r3, #28]
 8004e78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e7c:	d15b      	bne.n	8004f36 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004e7e:	7ffb      	ldrb	r3, [r7, #31]
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	d828      	bhi.n	8004ed6 <UART_SetConfig+0x3aa>
 8004e84:	a201      	add	r2, pc, #4	; (adr r2, 8004e8c <UART_SetConfig+0x360>)
 8004e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8a:	bf00      	nop
 8004e8c:	08004eb1 	.word	0x08004eb1
 8004e90:	08004eb9 	.word	0x08004eb9
 8004e94:	08004ec1 	.word	0x08004ec1
 8004e98:	08004ed7 	.word	0x08004ed7
 8004e9c:	08004ec7 	.word	0x08004ec7
 8004ea0:	08004ed7 	.word	0x08004ed7
 8004ea4:	08004ed7 	.word	0x08004ed7
 8004ea8:	08004ed7 	.word	0x08004ed7
 8004eac:	08004ecf 	.word	0x08004ecf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004eb0:	f7fd fae6 	bl	8002480 <HAL_RCC_GetPCLK1Freq>
 8004eb4:	61b8      	str	r0, [r7, #24]
        break;
 8004eb6:	e013      	b.n	8004ee0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004eb8:	f7fd faf6 	bl	80024a8 <HAL_RCC_GetPCLK2Freq>
 8004ebc:	61b8      	str	r0, [r7, #24]
        break;
 8004ebe:	e00f      	b.n	8004ee0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ec0:	4b4b      	ldr	r3, [pc, #300]	; (8004ff0 <UART_SetConfig+0x4c4>)
 8004ec2:	61bb      	str	r3, [r7, #24]
        break;
 8004ec4:	e00c      	b.n	8004ee0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ec6:	f7fd f9c9 	bl	800225c <HAL_RCC_GetSysClockFreq>
 8004eca:	61b8      	str	r0, [r7, #24]
        break;
 8004ecc:	e008      	b.n	8004ee0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ece:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ed2:	61bb      	str	r3, [r7, #24]
        break;
 8004ed4:	e004      	b.n	8004ee0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	77bb      	strb	r3, [r7, #30]
        break;
 8004ede:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d074      	beq.n	8004fd0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	005a      	lsls	r2, r3, #1
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	085b      	lsrs	r3, r3, #1
 8004ef0:	441a      	add	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004efa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	2b0f      	cmp	r3, #15
 8004f00:	d916      	bls.n	8004f30 <UART_SetConfig+0x404>
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f08:	d212      	bcs.n	8004f30 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	f023 030f 	bic.w	r3, r3, #15
 8004f12:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	085b      	lsrs	r3, r3, #1
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	f003 0307 	and.w	r3, r3, #7
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	89fb      	ldrh	r3, [r7, #14]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	89fa      	ldrh	r2, [r7, #14]
 8004f2c:	60da      	str	r2, [r3, #12]
 8004f2e:	e04f      	b.n	8004fd0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	77bb      	strb	r3, [r7, #30]
 8004f34:	e04c      	b.n	8004fd0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f36:	7ffb      	ldrb	r3, [r7, #31]
 8004f38:	2b08      	cmp	r3, #8
 8004f3a:	d828      	bhi.n	8004f8e <UART_SetConfig+0x462>
 8004f3c:	a201      	add	r2, pc, #4	; (adr r2, 8004f44 <UART_SetConfig+0x418>)
 8004f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f42:	bf00      	nop
 8004f44:	08004f69 	.word	0x08004f69
 8004f48:	08004f71 	.word	0x08004f71
 8004f4c:	08004f79 	.word	0x08004f79
 8004f50:	08004f8f 	.word	0x08004f8f
 8004f54:	08004f7f 	.word	0x08004f7f
 8004f58:	08004f8f 	.word	0x08004f8f
 8004f5c:	08004f8f 	.word	0x08004f8f
 8004f60:	08004f8f 	.word	0x08004f8f
 8004f64:	08004f87 	.word	0x08004f87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f68:	f7fd fa8a 	bl	8002480 <HAL_RCC_GetPCLK1Freq>
 8004f6c:	61b8      	str	r0, [r7, #24]
        break;
 8004f6e:	e013      	b.n	8004f98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f70:	f7fd fa9a 	bl	80024a8 <HAL_RCC_GetPCLK2Freq>
 8004f74:	61b8      	str	r0, [r7, #24]
        break;
 8004f76:	e00f      	b.n	8004f98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f78:	4b1d      	ldr	r3, [pc, #116]	; (8004ff0 <UART_SetConfig+0x4c4>)
 8004f7a:	61bb      	str	r3, [r7, #24]
        break;
 8004f7c:	e00c      	b.n	8004f98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f7e:	f7fd f96d 	bl	800225c <HAL_RCC_GetSysClockFreq>
 8004f82:	61b8      	str	r0, [r7, #24]
        break;
 8004f84:	e008      	b.n	8004f98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f8a:	61bb      	str	r3, [r7, #24]
        break;
 8004f8c:	e004      	b.n	8004f98 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	77bb      	strb	r3, [r7, #30]
        break;
 8004f96:	bf00      	nop
    }

    if (pclk != 0U)
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d018      	beq.n	8004fd0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	085a      	lsrs	r2, r3, #1
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	441a      	add	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	2b0f      	cmp	r3, #15
 8004fb6:	d909      	bls.n	8004fcc <UART_SetConfig+0x4a0>
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fbe:	d205      	bcs.n	8004fcc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	60da      	str	r2, [r3, #12]
 8004fca:	e001      	b.n	8004fd0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004fdc:	7fbb      	ldrb	r3, [r7, #30]
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3720      	adds	r7, #32
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	40007c00 	.word	0x40007c00
 8004fec:	40023800 	.word	0x40023800
 8004ff0:	00f42400 	.word	0x00f42400

08004ff4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00a      	beq.n	800501e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	430a      	orrs	r2, r1
 800501c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00a      	beq.n	8005040 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	430a      	orrs	r2, r1
 800503e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	f003 0304 	and.w	r3, r3, #4
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00a      	beq.n	8005062 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	430a      	orrs	r2, r1
 8005060:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005066:	f003 0308 	and.w	r3, r3, #8
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00a      	beq.n	8005084 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	f003 0310 	and.w	r3, r3, #16
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00a      	beq.n	80050a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	430a      	orrs	r2, r1
 80050a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050aa:	f003 0320 	and.w	r3, r3, #32
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00a      	beq.n	80050c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	430a      	orrs	r2, r1
 80050c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d01a      	beq.n	800510a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050f2:	d10a      	bne.n	800510a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	430a      	orrs	r2, r1
 8005108:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	430a      	orrs	r2, r1
 800512a:	605a      	str	r2, [r3, #4]
  }
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af02      	add	r7, sp, #8
 800513e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005148:	f7fc f942 	bl	80013d0 <HAL_GetTick>
 800514c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0308 	and.w	r3, r3, #8
 8005158:	2b08      	cmp	r3, #8
 800515a:	d10e      	bne.n	800517a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800515c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f831 	bl	80051d2 <UART_WaitOnFlagUntilTimeout>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e027      	b.n	80051ca <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0304 	and.w	r3, r3, #4
 8005184:	2b04      	cmp	r3, #4
 8005186:	d10e      	bne.n	80051a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005188:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f81b 	bl	80051d2 <UART_WaitOnFlagUntilTimeout>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e011      	b.n	80051ca <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2220      	movs	r2, #32
 80051aa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2220      	movs	r2, #32
 80051b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b09c      	sub	sp, #112	; 0x70
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	60f8      	str	r0, [r7, #12]
 80051da:	60b9      	str	r1, [r7, #8]
 80051dc:	603b      	str	r3, [r7, #0]
 80051de:	4613      	mov	r3, r2
 80051e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051e2:	e0a7      	b.n	8005334 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ea:	f000 80a3 	beq.w	8005334 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ee:	f7fc f8ef 	bl	80013d0 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d302      	bcc.n	8005204 <UART_WaitOnFlagUntilTimeout+0x32>
 80051fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005200:	2b00      	cmp	r3, #0
 8005202:	d13f      	bne.n	8005284 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800520c:	e853 3f00 	ldrex	r3, [r3]
 8005210:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005214:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005218:	667b      	str	r3, [r7, #100]	; 0x64
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	461a      	mov	r2, r3
 8005220:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005222:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005224:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005226:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005228:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800522a:	e841 2300 	strex	r3, r2, [r1]
 800522e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005230:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1e6      	bne.n	8005204 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	3308      	adds	r3, #8
 800523c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005240:	e853 3f00 	ldrex	r3, [r3]
 8005244:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005248:	f023 0301 	bic.w	r3, r3, #1
 800524c:	663b      	str	r3, [r7, #96]	; 0x60
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	3308      	adds	r3, #8
 8005254:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005256:	64ba      	str	r2, [r7, #72]	; 0x48
 8005258:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800525c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800525e:	e841 2300 	strex	r3, r2, [r1]
 8005262:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1e5      	bne.n	8005236 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2220      	movs	r2, #32
 800526e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2220      	movs	r2, #32
 8005274:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e068      	b.n	8005356 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0304 	and.w	r3, r3, #4
 800528e:	2b00      	cmp	r3, #0
 8005290:	d050      	beq.n	8005334 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	69db      	ldr	r3, [r3, #28]
 8005298:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800529c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052a0:	d148      	bne.n	8005334 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052aa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b4:	e853 3f00 	ldrex	r3, [r3]
 80052b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	461a      	mov	r2, r3
 80052c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ca:	637b      	str	r3, [r7, #52]	; 0x34
 80052cc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052d2:	e841 2300 	strex	r3, r2, [r1]
 80052d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80052d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1e6      	bne.n	80052ac <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	3308      	adds	r3, #8
 80052e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	e853 3f00 	ldrex	r3, [r3]
 80052ec:	613b      	str	r3, [r7, #16]
   return(result);
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	f023 0301 	bic.w	r3, r3, #1
 80052f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	3308      	adds	r3, #8
 80052fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80052fe:	623a      	str	r2, [r7, #32]
 8005300:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005302:	69f9      	ldr	r1, [r7, #28]
 8005304:	6a3a      	ldr	r2, [r7, #32]
 8005306:	e841 2300 	strex	r3, r2, [r1]
 800530a:	61bb      	str	r3, [r7, #24]
   return(result);
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1e5      	bne.n	80052de <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2220      	movs	r2, #32
 8005316:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2220      	movs	r2, #32
 800531c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2220      	movs	r2, #32
 8005324:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e010      	b.n	8005356 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	69da      	ldr	r2, [r3, #28]
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	4013      	ands	r3, r2
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	429a      	cmp	r2, r3
 8005342:	bf0c      	ite	eq
 8005344:	2301      	moveq	r3, #1
 8005346:	2300      	movne	r3, #0
 8005348:	b2db      	uxtb	r3, r3
 800534a:	461a      	mov	r2, r3
 800534c:	79fb      	ldrb	r3, [r7, #7]
 800534e:	429a      	cmp	r2, r3
 8005350:	f43f af48 	beq.w	80051e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3770      	adds	r7, #112	; 0x70
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
	...

08005360 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005360:	b480      	push	{r7}
 8005362:	b097      	sub	sp, #92	; 0x5c
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	4613      	mov	r3, r2
 800536c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	88fa      	ldrh	r2, [r7, #6]
 8005378:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	88fa      	ldrh	r2, [r7, #6]
 8005380:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005392:	d10e      	bne.n	80053b2 <UART_Start_Receive_IT+0x52>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d105      	bne.n	80053a8 <UART_Start_Receive_IT+0x48>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80053a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053a6:	e02d      	b.n	8005404 <UART_Start_Receive_IT+0xa4>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	22ff      	movs	r2, #255	; 0xff
 80053ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053b0:	e028      	b.n	8005404 <UART_Start_Receive_IT+0xa4>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10d      	bne.n	80053d6 <UART_Start_Receive_IT+0x76>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d104      	bne.n	80053cc <UART_Start_Receive_IT+0x6c>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	22ff      	movs	r2, #255	; 0xff
 80053c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053ca:	e01b      	b.n	8005404 <UART_Start_Receive_IT+0xa4>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	227f      	movs	r2, #127	; 0x7f
 80053d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053d4:	e016      	b.n	8005404 <UART_Start_Receive_IT+0xa4>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053de:	d10d      	bne.n	80053fc <UART_Start_Receive_IT+0x9c>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d104      	bne.n	80053f2 <UART_Start_Receive_IT+0x92>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	227f      	movs	r2, #127	; 0x7f
 80053ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053f0:	e008      	b.n	8005404 <UART_Start_Receive_IT+0xa4>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	223f      	movs	r2, #63	; 0x3f
 80053f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053fa:	e003      	b.n	8005404 <UART_Start_Receive_IT+0xa4>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2222      	movs	r2, #34	; 0x22
 8005410:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	3308      	adds	r3, #8
 800541a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800541e:	e853 3f00 	ldrex	r3, [r3]
 8005422:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005426:	f043 0301 	orr.w	r3, r3, #1
 800542a:	657b      	str	r3, [r7, #84]	; 0x54
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	3308      	adds	r3, #8
 8005432:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005434:	64ba      	str	r2, [r7, #72]	; 0x48
 8005436:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005438:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800543a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800543c:	e841 2300 	strex	r3, r2, [r1]
 8005440:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005442:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1e5      	bne.n	8005414 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005450:	d107      	bne.n	8005462 <UART_Start_Receive_IT+0x102>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d103      	bne.n	8005462 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	4a21      	ldr	r2, [pc, #132]	; (80054e4 <UART_Start_Receive_IT+0x184>)
 800545e:	669a      	str	r2, [r3, #104]	; 0x68
 8005460:	e002      	b.n	8005468 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	4a20      	ldr	r2, [pc, #128]	; (80054e8 <UART_Start_Receive_IT+0x188>)
 8005466:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d019      	beq.n	80054a4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005478:	e853 3f00 	ldrex	r3, [r3]
 800547c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005484:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	461a      	mov	r2, r3
 800548c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800548e:	637b      	str	r3, [r7, #52]	; 0x34
 8005490:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005492:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005494:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005496:	e841 2300 	strex	r3, r2, [r1]
 800549a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800549c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1e6      	bne.n	8005470 <UART_Start_Receive_IT+0x110>
 80054a2:	e018      	b.n	80054d6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	e853 3f00 	ldrex	r3, [r3]
 80054b0:	613b      	str	r3, [r7, #16]
   return(result);
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	f043 0320 	orr.w	r3, r3, #32
 80054b8:	653b      	str	r3, [r7, #80]	; 0x50
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	461a      	mov	r2, r3
 80054c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054c2:	623b      	str	r3, [r7, #32]
 80054c4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c6:	69f9      	ldr	r1, [r7, #28]
 80054c8:	6a3a      	ldr	r2, [r7, #32]
 80054ca:	e841 2300 	strex	r3, r2, [r1]
 80054ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1e6      	bne.n	80054a4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	375c      	adds	r7, #92	; 0x5c
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr
 80054e4:	08005911 	.word	0x08005911
 80054e8:	080057ab 	.word	0x080057ab

080054ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b095      	sub	sp, #84	; 0x54
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054fc:	e853 3f00 	ldrex	r3, [r3]
 8005500:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005504:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005508:	64fb      	str	r3, [r7, #76]	; 0x4c
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	461a      	mov	r2, r3
 8005510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005512:	643b      	str	r3, [r7, #64]	; 0x40
 8005514:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005516:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005518:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800551a:	e841 2300 	strex	r3, r2, [r1]
 800551e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1e6      	bne.n	80054f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	3308      	adds	r3, #8
 800552c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552e:	6a3b      	ldr	r3, [r7, #32]
 8005530:	e853 3f00 	ldrex	r3, [r3]
 8005534:	61fb      	str	r3, [r7, #28]
   return(result);
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	f023 0301 	bic.w	r3, r3, #1
 800553c:	64bb      	str	r3, [r7, #72]	; 0x48
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	3308      	adds	r3, #8
 8005544:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005546:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005548:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800554c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800554e:	e841 2300 	strex	r3, r2, [r1]
 8005552:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1e5      	bne.n	8005526 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800555e:	2b01      	cmp	r3, #1
 8005560:	d118      	bne.n	8005594 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	e853 3f00 	ldrex	r3, [r3]
 800556e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	f023 0310 	bic.w	r3, r3, #16
 8005576:	647b      	str	r3, [r7, #68]	; 0x44
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	461a      	mov	r2, r3
 800557e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005580:	61bb      	str	r3, [r7, #24]
 8005582:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005584:	6979      	ldr	r1, [r7, #20]
 8005586:	69ba      	ldr	r2, [r7, #24]
 8005588:	e841 2300 	strex	r3, r2, [r1]
 800558c:	613b      	str	r3, [r7, #16]
   return(result);
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1e6      	bne.n	8005562 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2220      	movs	r2, #32
 8005598:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80055a8:	bf00      	nop
 80055aa:	3754      	adds	r7, #84	; 0x54
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f7ff fa8a 	bl	8004aec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055d8:	bf00      	nop
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b08f      	sub	sp, #60	; 0x3c
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055ec:	2b21      	cmp	r3, #33	; 0x21
 80055ee:	d14c      	bne.n	800568a <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d132      	bne.n	8005662 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005602:	6a3b      	ldr	r3, [r7, #32]
 8005604:	e853 3f00 	ldrex	r3, [r3]
 8005608:	61fb      	str	r3, [r7, #28]
   return(result);
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005610:	637b      	str	r3, [r7, #52]	; 0x34
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	461a      	mov	r2, r3
 8005618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800561a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800561c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005620:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005622:	e841 2300 	strex	r3, r2, [r1]
 8005626:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1e6      	bne.n	80055fc <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	e853 3f00 	ldrex	r3, [r3]
 800563a:	60bb      	str	r3, [r7, #8]
   return(result);
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005642:	633b      	str	r3, [r7, #48]	; 0x30
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	461a      	mov	r2, r3
 800564a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564c:	61bb      	str	r3, [r7, #24]
 800564e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005650:	6979      	ldr	r1, [r7, #20]
 8005652:	69ba      	ldr	r2, [r7, #24]
 8005654:	e841 2300 	strex	r3, r2, [r1]
 8005658:	613b      	str	r3, [r7, #16]
   return(result);
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1e6      	bne.n	800562e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005660:	e013      	b.n	800568a <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005666:	781a      	ldrb	r2, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005672:	1c5a      	adds	r2, r3, #1
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800567e:	b29b      	uxth	r3, r3
 8005680:	3b01      	subs	r3, #1
 8005682:	b29a      	uxth	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800568a:	bf00      	nop
 800568c:	373c      	adds	r7, #60	; 0x3c
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005696:	b480      	push	{r7}
 8005698:	b091      	sub	sp, #68	; 0x44
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056a2:	2b21      	cmp	r3, #33	; 0x21
 80056a4:	d151      	bne.n	800574a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d132      	bne.n	8005718 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ba:	e853 3f00 	ldrex	r3, [r3]
 80056be:	623b      	str	r3, [r7, #32]
   return(result);
 80056c0:	6a3b      	ldr	r3, [r7, #32]
 80056c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	461a      	mov	r2, r3
 80056ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d0:	633b      	str	r3, [r7, #48]	; 0x30
 80056d2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056d8:	e841 2300 	strex	r3, r2, [r1]
 80056dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1e6      	bne.n	80056b2 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	e853 3f00 	ldrex	r3, [r3]
 80056f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056f8:	637b      	str	r3, [r7, #52]	; 0x34
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	461a      	mov	r2, r3
 8005700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005702:	61fb      	str	r3, [r7, #28]
 8005704:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005706:	69b9      	ldr	r1, [r7, #24]
 8005708:	69fa      	ldr	r2, [r7, #28]
 800570a:	e841 2300 	strex	r3, r2, [r1]
 800570e:	617b      	str	r3, [r7, #20]
   return(result);
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1e6      	bne.n	80056e4 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005716:	e018      	b.n	800574a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800571c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800571e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005720:	881b      	ldrh	r3, [r3, #0]
 8005722:	461a      	mov	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800572c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005732:	1c9a      	adds	r2, r3, #2
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800573e:	b29b      	uxth	r3, r3
 8005740:	3b01      	subs	r3, #1
 8005742:	b29a      	uxth	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800574a:	bf00      	nop
 800574c:	3744      	adds	r7, #68	; 0x44
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b088      	sub	sp, #32
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	e853 3f00 	ldrex	r3, [r3]
 800576a:	60bb      	str	r3, [r7, #8]
   return(result);
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005772:	61fb      	str	r3, [r7, #28]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	461a      	mov	r2, r3
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	61bb      	str	r3, [r7, #24]
 800577e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005780:	6979      	ldr	r1, [r7, #20]
 8005782:	69ba      	ldr	r2, [r7, #24]
 8005784:	e841 2300 	strex	r3, r2, [r1]
 8005788:	613b      	str	r3, [r7, #16]
   return(result);
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1e6      	bne.n	800575e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2220      	movs	r2, #32
 8005794:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f7fb fabb 	bl	8000d18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057a2:	bf00      	nop
 80057a4:	3720      	adds	r7, #32
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b096      	sub	sp, #88	; 0x58
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80057b8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057c2:	2b22      	cmp	r3, #34	; 0x22
 80057c4:	f040 8098 	bne.w	80058f8 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ce:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80057d2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80057d6:	b2d9      	uxtb	r1, r3
 80057d8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80057dc:	b2da      	uxtb	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e2:	400a      	ands	r2, r1
 80057e4:	b2d2      	uxtb	r2, r2
 80057e6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ec:	1c5a      	adds	r2, r3, #1
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	3b01      	subs	r3, #1
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800580a:	b29b      	uxth	r3, r3
 800580c:	2b00      	cmp	r3, #0
 800580e:	d17b      	bne.n	8005908 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005818:	e853 3f00 	ldrex	r3, [r3]
 800581c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800581e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005820:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005824:	653b      	str	r3, [r7, #80]	; 0x50
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	461a      	mov	r2, r3
 800582c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800582e:	647b      	str	r3, [r7, #68]	; 0x44
 8005830:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005832:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005834:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005836:	e841 2300 	strex	r3, r2, [r1]
 800583a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800583c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1e6      	bne.n	8005810 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	3308      	adds	r3, #8
 8005848:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584c:	e853 3f00 	ldrex	r3, [r3]
 8005850:	623b      	str	r3, [r7, #32]
   return(result);
 8005852:	6a3b      	ldr	r3, [r7, #32]
 8005854:	f023 0301 	bic.w	r3, r3, #1
 8005858:	64fb      	str	r3, [r7, #76]	; 0x4c
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	3308      	adds	r3, #8
 8005860:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005862:	633a      	str	r2, [r7, #48]	; 0x30
 8005864:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005866:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800586a:	e841 2300 	strex	r3, r2, [r1]
 800586e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1e5      	bne.n	8005842 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2220      	movs	r2, #32
 800587a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800588e:	2b01      	cmp	r3, #1
 8005890:	d12e      	bne.n	80058f0 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	e853 3f00 	ldrex	r3, [r3]
 80058a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f023 0310 	bic.w	r3, r3, #16
 80058ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	461a      	mov	r2, r3
 80058b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058b6:	61fb      	str	r3, [r7, #28]
 80058b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ba:	69b9      	ldr	r1, [r7, #24]
 80058bc:	69fa      	ldr	r2, [r7, #28]
 80058be:	e841 2300 	strex	r3, r2, [r1]
 80058c2:	617b      	str	r3, [r7, #20]
   return(result);
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1e6      	bne.n	8005898 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	69db      	ldr	r3, [r3, #28]
 80058d0:	f003 0310 	and.w	r3, r3, #16
 80058d4:	2b10      	cmp	r3, #16
 80058d6:	d103      	bne.n	80058e0 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2210      	movs	r2, #16
 80058de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80058e6:	4619      	mov	r1, r3
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f7ff f909 	bl	8004b00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80058ee:	e00b      	b.n	8005908 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f7fb f98d 	bl	8000c10 <HAL_UART_RxCpltCallback>
}
 80058f6:	e007      	b.n	8005908 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	699a      	ldr	r2, [r3, #24]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f042 0208 	orr.w	r2, r2, #8
 8005906:	619a      	str	r2, [r3, #24]
}
 8005908:	bf00      	nop
 800590a:	3758      	adds	r7, #88	; 0x58
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b096      	sub	sp, #88	; 0x58
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800591e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005928:	2b22      	cmp	r3, #34	; 0x22
 800592a:	f040 8098 	bne.w	8005a5e <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005934:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800593c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800593e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005942:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005946:	4013      	ands	r3, r2
 8005948:	b29a      	uxth	r2, r3
 800594a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800594c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005952:	1c9a      	adds	r2, r3, #2
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800595e:	b29b      	uxth	r3, r3
 8005960:	3b01      	subs	r3, #1
 8005962:	b29a      	uxth	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005970:	b29b      	uxth	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d17b      	bne.n	8005a6e <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800597c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597e:	e853 3f00 	ldrex	r3, [r3]
 8005982:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005986:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800598a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	461a      	mov	r2, r3
 8005992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005994:	643b      	str	r3, [r7, #64]	; 0x40
 8005996:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005998:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800599a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800599c:	e841 2300 	strex	r3, r2, [r1]
 80059a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1e6      	bne.n	8005976 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	3308      	adds	r3, #8
 80059ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b0:	6a3b      	ldr	r3, [r7, #32]
 80059b2:	e853 3f00 	ldrex	r3, [r3]
 80059b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	f023 0301 	bic.w	r3, r3, #1
 80059be:	64bb      	str	r3, [r7, #72]	; 0x48
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	3308      	adds	r3, #8
 80059c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059d0:	e841 2300 	strex	r3, r2, [r1]
 80059d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1e5      	bne.n	80059a8 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2220      	movs	r2, #32
 80059e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d12e      	bne.n	8005a56 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	e853 3f00 	ldrex	r3, [r3]
 8005a0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	f023 0310 	bic.w	r3, r3, #16
 8005a12:	647b      	str	r3, [r7, #68]	; 0x44
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	461a      	mov	r2, r3
 8005a1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a1c:	61bb      	str	r3, [r7, #24]
 8005a1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a20:	6979      	ldr	r1, [r7, #20]
 8005a22:	69ba      	ldr	r2, [r7, #24]
 8005a24:	e841 2300 	strex	r3, r2, [r1]
 8005a28:	613b      	str	r3, [r7, #16]
   return(result);
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1e6      	bne.n	80059fe <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	69db      	ldr	r3, [r3, #28]
 8005a36:	f003 0310 	and.w	r3, r3, #16
 8005a3a:	2b10      	cmp	r3, #16
 8005a3c:	d103      	bne.n	8005a46 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2210      	movs	r2, #16
 8005a44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f7ff f856 	bl	8004b00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a54:	e00b      	b.n	8005a6e <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f7fb f8da 	bl	8000c10 <HAL_UART_RxCpltCallback>
}
 8005a5c:	e007      	b.n	8005a6e <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	699a      	ldr	r2, [r3, #24]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f042 0208 	orr.w	r2, r2, #8
 8005a6c:	619a      	str	r2, [r3, #24]
}
 8005a6e:	bf00      	nop
 8005a70:	3758      	adds	r7, #88	; 0x58
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
	...

08005a78 <__errno>:
 8005a78:	4b01      	ldr	r3, [pc, #4]	; (8005a80 <__errno+0x8>)
 8005a7a:	6818      	ldr	r0, [r3, #0]
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	20000010 	.word	0x20000010

08005a84 <__libc_init_array>:
 8005a84:	b570      	push	{r4, r5, r6, lr}
 8005a86:	4d0d      	ldr	r5, [pc, #52]	; (8005abc <__libc_init_array+0x38>)
 8005a88:	4c0d      	ldr	r4, [pc, #52]	; (8005ac0 <__libc_init_array+0x3c>)
 8005a8a:	1b64      	subs	r4, r4, r5
 8005a8c:	10a4      	asrs	r4, r4, #2
 8005a8e:	2600      	movs	r6, #0
 8005a90:	42a6      	cmp	r6, r4
 8005a92:	d109      	bne.n	8005aa8 <__libc_init_array+0x24>
 8005a94:	4d0b      	ldr	r5, [pc, #44]	; (8005ac4 <__libc_init_array+0x40>)
 8005a96:	4c0c      	ldr	r4, [pc, #48]	; (8005ac8 <__libc_init_array+0x44>)
 8005a98:	f001 f944 	bl	8006d24 <_init>
 8005a9c:	1b64      	subs	r4, r4, r5
 8005a9e:	10a4      	asrs	r4, r4, #2
 8005aa0:	2600      	movs	r6, #0
 8005aa2:	42a6      	cmp	r6, r4
 8005aa4:	d105      	bne.n	8005ab2 <__libc_init_array+0x2e>
 8005aa6:	bd70      	pop	{r4, r5, r6, pc}
 8005aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aac:	4798      	blx	r3
 8005aae:	3601      	adds	r6, #1
 8005ab0:	e7ee      	b.n	8005a90 <__libc_init_array+0xc>
 8005ab2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ab6:	4798      	blx	r3
 8005ab8:	3601      	adds	r6, #1
 8005aba:	e7f2      	b.n	8005aa2 <__libc_init_array+0x1e>
 8005abc:	08006ed8 	.word	0x08006ed8
 8005ac0:	08006ed8 	.word	0x08006ed8
 8005ac4:	08006ed8 	.word	0x08006ed8
 8005ac8:	08006edc 	.word	0x08006edc

08005acc <malloc>:
 8005acc:	4b02      	ldr	r3, [pc, #8]	; (8005ad8 <malloc+0xc>)
 8005ace:	4601      	mov	r1, r0
 8005ad0:	6818      	ldr	r0, [r3, #0]
 8005ad2:	f000 b877 	b.w	8005bc4 <_malloc_r>
 8005ad6:	bf00      	nop
 8005ad8:	20000010 	.word	0x20000010

08005adc <memset>:
 8005adc:	4402      	add	r2, r0
 8005ade:	4603      	mov	r3, r0
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d100      	bne.n	8005ae6 <memset+0xa>
 8005ae4:	4770      	bx	lr
 8005ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8005aea:	e7f9      	b.n	8005ae0 <memset+0x4>

08005aec <_free_r>:
 8005aec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005aee:	2900      	cmp	r1, #0
 8005af0:	d044      	beq.n	8005b7c <_free_r+0x90>
 8005af2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005af6:	9001      	str	r0, [sp, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f1a1 0404 	sub.w	r4, r1, #4
 8005afe:	bfb8      	it	lt
 8005b00:	18e4      	addlt	r4, r4, r3
 8005b02:	f000 fc5d 	bl	80063c0 <__malloc_lock>
 8005b06:	4a1e      	ldr	r2, [pc, #120]	; (8005b80 <_free_r+0x94>)
 8005b08:	9801      	ldr	r0, [sp, #4]
 8005b0a:	6813      	ldr	r3, [r2, #0]
 8005b0c:	b933      	cbnz	r3, 8005b1c <_free_r+0x30>
 8005b0e:	6063      	str	r3, [r4, #4]
 8005b10:	6014      	str	r4, [r2, #0]
 8005b12:	b003      	add	sp, #12
 8005b14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b18:	f000 bc58 	b.w	80063cc <__malloc_unlock>
 8005b1c:	42a3      	cmp	r3, r4
 8005b1e:	d908      	bls.n	8005b32 <_free_r+0x46>
 8005b20:	6825      	ldr	r5, [r4, #0]
 8005b22:	1961      	adds	r1, r4, r5
 8005b24:	428b      	cmp	r3, r1
 8005b26:	bf01      	itttt	eq
 8005b28:	6819      	ldreq	r1, [r3, #0]
 8005b2a:	685b      	ldreq	r3, [r3, #4]
 8005b2c:	1949      	addeq	r1, r1, r5
 8005b2e:	6021      	streq	r1, [r4, #0]
 8005b30:	e7ed      	b.n	8005b0e <_free_r+0x22>
 8005b32:	461a      	mov	r2, r3
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	b10b      	cbz	r3, 8005b3c <_free_r+0x50>
 8005b38:	42a3      	cmp	r3, r4
 8005b3a:	d9fa      	bls.n	8005b32 <_free_r+0x46>
 8005b3c:	6811      	ldr	r1, [r2, #0]
 8005b3e:	1855      	adds	r5, r2, r1
 8005b40:	42a5      	cmp	r5, r4
 8005b42:	d10b      	bne.n	8005b5c <_free_r+0x70>
 8005b44:	6824      	ldr	r4, [r4, #0]
 8005b46:	4421      	add	r1, r4
 8005b48:	1854      	adds	r4, r2, r1
 8005b4a:	42a3      	cmp	r3, r4
 8005b4c:	6011      	str	r1, [r2, #0]
 8005b4e:	d1e0      	bne.n	8005b12 <_free_r+0x26>
 8005b50:	681c      	ldr	r4, [r3, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	6053      	str	r3, [r2, #4]
 8005b56:	4421      	add	r1, r4
 8005b58:	6011      	str	r1, [r2, #0]
 8005b5a:	e7da      	b.n	8005b12 <_free_r+0x26>
 8005b5c:	d902      	bls.n	8005b64 <_free_r+0x78>
 8005b5e:	230c      	movs	r3, #12
 8005b60:	6003      	str	r3, [r0, #0]
 8005b62:	e7d6      	b.n	8005b12 <_free_r+0x26>
 8005b64:	6825      	ldr	r5, [r4, #0]
 8005b66:	1961      	adds	r1, r4, r5
 8005b68:	428b      	cmp	r3, r1
 8005b6a:	bf04      	itt	eq
 8005b6c:	6819      	ldreq	r1, [r3, #0]
 8005b6e:	685b      	ldreq	r3, [r3, #4]
 8005b70:	6063      	str	r3, [r4, #4]
 8005b72:	bf04      	itt	eq
 8005b74:	1949      	addeq	r1, r1, r5
 8005b76:	6021      	streq	r1, [r4, #0]
 8005b78:	6054      	str	r4, [r2, #4]
 8005b7a:	e7ca      	b.n	8005b12 <_free_r+0x26>
 8005b7c:	b003      	add	sp, #12
 8005b7e:	bd30      	pop	{r4, r5, pc}
 8005b80:	200005a4 	.word	0x200005a4

08005b84 <sbrk_aligned>:
 8005b84:	b570      	push	{r4, r5, r6, lr}
 8005b86:	4e0e      	ldr	r6, [pc, #56]	; (8005bc0 <sbrk_aligned+0x3c>)
 8005b88:	460c      	mov	r4, r1
 8005b8a:	6831      	ldr	r1, [r6, #0]
 8005b8c:	4605      	mov	r5, r0
 8005b8e:	b911      	cbnz	r1, 8005b96 <sbrk_aligned+0x12>
 8005b90:	f000 f88c 	bl	8005cac <_sbrk_r>
 8005b94:	6030      	str	r0, [r6, #0]
 8005b96:	4621      	mov	r1, r4
 8005b98:	4628      	mov	r0, r5
 8005b9a:	f000 f887 	bl	8005cac <_sbrk_r>
 8005b9e:	1c43      	adds	r3, r0, #1
 8005ba0:	d00a      	beq.n	8005bb8 <sbrk_aligned+0x34>
 8005ba2:	1cc4      	adds	r4, r0, #3
 8005ba4:	f024 0403 	bic.w	r4, r4, #3
 8005ba8:	42a0      	cmp	r0, r4
 8005baa:	d007      	beq.n	8005bbc <sbrk_aligned+0x38>
 8005bac:	1a21      	subs	r1, r4, r0
 8005bae:	4628      	mov	r0, r5
 8005bb0:	f000 f87c 	bl	8005cac <_sbrk_r>
 8005bb4:	3001      	adds	r0, #1
 8005bb6:	d101      	bne.n	8005bbc <sbrk_aligned+0x38>
 8005bb8:	f04f 34ff 	mov.w	r4, #4294967295
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	bd70      	pop	{r4, r5, r6, pc}
 8005bc0:	200005a8 	.word	0x200005a8

08005bc4 <_malloc_r>:
 8005bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bc8:	1ccd      	adds	r5, r1, #3
 8005bca:	f025 0503 	bic.w	r5, r5, #3
 8005bce:	3508      	adds	r5, #8
 8005bd0:	2d0c      	cmp	r5, #12
 8005bd2:	bf38      	it	cc
 8005bd4:	250c      	movcc	r5, #12
 8005bd6:	2d00      	cmp	r5, #0
 8005bd8:	4607      	mov	r7, r0
 8005bda:	db01      	blt.n	8005be0 <_malloc_r+0x1c>
 8005bdc:	42a9      	cmp	r1, r5
 8005bde:	d905      	bls.n	8005bec <_malloc_r+0x28>
 8005be0:	230c      	movs	r3, #12
 8005be2:	603b      	str	r3, [r7, #0]
 8005be4:	2600      	movs	r6, #0
 8005be6:	4630      	mov	r0, r6
 8005be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bec:	4e2e      	ldr	r6, [pc, #184]	; (8005ca8 <_malloc_r+0xe4>)
 8005bee:	f000 fbe7 	bl	80063c0 <__malloc_lock>
 8005bf2:	6833      	ldr	r3, [r6, #0]
 8005bf4:	461c      	mov	r4, r3
 8005bf6:	bb34      	cbnz	r4, 8005c46 <_malloc_r+0x82>
 8005bf8:	4629      	mov	r1, r5
 8005bfa:	4638      	mov	r0, r7
 8005bfc:	f7ff ffc2 	bl	8005b84 <sbrk_aligned>
 8005c00:	1c43      	adds	r3, r0, #1
 8005c02:	4604      	mov	r4, r0
 8005c04:	d14d      	bne.n	8005ca2 <_malloc_r+0xde>
 8005c06:	6834      	ldr	r4, [r6, #0]
 8005c08:	4626      	mov	r6, r4
 8005c0a:	2e00      	cmp	r6, #0
 8005c0c:	d140      	bne.n	8005c90 <_malloc_r+0xcc>
 8005c0e:	6823      	ldr	r3, [r4, #0]
 8005c10:	4631      	mov	r1, r6
 8005c12:	4638      	mov	r0, r7
 8005c14:	eb04 0803 	add.w	r8, r4, r3
 8005c18:	f000 f848 	bl	8005cac <_sbrk_r>
 8005c1c:	4580      	cmp	r8, r0
 8005c1e:	d13a      	bne.n	8005c96 <_malloc_r+0xd2>
 8005c20:	6821      	ldr	r1, [r4, #0]
 8005c22:	3503      	adds	r5, #3
 8005c24:	1a6d      	subs	r5, r5, r1
 8005c26:	f025 0503 	bic.w	r5, r5, #3
 8005c2a:	3508      	adds	r5, #8
 8005c2c:	2d0c      	cmp	r5, #12
 8005c2e:	bf38      	it	cc
 8005c30:	250c      	movcc	r5, #12
 8005c32:	4629      	mov	r1, r5
 8005c34:	4638      	mov	r0, r7
 8005c36:	f7ff ffa5 	bl	8005b84 <sbrk_aligned>
 8005c3a:	3001      	adds	r0, #1
 8005c3c:	d02b      	beq.n	8005c96 <_malloc_r+0xd2>
 8005c3e:	6823      	ldr	r3, [r4, #0]
 8005c40:	442b      	add	r3, r5
 8005c42:	6023      	str	r3, [r4, #0]
 8005c44:	e00e      	b.n	8005c64 <_malloc_r+0xa0>
 8005c46:	6822      	ldr	r2, [r4, #0]
 8005c48:	1b52      	subs	r2, r2, r5
 8005c4a:	d41e      	bmi.n	8005c8a <_malloc_r+0xc6>
 8005c4c:	2a0b      	cmp	r2, #11
 8005c4e:	d916      	bls.n	8005c7e <_malloc_r+0xba>
 8005c50:	1961      	adds	r1, r4, r5
 8005c52:	42a3      	cmp	r3, r4
 8005c54:	6025      	str	r5, [r4, #0]
 8005c56:	bf18      	it	ne
 8005c58:	6059      	strne	r1, [r3, #4]
 8005c5a:	6863      	ldr	r3, [r4, #4]
 8005c5c:	bf08      	it	eq
 8005c5e:	6031      	streq	r1, [r6, #0]
 8005c60:	5162      	str	r2, [r4, r5]
 8005c62:	604b      	str	r3, [r1, #4]
 8005c64:	4638      	mov	r0, r7
 8005c66:	f104 060b 	add.w	r6, r4, #11
 8005c6a:	f000 fbaf 	bl	80063cc <__malloc_unlock>
 8005c6e:	f026 0607 	bic.w	r6, r6, #7
 8005c72:	1d23      	adds	r3, r4, #4
 8005c74:	1af2      	subs	r2, r6, r3
 8005c76:	d0b6      	beq.n	8005be6 <_malloc_r+0x22>
 8005c78:	1b9b      	subs	r3, r3, r6
 8005c7a:	50a3      	str	r3, [r4, r2]
 8005c7c:	e7b3      	b.n	8005be6 <_malloc_r+0x22>
 8005c7e:	6862      	ldr	r2, [r4, #4]
 8005c80:	42a3      	cmp	r3, r4
 8005c82:	bf0c      	ite	eq
 8005c84:	6032      	streq	r2, [r6, #0]
 8005c86:	605a      	strne	r2, [r3, #4]
 8005c88:	e7ec      	b.n	8005c64 <_malloc_r+0xa0>
 8005c8a:	4623      	mov	r3, r4
 8005c8c:	6864      	ldr	r4, [r4, #4]
 8005c8e:	e7b2      	b.n	8005bf6 <_malloc_r+0x32>
 8005c90:	4634      	mov	r4, r6
 8005c92:	6876      	ldr	r6, [r6, #4]
 8005c94:	e7b9      	b.n	8005c0a <_malloc_r+0x46>
 8005c96:	230c      	movs	r3, #12
 8005c98:	603b      	str	r3, [r7, #0]
 8005c9a:	4638      	mov	r0, r7
 8005c9c:	f000 fb96 	bl	80063cc <__malloc_unlock>
 8005ca0:	e7a1      	b.n	8005be6 <_malloc_r+0x22>
 8005ca2:	6025      	str	r5, [r4, #0]
 8005ca4:	e7de      	b.n	8005c64 <_malloc_r+0xa0>
 8005ca6:	bf00      	nop
 8005ca8:	200005a4 	.word	0x200005a4

08005cac <_sbrk_r>:
 8005cac:	b538      	push	{r3, r4, r5, lr}
 8005cae:	4d06      	ldr	r5, [pc, #24]	; (8005cc8 <_sbrk_r+0x1c>)
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	4604      	mov	r4, r0
 8005cb4:	4608      	mov	r0, r1
 8005cb6:	602b      	str	r3, [r5, #0]
 8005cb8:	f7fb f8f2 	bl	8000ea0 <_sbrk>
 8005cbc:	1c43      	adds	r3, r0, #1
 8005cbe:	d102      	bne.n	8005cc6 <_sbrk_r+0x1a>
 8005cc0:	682b      	ldr	r3, [r5, #0]
 8005cc2:	b103      	cbz	r3, 8005cc6 <_sbrk_r+0x1a>
 8005cc4:	6023      	str	r3, [r4, #0]
 8005cc6:	bd38      	pop	{r3, r4, r5, pc}
 8005cc8:	200005b0 	.word	0x200005b0

08005ccc <setvbuf>:
 8005ccc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005cd0:	461d      	mov	r5, r3
 8005cd2:	4b5d      	ldr	r3, [pc, #372]	; (8005e48 <setvbuf+0x17c>)
 8005cd4:	681f      	ldr	r7, [r3, #0]
 8005cd6:	4604      	mov	r4, r0
 8005cd8:	460e      	mov	r6, r1
 8005cda:	4690      	mov	r8, r2
 8005cdc:	b127      	cbz	r7, 8005ce8 <setvbuf+0x1c>
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	b913      	cbnz	r3, 8005ce8 <setvbuf+0x1c>
 8005ce2:	4638      	mov	r0, r7
 8005ce4:	f000 fa54 	bl	8006190 <__sinit>
 8005ce8:	4b58      	ldr	r3, [pc, #352]	; (8005e4c <setvbuf+0x180>)
 8005cea:	429c      	cmp	r4, r3
 8005cec:	d167      	bne.n	8005dbe <setvbuf+0xf2>
 8005cee:	687c      	ldr	r4, [r7, #4]
 8005cf0:	f1b8 0f02 	cmp.w	r8, #2
 8005cf4:	d006      	beq.n	8005d04 <setvbuf+0x38>
 8005cf6:	f1b8 0f01 	cmp.w	r8, #1
 8005cfa:	f200 809f 	bhi.w	8005e3c <setvbuf+0x170>
 8005cfe:	2d00      	cmp	r5, #0
 8005d00:	f2c0 809c 	blt.w	8005e3c <setvbuf+0x170>
 8005d04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d06:	07db      	lsls	r3, r3, #31
 8005d08:	d405      	bmi.n	8005d16 <setvbuf+0x4a>
 8005d0a:	89a3      	ldrh	r3, [r4, #12]
 8005d0c:	0598      	lsls	r0, r3, #22
 8005d0e:	d402      	bmi.n	8005d16 <setvbuf+0x4a>
 8005d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d12:	f000 faed 	bl	80062f0 <__retarget_lock_acquire_recursive>
 8005d16:	4621      	mov	r1, r4
 8005d18:	4638      	mov	r0, r7
 8005d1a:	f000 f9a5 	bl	8006068 <_fflush_r>
 8005d1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d20:	b141      	cbz	r1, 8005d34 <setvbuf+0x68>
 8005d22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d26:	4299      	cmp	r1, r3
 8005d28:	d002      	beq.n	8005d30 <setvbuf+0x64>
 8005d2a:	4638      	mov	r0, r7
 8005d2c:	f7ff fede 	bl	8005aec <_free_r>
 8005d30:	2300      	movs	r3, #0
 8005d32:	6363      	str	r3, [r4, #52]	; 0x34
 8005d34:	2300      	movs	r3, #0
 8005d36:	61a3      	str	r3, [r4, #24]
 8005d38:	6063      	str	r3, [r4, #4]
 8005d3a:	89a3      	ldrh	r3, [r4, #12]
 8005d3c:	0619      	lsls	r1, r3, #24
 8005d3e:	d503      	bpl.n	8005d48 <setvbuf+0x7c>
 8005d40:	6921      	ldr	r1, [r4, #16]
 8005d42:	4638      	mov	r0, r7
 8005d44:	f7ff fed2 	bl	8005aec <_free_r>
 8005d48:	89a3      	ldrh	r3, [r4, #12]
 8005d4a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005d4e:	f023 0303 	bic.w	r3, r3, #3
 8005d52:	f1b8 0f02 	cmp.w	r8, #2
 8005d56:	81a3      	strh	r3, [r4, #12]
 8005d58:	d06c      	beq.n	8005e34 <setvbuf+0x168>
 8005d5a:	ab01      	add	r3, sp, #4
 8005d5c:	466a      	mov	r2, sp
 8005d5e:	4621      	mov	r1, r4
 8005d60:	4638      	mov	r0, r7
 8005d62:	f000 fac7 	bl	80062f4 <__swhatbuf_r>
 8005d66:	89a3      	ldrh	r3, [r4, #12]
 8005d68:	4318      	orrs	r0, r3
 8005d6a:	81a0      	strh	r0, [r4, #12]
 8005d6c:	2d00      	cmp	r5, #0
 8005d6e:	d130      	bne.n	8005dd2 <setvbuf+0x106>
 8005d70:	9d00      	ldr	r5, [sp, #0]
 8005d72:	4628      	mov	r0, r5
 8005d74:	f7ff feaa 	bl	8005acc <malloc>
 8005d78:	4606      	mov	r6, r0
 8005d7a:	2800      	cmp	r0, #0
 8005d7c:	d155      	bne.n	8005e2a <setvbuf+0x15e>
 8005d7e:	f8dd 9000 	ldr.w	r9, [sp]
 8005d82:	45a9      	cmp	r9, r5
 8005d84:	d14a      	bne.n	8005e1c <setvbuf+0x150>
 8005d86:	f04f 35ff 	mov.w	r5, #4294967295
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	60a2      	str	r2, [r4, #8]
 8005d8e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8005d92:	6022      	str	r2, [r4, #0]
 8005d94:	6122      	str	r2, [r4, #16]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d9c:	6162      	str	r2, [r4, #20]
 8005d9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005da0:	f043 0302 	orr.w	r3, r3, #2
 8005da4:	07d2      	lsls	r2, r2, #31
 8005da6:	81a3      	strh	r3, [r4, #12]
 8005da8:	d405      	bmi.n	8005db6 <setvbuf+0xea>
 8005daa:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005dae:	d102      	bne.n	8005db6 <setvbuf+0xea>
 8005db0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005db2:	f000 fa9e 	bl	80062f2 <__retarget_lock_release_recursive>
 8005db6:	4628      	mov	r0, r5
 8005db8:	b003      	add	sp, #12
 8005dba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005dbe:	4b24      	ldr	r3, [pc, #144]	; (8005e50 <setvbuf+0x184>)
 8005dc0:	429c      	cmp	r4, r3
 8005dc2:	d101      	bne.n	8005dc8 <setvbuf+0xfc>
 8005dc4:	68bc      	ldr	r4, [r7, #8]
 8005dc6:	e793      	b.n	8005cf0 <setvbuf+0x24>
 8005dc8:	4b22      	ldr	r3, [pc, #136]	; (8005e54 <setvbuf+0x188>)
 8005dca:	429c      	cmp	r4, r3
 8005dcc:	bf08      	it	eq
 8005dce:	68fc      	ldreq	r4, [r7, #12]
 8005dd0:	e78e      	b.n	8005cf0 <setvbuf+0x24>
 8005dd2:	2e00      	cmp	r6, #0
 8005dd4:	d0cd      	beq.n	8005d72 <setvbuf+0xa6>
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	b913      	cbnz	r3, 8005de0 <setvbuf+0x114>
 8005dda:	4638      	mov	r0, r7
 8005ddc:	f000 f9d8 	bl	8006190 <__sinit>
 8005de0:	f1b8 0f01 	cmp.w	r8, #1
 8005de4:	bf08      	it	eq
 8005de6:	89a3      	ldrheq	r3, [r4, #12]
 8005de8:	6026      	str	r6, [r4, #0]
 8005dea:	bf04      	itt	eq
 8005dec:	f043 0301 	orreq.w	r3, r3, #1
 8005df0:	81a3      	strheq	r3, [r4, #12]
 8005df2:	89a2      	ldrh	r2, [r4, #12]
 8005df4:	f012 0308 	ands.w	r3, r2, #8
 8005df8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005dfc:	d01c      	beq.n	8005e38 <setvbuf+0x16c>
 8005dfe:	07d3      	lsls	r3, r2, #31
 8005e00:	bf41      	itttt	mi
 8005e02:	2300      	movmi	r3, #0
 8005e04:	426d      	negmi	r5, r5
 8005e06:	60a3      	strmi	r3, [r4, #8]
 8005e08:	61a5      	strmi	r5, [r4, #24]
 8005e0a:	bf58      	it	pl
 8005e0c:	60a5      	strpl	r5, [r4, #8]
 8005e0e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005e10:	f015 0501 	ands.w	r5, r5, #1
 8005e14:	d115      	bne.n	8005e42 <setvbuf+0x176>
 8005e16:	f412 7f00 	tst.w	r2, #512	; 0x200
 8005e1a:	e7c8      	b.n	8005dae <setvbuf+0xe2>
 8005e1c:	4648      	mov	r0, r9
 8005e1e:	f7ff fe55 	bl	8005acc <malloc>
 8005e22:	4606      	mov	r6, r0
 8005e24:	2800      	cmp	r0, #0
 8005e26:	d0ae      	beq.n	8005d86 <setvbuf+0xba>
 8005e28:	464d      	mov	r5, r9
 8005e2a:	89a3      	ldrh	r3, [r4, #12]
 8005e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e30:	81a3      	strh	r3, [r4, #12]
 8005e32:	e7d0      	b.n	8005dd6 <setvbuf+0x10a>
 8005e34:	2500      	movs	r5, #0
 8005e36:	e7a8      	b.n	8005d8a <setvbuf+0xbe>
 8005e38:	60a3      	str	r3, [r4, #8]
 8005e3a:	e7e8      	b.n	8005e0e <setvbuf+0x142>
 8005e3c:	f04f 35ff 	mov.w	r5, #4294967295
 8005e40:	e7b9      	b.n	8005db6 <setvbuf+0xea>
 8005e42:	2500      	movs	r5, #0
 8005e44:	e7b7      	b.n	8005db6 <setvbuf+0xea>
 8005e46:	bf00      	nop
 8005e48:	20000010 	.word	0x20000010
 8005e4c:	08006e5c 	.word	0x08006e5c
 8005e50:	08006e7c 	.word	0x08006e7c
 8005e54:	08006e3c 	.word	0x08006e3c

08005e58 <strcpy>:
 8005e58:	4603      	mov	r3, r0
 8005e5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e5e:	f803 2b01 	strb.w	r2, [r3], #1
 8005e62:	2a00      	cmp	r2, #0
 8005e64:	d1f9      	bne.n	8005e5a <strcpy+0x2>
 8005e66:	4770      	bx	lr

08005e68 <strtok>:
 8005e68:	4b16      	ldr	r3, [pc, #88]	; (8005ec4 <strtok+0x5c>)
 8005e6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e6c:	681e      	ldr	r6, [r3, #0]
 8005e6e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8005e70:	4605      	mov	r5, r0
 8005e72:	b9fc      	cbnz	r4, 8005eb4 <strtok+0x4c>
 8005e74:	2050      	movs	r0, #80	; 0x50
 8005e76:	9101      	str	r1, [sp, #4]
 8005e78:	f7ff fe28 	bl	8005acc <malloc>
 8005e7c:	9901      	ldr	r1, [sp, #4]
 8005e7e:	65b0      	str	r0, [r6, #88]	; 0x58
 8005e80:	4602      	mov	r2, r0
 8005e82:	b920      	cbnz	r0, 8005e8e <strtok+0x26>
 8005e84:	4b10      	ldr	r3, [pc, #64]	; (8005ec8 <strtok+0x60>)
 8005e86:	4811      	ldr	r0, [pc, #68]	; (8005ecc <strtok+0x64>)
 8005e88:	2157      	movs	r1, #87	; 0x57
 8005e8a:	f000 f849 	bl	8005f20 <__assert_func>
 8005e8e:	e9c0 4400 	strd	r4, r4, [r0]
 8005e92:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005e96:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005e9a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005e9e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005ea2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005ea6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005eaa:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005eae:	6184      	str	r4, [r0, #24]
 8005eb0:	7704      	strb	r4, [r0, #28]
 8005eb2:	6244      	str	r4, [r0, #36]	; 0x24
 8005eb4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	4628      	mov	r0, r5
 8005eba:	b002      	add	sp, #8
 8005ebc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005ec0:	f000 b806 	b.w	8005ed0 <__strtok_r>
 8005ec4:	20000010 	.word	0x20000010
 8005ec8:	08006d8c 	.word	0x08006d8c
 8005ecc:	08006da3 	.word	0x08006da3

08005ed0 <__strtok_r>:
 8005ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ed2:	b908      	cbnz	r0, 8005ed8 <__strtok_r+0x8>
 8005ed4:	6810      	ldr	r0, [r2, #0]
 8005ed6:	b188      	cbz	r0, 8005efc <__strtok_r+0x2c>
 8005ed8:	4604      	mov	r4, r0
 8005eda:	4620      	mov	r0, r4
 8005edc:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005ee0:	460f      	mov	r7, r1
 8005ee2:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005ee6:	b91e      	cbnz	r6, 8005ef0 <__strtok_r+0x20>
 8005ee8:	b965      	cbnz	r5, 8005f04 <__strtok_r+0x34>
 8005eea:	6015      	str	r5, [r2, #0]
 8005eec:	4628      	mov	r0, r5
 8005eee:	e005      	b.n	8005efc <__strtok_r+0x2c>
 8005ef0:	42b5      	cmp	r5, r6
 8005ef2:	d1f6      	bne.n	8005ee2 <__strtok_r+0x12>
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1f0      	bne.n	8005eda <__strtok_r+0xa>
 8005ef8:	6014      	str	r4, [r2, #0]
 8005efa:	7003      	strb	r3, [r0, #0]
 8005efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005efe:	461c      	mov	r4, r3
 8005f00:	e00c      	b.n	8005f1c <__strtok_r+0x4c>
 8005f02:	b915      	cbnz	r5, 8005f0a <__strtok_r+0x3a>
 8005f04:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005f08:	460e      	mov	r6, r1
 8005f0a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005f0e:	42ab      	cmp	r3, r5
 8005f10:	d1f7      	bne.n	8005f02 <__strtok_r+0x32>
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d0f3      	beq.n	8005efe <__strtok_r+0x2e>
 8005f16:	2300      	movs	r3, #0
 8005f18:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005f1c:	6014      	str	r4, [r2, #0]
 8005f1e:	e7ed      	b.n	8005efc <__strtok_r+0x2c>

08005f20 <__assert_func>:
 8005f20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005f22:	4614      	mov	r4, r2
 8005f24:	461a      	mov	r2, r3
 8005f26:	4b09      	ldr	r3, [pc, #36]	; (8005f4c <__assert_func+0x2c>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4605      	mov	r5, r0
 8005f2c:	68d8      	ldr	r0, [r3, #12]
 8005f2e:	b14c      	cbz	r4, 8005f44 <__assert_func+0x24>
 8005f30:	4b07      	ldr	r3, [pc, #28]	; (8005f50 <__assert_func+0x30>)
 8005f32:	9100      	str	r1, [sp, #0]
 8005f34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005f38:	4906      	ldr	r1, [pc, #24]	; (8005f54 <__assert_func+0x34>)
 8005f3a:	462b      	mov	r3, r5
 8005f3c:	f000 f9a6 	bl	800628c <fiprintf>
 8005f40:	f000 fe4e 	bl	8006be0 <abort>
 8005f44:	4b04      	ldr	r3, [pc, #16]	; (8005f58 <__assert_func+0x38>)
 8005f46:	461c      	mov	r4, r3
 8005f48:	e7f3      	b.n	8005f32 <__assert_func+0x12>
 8005f4a:	bf00      	nop
 8005f4c:	20000010 	.word	0x20000010
 8005f50:	08006e00 	.word	0x08006e00
 8005f54:	08006e0d 	.word	0x08006e0d
 8005f58:	08006e3b 	.word	0x08006e3b

08005f5c <__sflush_r>:
 8005f5c:	898a      	ldrh	r2, [r1, #12]
 8005f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f62:	4605      	mov	r5, r0
 8005f64:	0710      	lsls	r0, r2, #28
 8005f66:	460c      	mov	r4, r1
 8005f68:	d458      	bmi.n	800601c <__sflush_r+0xc0>
 8005f6a:	684b      	ldr	r3, [r1, #4]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	dc05      	bgt.n	8005f7c <__sflush_r+0x20>
 8005f70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	dc02      	bgt.n	8005f7c <__sflush_r+0x20>
 8005f76:	2000      	movs	r0, #0
 8005f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f7e:	2e00      	cmp	r6, #0
 8005f80:	d0f9      	beq.n	8005f76 <__sflush_r+0x1a>
 8005f82:	2300      	movs	r3, #0
 8005f84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005f88:	682f      	ldr	r7, [r5, #0]
 8005f8a:	602b      	str	r3, [r5, #0]
 8005f8c:	d032      	beq.n	8005ff4 <__sflush_r+0x98>
 8005f8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f90:	89a3      	ldrh	r3, [r4, #12]
 8005f92:	075a      	lsls	r2, r3, #29
 8005f94:	d505      	bpl.n	8005fa2 <__sflush_r+0x46>
 8005f96:	6863      	ldr	r3, [r4, #4]
 8005f98:	1ac0      	subs	r0, r0, r3
 8005f9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f9c:	b10b      	cbz	r3, 8005fa2 <__sflush_r+0x46>
 8005f9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005fa0:	1ac0      	subs	r0, r0, r3
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005fa8:	6a21      	ldr	r1, [r4, #32]
 8005faa:	4628      	mov	r0, r5
 8005fac:	47b0      	blx	r6
 8005fae:	1c43      	adds	r3, r0, #1
 8005fb0:	89a3      	ldrh	r3, [r4, #12]
 8005fb2:	d106      	bne.n	8005fc2 <__sflush_r+0x66>
 8005fb4:	6829      	ldr	r1, [r5, #0]
 8005fb6:	291d      	cmp	r1, #29
 8005fb8:	d82c      	bhi.n	8006014 <__sflush_r+0xb8>
 8005fba:	4a2a      	ldr	r2, [pc, #168]	; (8006064 <__sflush_r+0x108>)
 8005fbc:	40ca      	lsrs	r2, r1
 8005fbe:	07d6      	lsls	r6, r2, #31
 8005fc0:	d528      	bpl.n	8006014 <__sflush_r+0xb8>
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	6062      	str	r2, [r4, #4]
 8005fc6:	04d9      	lsls	r1, r3, #19
 8005fc8:	6922      	ldr	r2, [r4, #16]
 8005fca:	6022      	str	r2, [r4, #0]
 8005fcc:	d504      	bpl.n	8005fd8 <__sflush_r+0x7c>
 8005fce:	1c42      	adds	r2, r0, #1
 8005fd0:	d101      	bne.n	8005fd6 <__sflush_r+0x7a>
 8005fd2:	682b      	ldr	r3, [r5, #0]
 8005fd4:	b903      	cbnz	r3, 8005fd8 <__sflush_r+0x7c>
 8005fd6:	6560      	str	r0, [r4, #84]	; 0x54
 8005fd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fda:	602f      	str	r7, [r5, #0]
 8005fdc:	2900      	cmp	r1, #0
 8005fde:	d0ca      	beq.n	8005f76 <__sflush_r+0x1a>
 8005fe0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fe4:	4299      	cmp	r1, r3
 8005fe6:	d002      	beq.n	8005fee <__sflush_r+0x92>
 8005fe8:	4628      	mov	r0, r5
 8005fea:	f7ff fd7f 	bl	8005aec <_free_r>
 8005fee:	2000      	movs	r0, #0
 8005ff0:	6360      	str	r0, [r4, #52]	; 0x34
 8005ff2:	e7c1      	b.n	8005f78 <__sflush_r+0x1c>
 8005ff4:	6a21      	ldr	r1, [r4, #32]
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	4628      	mov	r0, r5
 8005ffa:	47b0      	blx	r6
 8005ffc:	1c41      	adds	r1, r0, #1
 8005ffe:	d1c7      	bne.n	8005f90 <__sflush_r+0x34>
 8006000:	682b      	ldr	r3, [r5, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d0c4      	beq.n	8005f90 <__sflush_r+0x34>
 8006006:	2b1d      	cmp	r3, #29
 8006008:	d001      	beq.n	800600e <__sflush_r+0xb2>
 800600a:	2b16      	cmp	r3, #22
 800600c:	d101      	bne.n	8006012 <__sflush_r+0xb6>
 800600e:	602f      	str	r7, [r5, #0]
 8006010:	e7b1      	b.n	8005f76 <__sflush_r+0x1a>
 8006012:	89a3      	ldrh	r3, [r4, #12]
 8006014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006018:	81a3      	strh	r3, [r4, #12]
 800601a:	e7ad      	b.n	8005f78 <__sflush_r+0x1c>
 800601c:	690f      	ldr	r7, [r1, #16]
 800601e:	2f00      	cmp	r7, #0
 8006020:	d0a9      	beq.n	8005f76 <__sflush_r+0x1a>
 8006022:	0793      	lsls	r3, r2, #30
 8006024:	680e      	ldr	r6, [r1, #0]
 8006026:	bf08      	it	eq
 8006028:	694b      	ldreq	r3, [r1, #20]
 800602a:	600f      	str	r7, [r1, #0]
 800602c:	bf18      	it	ne
 800602e:	2300      	movne	r3, #0
 8006030:	eba6 0807 	sub.w	r8, r6, r7
 8006034:	608b      	str	r3, [r1, #8]
 8006036:	f1b8 0f00 	cmp.w	r8, #0
 800603a:	dd9c      	ble.n	8005f76 <__sflush_r+0x1a>
 800603c:	6a21      	ldr	r1, [r4, #32]
 800603e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006040:	4643      	mov	r3, r8
 8006042:	463a      	mov	r2, r7
 8006044:	4628      	mov	r0, r5
 8006046:	47b0      	blx	r6
 8006048:	2800      	cmp	r0, #0
 800604a:	dc06      	bgt.n	800605a <__sflush_r+0xfe>
 800604c:	89a3      	ldrh	r3, [r4, #12]
 800604e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006052:	81a3      	strh	r3, [r4, #12]
 8006054:	f04f 30ff 	mov.w	r0, #4294967295
 8006058:	e78e      	b.n	8005f78 <__sflush_r+0x1c>
 800605a:	4407      	add	r7, r0
 800605c:	eba8 0800 	sub.w	r8, r8, r0
 8006060:	e7e9      	b.n	8006036 <__sflush_r+0xda>
 8006062:	bf00      	nop
 8006064:	20400001 	.word	0x20400001

08006068 <_fflush_r>:
 8006068:	b538      	push	{r3, r4, r5, lr}
 800606a:	690b      	ldr	r3, [r1, #16]
 800606c:	4605      	mov	r5, r0
 800606e:	460c      	mov	r4, r1
 8006070:	b913      	cbnz	r3, 8006078 <_fflush_r+0x10>
 8006072:	2500      	movs	r5, #0
 8006074:	4628      	mov	r0, r5
 8006076:	bd38      	pop	{r3, r4, r5, pc}
 8006078:	b118      	cbz	r0, 8006082 <_fflush_r+0x1a>
 800607a:	6983      	ldr	r3, [r0, #24]
 800607c:	b90b      	cbnz	r3, 8006082 <_fflush_r+0x1a>
 800607e:	f000 f887 	bl	8006190 <__sinit>
 8006082:	4b14      	ldr	r3, [pc, #80]	; (80060d4 <_fflush_r+0x6c>)
 8006084:	429c      	cmp	r4, r3
 8006086:	d11b      	bne.n	80060c0 <_fflush_r+0x58>
 8006088:	686c      	ldr	r4, [r5, #4]
 800608a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d0ef      	beq.n	8006072 <_fflush_r+0xa>
 8006092:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006094:	07d0      	lsls	r0, r2, #31
 8006096:	d404      	bmi.n	80060a2 <_fflush_r+0x3a>
 8006098:	0599      	lsls	r1, r3, #22
 800609a:	d402      	bmi.n	80060a2 <_fflush_r+0x3a>
 800609c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800609e:	f000 f927 	bl	80062f0 <__retarget_lock_acquire_recursive>
 80060a2:	4628      	mov	r0, r5
 80060a4:	4621      	mov	r1, r4
 80060a6:	f7ff ff59 	bl	8005f5c <__sflush_r>
 80060aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060ac:	07da      	lsls	r2, r3, #31
 80060ae:	4605      	mov	r5, r0
 80060b0:	d4e0      	bmi.n	8006074 <_fflush_r+0xc>
 80060b2:	89a3      	ldrh	r3, [r4, #12]
 80060b4:	059b      	lsls	r3, r3, #22
 80060b6:	d4dd      	bmi.n	8006074 <_fflush_r+0xc>
 80060b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060ba:	f000 f91a 	bl	80062f2 <__retarget_lock_release_recursive>
 80060be:	e7d9      	b.n	8006074 <_fflush_r+0xc>
 80060c0:	4b05      	ldr	r3, [pc, #20]	; (80060d8 <_fflush_r+0x70>)
 80060c2:	429c      	cmp	r4, r3
 80060c4:	d101      	bne.n	80060ca <_fflush_r+0x62>
 80060c6:	68ac      	ldr	r4, [r5, #8]
 80060c8:	e7df      	b.n	800608a <_fflush_r+0x22>
 80060ca:	4b04      	ldr	r3, [pc, #16]	; (80060dc <_fflush_r+0x74>)
 80060cc:	429c      	cmp	r4, r3
 80060ce:	bf08      	it	eq
 80060d0:	68ec      	ldreq	r4, [r5, #12]
 80060d2:	e7da      	b.n	800608a <_fflush_r+0x22>
 80060d4:	08006e5c 	.word	0x08006e5c
 80060d8:	08006e7c 	.word	0x08006e7c
 80060dc:	08006e3c 	.word	0x08006e3c

080060e0 <std>:
 80060e0:	2300      	movs	r3, #0
 80060e2:	b510      	push	{r4, lr}
 80060e4:	4604      	mov	r4, r0
 80060e6:	e9c0 3300 	strd	r3, r3, [r0]
 80060ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060ee:	6083      	str	r3, [r0, #8]
 80060f0:	8181      	strh	r1, [r0, #12]
 80060f2:	6643      	str	r3, [r0, #100]	; 0x64
 80060f4:	81c2      	strh	r2, [r0, #14]
 80060f6:	6183      	str	r3, [r0, #24]
 80060f8:	4619      	mov	r1, r3
 80060fa:	2208      	movs	r2, #8
 80060fc:	305c      	adds	r0, #92	; 0x5c
 80060fe:	f7ff fced 	bl	8005adc <memset>
 8006102:	4b05      	ldr	r3, [pc, #20]	; (8006118 <std+0x38>)
 8006104:	6263      	str	r3, [r4, #36]	; 0x24
 8006106:	4b05      	ldr	r3, [pc, #20]	; (800611c <std+0x3c>)
 8006108:	62a3      	str	r3, [r4, #40]	; 0x28
 800610a:	4b05      	ldr	r3, [pc, #20]	; (8006120 <std+0x40>)
 800610c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800610e:	4b05      	ldr	r3, [pc, #20]	; (8006124 <std+0x44>)
 8006110:	6224      	str	r4, [r4, #32]
 8006112:	6323      	str	r3, [r4, #48]	; 0x30
 8006114:	bd10      	pop	{r4, pc}
 8006116:	bf00      	nop
 8006118:	080069b5 	.word	0x080069b5
 800611c:	080069d7 	.word	0x080069d7
 8006120:	08006a0f 	.word	0x08006a0f
 8006124:	08006a33 	.word	0x08006a33

08006128 <_cleanup_r>:
 8006128:	4901      	ldr	r1, [pc, #4]	; (8006130 <_cleanup_r+0x8>)
 800612a:	f000 b8c1 	b.w	80062b0 <_fwalk_reent>
 800612e:	bf00      	nop
 8006130:	08006069 	.word	0x08006069

08006134 <__sfmoreglue>:
 8006134:	b570      	push	{r4, r5, r6, lr}
 8006136:	2268      	movs	r2, #104	; 0x68
 8006138:	1e4d      	subs	r5, r1, #1
 800613a:	4355      	muls	r5, r2
 800613c:	460e      	mov	r6, r1
 800613e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006142:	f7ff fd3f 	bl	8005bc4 <_malloc_r>
 8006146:	4604      	mov	r4, r0
 8006148:	b140      	cbz	r0, 800615c <__sfmoreglue+0x28>
 800614a:	2100      	movs	r1, #0
 800614c:	e9c0 1600 	strd	r1, r6, [r0]
 8006150:	300c      	adds	r0, #12
 8006152:	60a0      	str	r0, [r4, #8]
 8006154:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006158:	f7ff fcc0 	bl	8005adc <memset>
 800615c:	4620      	mov	r0, r4
 800615e:	bd70      	pop	{r4, r5, r6, pc}

08006160 <__sfp_lock_acquire>:
 8006160:	4801      	ldr	r0, [pc, #4]	; (8006168 <__sfp_lock_acquire+0x8>)
 8006162:	f000 b8c5 	b.w	80062f0 <__retarget_lock_acquire_recursive>
 8006166:	bf00      	nop
 8006168:	200005ad 	.word	0x200005ad

0800616c <__sfp_lock_release>:
 800616c:	4801      	ldr	r0, [pc, #4]	; (8006174 <__sfp_lock_release+0x8>)
 800616e:	f000 b8c0 	b.w	80062f2 <__retarget_lock_release_recursive>
 8006172:	bf00      	nop
 8006174:	200005ad 	.word	0x200005ad

08006178 <__sinit_lock_acquire>:
 8006178:	4801      	ldr	r0, [pc, #4]	; (8006180 <__sinit_lock_acquire+0x8>)
 800617a:	f000 b8b9 	b.w	80062f0 <__retarget_lock_acquire_recursive>
 800617e:	bf00      	nop
 8006180:	200005ae 	.word	0x200005ae

08006184 <__sinit_lock_release>:
 8006184:	4801      	ldr	r0, [pc, #4]	; (800618c <__sinit_lock_release+0x8>)
 8006186:	f000 b8b4 	b.w	80062f2 <__retarget_lock_release_recursive>
 800618a:	bf00      	nop
 800618c:	200005ae 	.word	0x200005ae

08006190 <__sinit>:
 8006190:	b510      	push	{r4, lr}
 8006192:	4604      	mov	r4, r0
 8006194:	f7ff fff0 	bl	8006178 <__sinit_lock_acquire>
 8006198:	69a3      	ldr	r3, [r4, #24]
 800619a:	b11b      	cbz	r3, 80061a4 <__sinit+0x14>
 800619c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061a0:	f7ff bff0 	b.w	8006184 <__sinit_lock_release>
 80061a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80061a8:	6523      	str	r3, [r4, #80]	; 0x50
 80061aa:	4b13      	ldr	r3, [pc, #76]	; (80061f8 <__sinit+0x68>)
 80061ac:	4a13      	ldr	r2, [pc, #76]	; (80061fc <__sinit+0x6c>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80061b2:	42a3      	cmp	r3, r4
 80061b4:	bf04      	itt	eq
 80061b6:	2301      	moveq	r3, #1
 80061b8:	61a3      	streq	r3, [r4, #24]
 80061ba:	4620      	mov	r0, r4
 80061bc:	f000 f820 	bl	8006200 <__sfp>
 80061c0:	6060      	str	r0, [r4, #4]
 80061c2:	4620      	mov	r0, r4
 80061c4:	f000 f81c 	bl	8006200 <__sfp>
 80061c8:	60a0      	str	r0, [r4, #8]
 80061ca:	4620      	mov	r0, r4
 80061cc:	f000 f818 	bl	8006200 <__sfp>
 80061d0:	2200      	movs	r2, #0
 80061d2:	60e0      	str	r0, [r4, #12]
 80061d4:	2104      	movs	r1, #4
 80061d6:	6860      	ldr	r0, [r4, #4]
 80061d8:	f7ff ff82 	bl	80060e0 <std>
 80061dc:	68a0      	ldr	r0, [r4, #8]
 80061de:	2201      	movs	r2, #1
 80061e0:	2109      	movs	r1, #9
 80061e2:	f7ff ff7d 	bl	80060e0 <std>
 80061e6:	68e0      	ldr	r0, [r4, #12]
 80061e8:	2202      	movs	r2, #2
 80061ea:	2112      	movs	r1, #18
 80061ec:	f7ff ff78 	bl	80060e0 <std>
 80061f0:	2301      	movs	r3, #1
 80061f2:	61a3      	str	r3, [r4, #24]
 80061f4:	e7d2      	b.n	800619c <__sinit+0xc>
 80061f6:	bf00      	nop
 80061f8:	08006d88 	.word	0x08006d88
 80061fc:	08006129 	.word	0x08006129

08006200 <__sfp>:
 8006200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006202:	4607      	mov	r7, r0
 8006204:	f7ff ffac 	bl	8006160 <__sfp_lock_acquire>
 8006208:	4b1e      	ldr	r3, [pc, #120]	; (8006284 <__sfp+0x84>)
 800620a:	681e      	ldr	r6, [r3, #0]
 800620c:	69b3      	ldr	r3, [r6, #24]
 800620e:	b913      	cbnz	r3, 8006216 <__sfp+0x16>
 8006210:	4630      	mov	r0, r6
 8006212:	f7ff ffbd 	bl	8006190 <__sinit>
 8006216:	3648      	adds	r6, #72	; 0x48
 8006218:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800621c:	3b01      	subs	r3, #1
 800621e:	d503      	bpl.n	8006228 <__sfp+0x28>
 8006220:	6833      	ldr	r3, [r6, #0]
 8006222:	b30b      	cbz	r3, 8006268 <__sfp+0x68>
 8006224:	6836      	ldr	r6, [r6, #0]
 8006226:	e7f7      	b.n	8006218 <__sfp+0x18>
 8006228:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800622c:	b9d5      	cbnz	r5, 8006264 <__sfp+0x64>
 800622e:	4b16      	ldr	r3, [pc, #88]	; (8006288 <__sfp+0x88>)
 8006230:	60e3      	str	r3, [r4, #12]
 8006232:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006236:	6665      	str	r5, [r4, #100]	; 0x64
 8006238:	f000 f859 	bl	80062ee <__retarget_lock_init_recursive>
 800623c:	f7ff ff96 	bl	800616c <__sfp_lock_release>
 8006240:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006244:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006248:	6025      	str	r5, [r4, #0]
 800624a:	61a5      	str	r5, [r4, #24]
 800624c:	2208      	movs	r2, #8
 800624e:	4629      	mov	r1, r5
 8006250:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006254:	f7ff fc42 	bl	8005adc <memset>
 8006258:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800625c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006260:	4620      	mov	r0, r4
 8006262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006264:	3468      	adds	r4, #104	; 0x68
 8006266:	e7d9      	b.n	800621c <__sfp+0x1c>
 8006268:	2104      	movs	r1, #4
 800626a:	4638      	mov	r0, r7
 800626c:	f7ff ff62 	bl	8006134 <__sfmoreglue>
 8006270:	4604      	mov	r4, r0
 8006272:	6030      	str	r0, [r6, #0]
 8006274:	2800      	cmp	r0, #0
 8006276:	d1d5      	bne.n	8006224 <__sfp+0x24>
 8006278:	f7ff ff78 	bl	800616c <__sfp_lock_release>
 800627c:	230c      	movs	r3, #12
 800627e:	603b      	str	r3, [r7, #0]
 8006280:	e7ee      	b.n	8006260 <__sfp+0x60>
 8006282:	bf00      	nop
 8006284:	08006d88 	.word	0x08006d88
 8006288:	ffff0001 	.word	0xffff0001

0800628c <fiprintf>:
 800628c:	b40e      	push	{r1, r2, r3}
 800628e:	b503      	push	{r0, r1, lr}
 8006290:	4601      	mov	r1, r0
 8006292:	ab03      	add	r3, sp, #12
 8006294:	4805      	ldr	r0, [pc, #20]	; (80062ac <fiprintf+0x20>)
 8006296:	f853 2b04 	ldr.w	r2, [r3], #4
 800629a:	6800      	ldr	r0, [r0, #0]
 800629c:	9301      	str	r3, [sp, #4]
 800629e:	f000 f8c5 	bl	800642c <_vfiprintf_r>
 80062a2:	b002      	add	sp, #8
 80062a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80062a8:	b003      	add	sp, #12
 80062aa:	4770      	bx	lr
 80062ac:	20000010 	.word	0x20000010

080062b0 <_fwalk_reent>:
 80062b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062b4:	4606      	mov	r6, r0
 80062b6:	4688      	mov	r8, r1
 80062b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80062bc:	2700      	movs	r7, #0
 80062be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80062c2:	f1b9 0901 	subs.w	r9, r9, #1
 80062c6:	d505      	bpl.n	80062d4 <_fwalk_reent+0x24>
 80062c8:	6824      	ldr	r4, [r4, #0]
 80062ca:	2c00      	cmp	r4, #0
 80062cc:	d1f7      	bne.n	80062be <_fwalk_reent+0xe>
 80062ce:	4638      	mov	r0, r7
 80062d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062d4:	89ab      	ldrh	r3, [r5, #12]
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d907      	bls.n	80062ea <_fwalk_reent+0x3a>
 80062da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80062de:	3301      	adds	r3, #1
 80062e0:	d003      	beq.n	80062ea <_fwalk_reent+0x3a>
 80062e2:	4629      	mov	r1, r5
 80062e4:	4630      	mov	r0, r6
 80062e6:	47c0      	blx	r8
 80062e8:	4307      	orrs	r7, r0
 80062ea:	3568      	adds	r5, #104	; 0x68
 80062ec:	e7e9      	b.n	80062c2 <_fwalk_reent+0x12>

080062ee <__retarget_lock_init_recursive>:
 80062ee:	4770      	bx	lr

080062f0 <__retarget_lock_acquire_recursive>:
 80062f0:	4770      	bx	lr

080062f2 <__retarget_lock_release_recursive>:
 80062f2:	4770      	bx	lr

080062f4 <__swhatbuf_r>:
 80062f4:	b570      	push	{r4, r5, r6, lr}
 80062f6:	460e      	mov	r6, r1
 80062f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062fc:	2900      	cmp	r1, #0
 80062fe:	b096      	sub	sp, #88	; 0x58
 8006300:	4614      	mov	r4, r2
 8006302:	461d      	mov	r5, r3
 8006304:	da08      	bge.n	8006318 <__swhatbuf_r+0x24>
 8006306:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	602a      	str	r2, [r5, #0]
 800630e:	061a      	lsls	r2, r3, #24
 8006310:	d410      	bmi.n	8006334 <__swhatbuf_r+0x40>
 8006312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006316:	e00e      	b.n	8006336 <__swhatbuf_r+0x42>
 8006318:	466a      	mov	r2, sp
 800631a:	f000 fc79 	bl	8006c10 <_fstat_r>
 800631e:	2800      	cmp	r0, #0
 8006320:	dbf1      	blt.n	8006306 <__swhatbuf_r+0x12>
 8006322:	9a01      	ldr	r2, [sp, #4]
 8006324:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006328:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800632c:	425a      	negs	r2, r3
 800632e:	415a      	adcs	r2, r3
 8006330:	602a      	str	r2, [r5, #0]
 8006332:	e7ee      	b.n	8006312 <__swhatbuf_r+0x1e>
 8006334:	2340      	movs	r3, #64	; 0x40
 8006336:	2000      	movs	r0, #0
 8006338:	6023      	str	r3, [r4, #0]
 800633a:	b016      	add	sp, #88	; 0x58
 800633c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006340 <__smakebuf_r>:
 8006340:	898b      	ldrh	r3, [r1, #12]
 8006342:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006344:	079d      	lsls	r5, r3, #30
 8006346:	4606      	mov	r6, r0
 8006348:	460c      	mov	r4, r1
 800634a:	d507      	bpl.n	800635c <__smakebuf_r+0x1c>
 800634c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006350:	6023      	str	r3, [r4, #0]
 8006352:	6123      	str	r3, [r4, #16]
 8006354:	2301      	movs	r3, #1
 8006356:	6163      	str	r3, [r4, #20]
 8006358:	b002      	add	sp, #8
 800635a:	bd70      	pop	{r4, r5, r6, pc}
 800635c:	ab01      	add	r3, sp, #4
 800635e:	466a      	mov	r2, sp
 8006360:	f7ff ffc8 	bl	80062f4 <__swhatbuf_r>
 8006364:	9900      	ldr	r1, [sp, #0]
 8006366:	4605      	mov	r5, r0
 8006368:	4630      	mov	r0, r6
 800636a:	f7ff fc2b 	bl	8005bc4 <_malloc_r>
 800636e:	b948      	cbnz	r0, 8006384 <__smakebuf_r+0x44>
 8006370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006374:	059a      	lsls	r2, r3, #22
 8006376:	d4ef      	bmi.n	8006358 <__smakebuf_r+0x18>
 8006378:	f023 0303 	bic.w	r3, r3, #3
 800637c:	f043 0302 	orr.w	r3, r3, #2
 8006380:	81a3      	strh	r3, [r4, #12]
 8006382:	e7e3      	b.n	800634c <__smakebuf_r+0xc>
 8006384:	4b0d      	ldr	r3, [pc, #52]	; (80063bc <__smakebuf_r+0x7c>)
 8006386:	62b3      	str	r3, [r6, #40]	; 0x28
 8006388:	89a3      	ldrh	r3, [r4, #12]
 800638a:	6020      	str	r0, [r4, #0]
 800638c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006390:	81a3      	strh	r3, [r4, #12]
 8006392:	9b00      	ldr	r3, [sp, #0]
 8006394:	6163      	str	r3, [r4, #20]
 8006396:	9b01      	ldr	r3, [sp, #4]
 8006398:	6120      	str	r0, [r4, #16]
 800639a:	b15b      	cbz	r3, 80063b4 <__smakebuf_r+0x74>
 800639c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063a0:	4630      	mov	r0, r6
 80063a2:	f000 fc47 	bl	8006c34 <_isatty_r>
 80063a6:	b128      	cbz	r0, 80063b4 <__smakebuf_r+0x74>
 80063a8:	89a3      	ldrh	r3, [r4, #12]
 80063aa:	f023 0303 	bic.w	r3, r3, #3
 80063ae:	f043 0301 	orr.w	r3, r3, #1
 80063b2:	81a3      	strh	r3, [r4, #12]
 80063b4:	89a0      	ldrh	r0, [r4, #12]
 80063b6:	4305      	orrs	r5, r0
 80063b8:	81a5      	strh	r5, [r4, #12]
 80063ba:	e7cd      	b.n	8006358 <__smakebuf_r+0x18>
 80063bc:	08006129 	.word	0x08006129

080063c0 <__malloc_lock>:
 80063c0:	4801      	ldr	r0, [pc, #4]	; (80063c8 <__malloc_lock+0x8>)
 80063c2:	f7ff bf95 	b.w	80062f0 <__retarget_lock_acquire_recursive>
 80063c6:	bf00      	nop
 80063c8:	200005ac 	.word	0x200005ac

080063cc <__malloc_unlock>:
 80063cc:	4801      	ldr	r0, [pc, #4]	; (80063d4 <__malloc_unlock+0x8>)
 80063ce:	f7ff bf90 	b.w	80062f2 <__retarget_lock_release_recursive>
 80063d2:	bf00      	nop
 80063d4:	200005ac 	.word	0x200005ac

080063d8 <__sfputc_r>:
 80063d8:	6893      	ldr	r3, [r2, #8]
 80063da:	3b01      	subs	r3, #1
 80063dc:	2b00      	cmp	r3, #0
 80063de:	b410      	push	{r4}
 80063e0:	6093      	str	r3, [r2, #8]
 80063e2:	da08      	bge.n	80063f6 <__sfputc_r+0x1e>
 80063e4:	6994      	ldr	r4, [r2, #24]
 80063e6:	42a3      	cmp	r3, r4
 80063e8:	db01      	blt.n	80063ee <__sfputc_r+0x16>
 80063ea:	290a      	cmp	r1, #10
 80063ec:	d103      	bne.n	80063f6 <__sfputc_r+0x1e>
 80063ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063f2:	f000 bb23 	b.w	8006a3c <__swbuf_r>
 80063f6:	6813      	ldr	r3, [r2, #0]
 80063f8:	1c58      	adds	r0, r3, #1
 80063fa:	6010      	str	r0, [r2, #0]
 80063fc:	7019      	strb	r1, [r3, #0]
 80063fe:	4608      	mov	r0, r1
 8006400:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006404:	4770      	bx	lr

08006406 <__sfputs_r>:
 8006406:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006408:	4606      	mov	r6, r0
 800640a:	460f      	mov	r7, r1
 800640c:	4614      	mov	r4, r2
 800640e:	18d5      	adds	r5, r2, r3
 8006410:	42ac      	cmp	r4, r5
 8006412:	d101      	bne.n	8006418 <__sfputs_r+0x12>
 8006414:	2000      	movs	r0, #0
 8006416:	e007      	b.n	8006428 <__sfputs_r+0x22>
 8006418:	f814 1b01 	ldrb.w	r1, [r4], #1
 800641c:	463a      	mov	r2, r7
 800641e:	4630      	mov	r0, r6
 8006420:	f7ff ffda 	bl	80063d8 <__sfputc_r>
 8006424:	1c43      	adds	r3, r0, #1
 8006426:	d1f3      	bne.n	8006410 <__sfputs_r+0xa>
 8006428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800642c <_vfiprintf_r>:
 800642c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006430:	460d      	mov	r5, r1
 8006432:	b09d      	sub	sp, #116	; 0x74
 8006434:	4614      	mov	r4, r2
 8006436:	4698      	mov	r8, r3
 8006438:	4606      	mov	r6, r0
 800643a:	b118      	cbz	r0, 8006444 <_vfiprintf_r+0x18>
 800643c:	6983      	ldr	r3, [r0, #24]
 800643e:	b90b      	cbnz	r3, 8006444 <_vfiprintf_r+0x18>
 8006440:	f7ff fea6 	bl	8006190 <__sinit>
 8006444:	4b89      	ldr	r3, [pc, #548]	; (800666c <_vfiprintf_r+0x240>)
 8006446:	429d      	cmp	r5, r3
 8006448:	d11b      	bne.n	8006482 <_vfiprintf_r+0x56>
 800644a:	6875      	ldr	r5, [r6, #4]
 800644c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800644e:	07d9      	lsls	r1, r3, #31
 8006450:	d405      	bmi.n	800645e <_vfiprintf_r+0x32>
 8006452:	89ab      	ldrh	r3, [r5, #12]
 8006454:	059a      	lsls	r2, r3, #22
 8006456:	d402      	bmi.n	800645e <_vfiprintf_r+0x32>
 8006458:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800645a:	f7ff ff49 	bl	80062f0 <__retarget_lock_acquire_recursive>
 800645e:	89ab      	ldrh	r3, [r5, #12]
 8006460:	071b      	lsls	r3, r3, #28
 8006462:	d501      	bpl.n	8006468 <_vfiprintf_r+0x3c>
 8006464:	692b      	ldr	r3, [r5, #16]
 8006466:	b9eb      	cbnz	r3, 80064a4 <_vfiprintf_r+0x78>
 8006468:	4629      	mov	r1, r5
 800646a:	4630      	mov	r0, r6
 800646c:	f000 fb4a 	bl	8006b04 <__swsetup_r>
 8006470:	b1c0      	cbz	r0, 80064a4 <_vfiprintf_r+0x78>
 8006472:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006474:	07dc      	lsls	r4, r3, #31
 8006476:	d50e      	bpl.n	8006496 <_vfiprintf_r+0x6a>
 8006478:	f04f 30ff 	mov.w	r0, #4294967295
 800647c:	b01d      	add	sp, #116	; 0x74
 800647e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006482:	4b7b      	ldr	r3, [pc, #492]	; (8006670 <_vfiprintf_r+0x244>)
 8006484:	429d      	cmp	r5, r3
 8006486:	d101      	bne.n	800648c <_vfiprintf_r+0x60>
 8006488:	68b5      	ldr	r5, [r6, #8]
 800648a:	e7df      	b.n	800644c <_vfiprintf_r+0x20>
 800648c:	4b79      	ldr	r3, [pc, #484]	; (8006674 <_vfiprintf_r+0x248>)
 800648e:	429d      	cmp	r5, r3
 8006490:	bf08      	it	eq
 8006492:	68f5      	ldreq	r5, [r6, #12]
 8006494:	e7da      	b.n	800644c <_vfiprintf_r+0x20>
 8006496:	89ab      	ldrh	r3, [r5, #12]
 8006498:	0598      	lsls	r0, r3, #22
 800649a:	d4ed      	bmi.n	8006478 <_vfiprintf_r+0x4c>
 800649c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800649e:	f7ff ff28 	bl	80062f2 <__retarget_lock_release_recursive>
 80064a2:	e7e9      	b.n	8006478 <_vfiprintf_r+0x4c>
 80064a4:	2300      	movs	r3, #0
 80064a6:	9309      	str	r3, [sp, #36]	; 0x24
 80064a8:	2320      	movs	r3, #32
 80064aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80064b2:	2330      	movs	r3, #48	; 0x30
 80064b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006678 <_vfiprintf_r+0x24c>
 80064b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064bc:	f04f 0901 	mov.w	r9, #1
 80064c0:	4623      	mov	r3, r4
 80064c2:	469a      	mov	sl, r3
 80064c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064c8:	b10a      	cbz	r2, 80064ce <_vfiprintf_r+0xa2>
 80064ca:	2a25      	cmp	r2, #37	; 0x25
 80064cc:	d1f9      	bne.n	80064c2 <_vfiprintf_r+0x96>
 80064ce:	ebba 0b04 	subs.w	fp, sl, r4
 80064d2:	d00b      	beq.n	80064ec <_vfiprintf_r+0xc0>
 80064d4:	465b      	mov	r3, fp
 80064d6:	4622      	mov	r2, r4
 80064d8:	4629      	mov	r1, r5
 80064da:	4630      	mov	r0, r6
 80064dc:	f7ff ff93 	bl	8006406 <__sfputs_r>
 80064e0:	3001      	adds	r0, #1
 80064e2:	f000 80aa 	beq.w	800663a <_vfiprintf_r+0x20e>
 80064e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064e8:	445a      	add	r2, fp
 80064ea:	9209      	str	r2, [sp, #36]	; 0x24
 80064ec:	f89a 3000 	ldrb.w	r3, [sl]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f000 80a2 	beq.w	800663a <_vfiprintf_r+0x20e>
 80064f6:	2300      	movs	r3, #0
 80064f8:	f04f 32ff 	mov.w	r2, #4294967295
 80064fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006500:	f10a 0a01 	add.w	sl, sl, #1
 8006504:	9304      	str	r3, [sp, #16]
 8006506:	9307      	str	r3, [sp, #28]
 8006508:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800650c:	931a      	str	r3, [sp, #104]	; 0x68
 800650e:	4654      	mov	r4, sl
 8006510:	2205      	movs	r2, #5
 8006512:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006516:	4858      	ldr	r0, [pc, #352]	; (8006678 <_vfiprintf_r+0x24c>)
 8006518:	f7f9 feaa 	bl	8000270 <memchr>
 800651c:	9a04      	ldr	r2, [sp, #16]
 800651e:	b9d8      	cbnz	r0, 8006558 <_vfiprintf_r+0x12c>
 8006520:	06d1      	lsls	r1, r2, #27
 8006522:	bf44      	itt	mi
 8006524:	2320      	movmi	r3, #32
 8006526:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800652a:	0713      	lsls	r3, r2, #28
 800652c:	bf44      	itt	mi
 800652e:	232b      	movmi	r3, #43	; 0x2b
 8006530:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006534:	f89a 3000 	ldrb.w	r3, [sl]
 8006538:	2b2a      	cmp	r3, #42	; 0x2a
 800653a:	d015      	beq.n	8006568 <_vfiprintf_r+0x13c>
 800653c:	9a07      	ldr	r2, [sp, #28]
 800653e:	4654      	mov	r4, sl
 8006540:	2000      	movs	r0, #0
 8006542:	f04f 0c0a 	mov.w	ip, #10
 8006546:	4621      	mov	r1, r4
 8006548:	f811 3b01 	ldrb.w	r3, [r1], #1
 800654c:	3b30      	subs	r3, #48	; 0x30
 800654e:	2b09      	cmp	r3, #9
 8006550:	d94e      	bls.n	80065f0 <_vfiprintf_r+0x1c4>
 8006552:	b1b0      	cbz	r0, 8006582 <_vfiprintf_r+0x156>
 8006554:	9207      	str	r2, [sp, #28]
 8006556:	e014      	b.n	8006582 <_vfiprintf_r+0x156>
 8006558:	eba0 0308 	sub.w	r3, r0, r8
 800655c:	fa09 f303 	lsl.w	r3, r9, r3
 8006560:	4313      	orrs	r3, r2
 8006562:	9304      	str	r3, [sp, #16]
 8006564:	46a2      	mov	sl, r4
 8006566:	e7d2      	b.n	800650e <_vfiprintf_r+0xe2>
 8006568:	9b03      	ldr	r3, [sp, #12]
 800656a:	1d19      	adds	r1, r3, #4
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	9103      	str	r1, [sp, #12]
 8006570:	2b00      	cmp	r3, #0
 8006572:	bfbb      	ittet	lt
 8006574:	425b      	neglt	r3, r3
 8006576:	f042 0202 	orrlt.w	r2, r2, #2
 800657a:	9307      	strge	r3, [sp, #28]
 800657c:	9307      	strlt	r3, [sp, #28]
 800657e:	bfb8      	it	lt
 8006580:	9204      	strlt	r2, [sp, #16]
 8006582:	7823      	ldrb	r3, [r4, #0]
 8006584:	2b2e      	cmp	r3, #46	; 0x2e
 8006586:	d10c      	bne.n	80065a2 <_vfiprintf_r+0x176>
 8006588:	7863      	ldrb	r3, [r4, #1]
 800658a:	2b2a      	cmp	r3, #42	; 0x2a
 800658c:	d135      	bne.n	80065fa <_vfiprintf_r+0x1ce>
 800658e:	9b03      	ldr	r3, [sp, #12]
 8006590:	1d1a      	adds	r2, r3, #4
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	9203      	str	r2, [sp, #12]
 8006596:	2b00      	cmp	r3, #0
 8006598:	bfb8      	it	lt
 800659a:	f04f 33ff 	movlt.w	r3, #4294967295
 800659e:	3402      	adds	r4, #2
 80065a0:	9305      	str	r3, [sp, #20]
 80065a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006688 <_vfiprintf_r+0x25c>
 80065a6:	7821      	ldrb	r1, [r4, #0]
 80065a8:	2203      	movs	r2, #3
 80065aa:	4650      	mov	r0, sl
 80065ac:	f7f9 fe60 	bl	8000270 <memchr>
 80065b0:	b140      	cbz	r0, 80065c4 <_vfiprintf_r+0x198>
 80065b2:	2340      	movs	r3, #64	; 0x40
 80065b4:	eba0 000a 	sub.w	r0, r0, sl
 80065b8:	fa03 f000 	lsl.w	r0, r3, r0
 80065bc:	9b04      	ldr	r3, [sp, #16]
 80065be:	4303      	orrs	r3, r0
 80065c0:	3401      	adds	r4, #1
 80065c2:	9304      	str	r3, [sp, #16]
 80065c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065c8:	482c      	ldr	r0, [pc, #176]	; (800667c <_vfiprintf_r+0x250>)
 80065ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065ce:	2206      	movs	r2, #6
 80065d0:	f7f9 fe4e 	bl	8000270 <memchr>
 80065d4:	2800      	cmp	r0, #0
 80065d6:	d03f      	beq.n	8006658 <_vfiprintf_r+0x22c>
 80065d8:	4b29      	ldr	r3, [pc, #164]	; (8006680 <_vfiprintf_r+0x254>)
 80065da:	bb1b      	cbnz	r3, 8006624 <_vfiprintf_r+0x1f8>
 80065dc:	9b03      	ldr	r3, [sp, #12]
 80065de:	3307      	adds	r3, #7
 80065e0:	f023 0307 	bic.w	r3, r3, #7
 80065e4:	3308      	adds	r3, #8
 80065e6:	9303      	str	r3, [sp, #12]
 80065e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065ea:	443b      	add	r3, r7
 80065ec:	9309      	str	r3, [sp, #36]	; 0x24
 80065ee:	e767      	b.n	80064c0 <_vfiprintf_r+0x94>
 80065f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80065f4:	460c      	mov	r4, r1
 80065f6:	2001      	movs	r0, #1
 80065f8:	e7a5      	b.n	8006546 <_vfiprintf_r+0x11a>
 80065fa:	2300      	movs	r3, #0
 80065fc:	3401      	adds	r4, #1
 80065fe:	9305      	str	r3, [sp, #20]
 8006600:	4619      	mov	r1, r3
 8006602:	f04f 0c0a 	mov.w	ip, #10
 8006606:	4620      	mov	r0, r4
 8006608:	f810 2b01 	ldrb.w	r2, [r0], #1
 800660c:	3a30      	subs	r2, #48	; 0x30
 800660e:	2a09      	cmp	r2, #9
 8006610:	d903      	bls.n	800661a <_vfiprintf_r+0x1ee>
 8006612:	2b00      	cmp	r3, #0
 8006614:	d0c5      	beq.n	80065a2 <_vfiprintf_r+0x176>
 8006616:	9105      	str	r1, [sp, #20]
 8006618:	e7c3      	b.n	80065a2 <_vfiprintf_r+0x176>
 800661a:	fb0c 2101 	mla	r1, ip, r1, r2
 800661e:	4604      	mov	r4, r0
 8006620:	2301      	movs	r3, #1
 8006622:	e7f0      	b.n	8006606 <_vfiprintf_r+0x1da>
 8006624:	ab03      	add	r3, sp, #12
 8006626:	9300      	str	r3, [sp, #0]
 8006628:	462a      	mov	r2, r5
 800662a:	4b16      	ldr	r3, [pc, #88]	; (8006684 <_vfiprintf_r+0x258>)
 800662c:	a904      	add	r1, sp, #16
 800662e:	4630      	mov	r0, r6
 8006630:	f3af 8000 	nop.w
 8006634:	4607      	mov	r7, r0
 8006636:	1c78      	adds	r0, r7, #1
 8006638:	d1d6      	bne.n	80065e8 <_vfiprintf_r+0x1bc>
 800663a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800663c:	07d9      	lsls	r1, r3, #31
 800663e:	d405      	bmi.n	800664c <_vfiprintf_r+0x220>
 8006640:	89ab      	ldrh	r3, [r5, #12]
 8006642:	059a      	lsls	r2, r3, #22
 8006644:	d402      	bmi.n	800664c <_vfiprintf_r+0x220>
 8006646:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006648:	f7ff fe53 	bl	80062f2 <__retarget_lock_release_recursive>
 800664c:	89ab      	ldrh	r3, [r5, #12]
 800664e:	065b      	lsls	r3, r3, #25
 8006650:	f53f af12 	bmi.w	8006478 <_vfiprintf_r+0x4c>
 8006654:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006656:	e711      	b.n	800647c <_vfiprintf_r+0x50>
 8006658:	ab03      	add	r3, sp, #12
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	462a      	mov	r2, r5
 800665e:	4b09      	ldr	r3, [pc, #36]	; (8006684 <_vfiprintf_r+0x258>)
 8006660:	a904      	add	r1, sp, #16
 8006662:	4630      	mov	r0, r6
 8006664:	f000 f880 	bl	8006768 <_printf_i>
 8006668:	e7e4      	b.n	8006634 <_vfiprintf_r+0x208>
 800666a:	bf00      	nop
 800666c:	08006e5c 	.word	0x08006e5c
 8006670:	08006e7c 	.word	0x08006e7c
 8006674:	08006e3c 	.word	0x08006e3c
 8006678:	08006e9c 	.word	0x08006e9c
 800667c:	08006ea6 	.word	0x08006ea6
 8006680:	00000000 	.word	0x00000000
 8006684:	08006407 	.word	0x08006407
 8006688:	08006ea2 	.word	0x08006ea2

0800668c <_printf_common>:
 800668c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006690:	4616      	mov	r6, r2
 8006692:	4699      	mov	r9, r3
 8006694:	688a      	ldr	r2, [r1, #8]
 8006696:	690b      	ldr	r3, [r1, #16]
 8006698:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800669c:	4293      	cmp	r3, r2
 800669e:	bfb8      	it	lt
 80066a0:	4613      	movlt	r3, r2
 80066a2:	6033      	str	r3, [r6, #0]
 80066a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066a8:	4607      	mov	r7, r0
 80066aa:	460c      	mov	r4, r1
 80066ac:	b10a      	cbz	r2, 80066b2 <_printf_common+0x26>
 80066ae:	3301      	adds	r3, #1
 80066b0:	6033      	str	r3, [r6, #0]
 80066b2:	6823      	ldr	r3, [r4, #0]
 80066b4:	0699      	lsls	r1, r3, #26
 80066b6:	bf42      	ittt	mi
 80066b8:	6833      	ldrmi	r3, [r6, #0]
 80066ba:	3302      	addmi	r3, #2
 80066bc:	6033      	strmi	r3, [r6, #0]
 80066be:	6825      	ldr	r5, [r4, #0]
 80066c0:	f015 0506 	ands.w	r5, r5, #6
 80066c4:	d106      	bne.n	80066d4 <_printf_common+0x48>
 80066c6:	f104 0a19 	add.w	sl, r4, #25
 80066ca:	68e3      	ldr	r3, [r4, #12]
 80066cc:	6832      	ldr	r2, [r6, #0]
 80066ce:	1a9b      	subs	r3, r3, r2
 80066d0:	42ab      	cmp	r3, r5
 80066d2:	dc26      	bgt.n	8006722 <_printf_common+0x96>
 80066d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066d8:	1e13      	subs	r3, r2, #0
 80066da:	6822      	ldr	r2, [r4, #0]
 80066dc:	bf18      	it	ne
 80066de:	2301      	movne	r3, #1
 80066e0:	0692      	lsls	r2, r2, #26
 80066e2:	d42b      	bmi.n	800673c <_printf_common+0xb0>
 80066e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066e8:	4649      	mov	r1, r9
 80066ea:	4638      	mov	r0, r7
 80066ec:	47c0      	blx	r8
 80066ee:	3001      	adds	r0, #1
 80066f0:	d01e      	beq.n	8006730 <_printf_common+0xa4>
 80066f2:	6823      	ldr	r3, [r4, #0]
 80066f4:	68e5      	ldr	r5, [r4, #12]
 80066f6:	6832      	ldr	r2, [r6, #0]
 80066f8:	f003 0306 	and.w	r3, r3, #6
 80066fc:	2b04      	cmp	r3, #4
 80066fe:	bf08      	it	eq
 8006700:	1aad      	subeq	r5, r5, r2
 8006702:	68a3      	ldr	r3, [r4, #8]
 8006704:	6922      	ldr	r2, [r4, #16]
 8006706:	bf0c      	ite	eq
 8006708:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800670c:	2500      	movne	r5, #0
 800670e:	4293      	cmp	r3, r2
 8006710:	bfc4      	itt	gt
 8006712:	1a9b      	subgt	r3, r3, r2
 8006714:	18ed      	addgt	r5, r5, r3
 8006716:	2600      	movs	r6, #0
 8006718:	341a      	adds	r4, #26
 800671a:	42b5      	cmp	r5, r6
 800671c:	d11a      	bne.n	8006754 <_printf_common+0xc8>
 800671e:	2000      	movs	r0, #0
 8006720:	e008      	b.n	8006734 <_printf_common+0xa8>
 8006722:	2301      	movs	r3, #1
 8006724:	4652      	mov	r2, sl
 8006726:	4649      	mov	r1, r9
 8006728:	4638      	mov	r0, r7
 800672a:	47c0      	blx	r8
 800672c:	3001      	adds	r0, #1
 800672e:	d103      	bne.n	8006738 <_printf_common+0xac>
 8006730:	f04f 30ff 	mov.w	r0, #4294967295
 8006734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006738:	3501      	adds	r5, #1
 800673a:	e7c6      	b.n	80066ca <_printf_common+0x3e>
 800673c:	18e1      	adds	r1, r4, r3
 800673e:	1c5a      	adds	r2, r3, #1
 8006740:	2030      	movs	r0, #48	; 0x30
 8006742:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006746:	4422      	add	r2, r4
 8006748:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800674c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006750:	3302      	adds	r3, #2
 8006752:	e7c7      	b.n	80066e4 <_printf_common+0x58>
 8006754:	2301      	movs	r3, #1
 8006756:	4622      	mov	r2, r4
 8006758:	4649      	mov	r1, r9
 800675a:	4638      	mov	r0, r7
 800675c:	47c0      	blx	r8
 800675e:	3001      	adds	r0, #1
 8006760:	d0e6      	beq.n	8006730 <_printf_common+0xa4>
 8006762:	3601      	adds	r6, #1
 8006764:	e7d9      	b.n	800671a <_printf_common+0x8e>
	...

08006768 <_printf_i>:
 8006768:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800676c:	7e0f      	ldrb	r7, [r1, #24]
 800676e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006770:	2f78      	cmp	r7, #120	; 0x78
 8006772:	4691      	mov	r9, r2
 8006774:	4680      	mov	r8, r0
 8006776:	460c      	mov	r4, r1
 8006778:	469a      	mov	sl, r3
 800677a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800677e:	d807      	bhi.n	8006790 <_printf_i+0x28>
 8006780:	2f62      	cmp	r7, #98	; 0x62
 8006782:	d80a      	bhi.n	800679a <_printf_i+0x32>
 8006784:	2f00      	cmp	r7, #0
 8006786:	f000 80d8 	beq.w	800693a <_printf_i+0x1d2>
 800678a:	2f58      	cmp	r7, #88	; 0x58
 800678c:	f000 80a3 	beq.w	80068d6 <_printf_i+0x16e>
 8006790:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006794:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006798:	e03a      	b.n	8006810 <_printf_i+0xa8>
 800679a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800679e:	2b15      	cmp	r3, #21
 80067a0:	d8f6      	bhi.n	8006790 <_printf_i+0x28>
 80067a2:	a101      	add	r1, pc, #4	; (adr r1, 80067a8 <_printf_i+0x40>)
 80067a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067a8:	08006801 	.word	0x08006801
 80067ac:	08006815 	.word	0x08006815
 80067b0:	08006791 	.word	0x08006791
 80067b4:	08006791 	.word	0x08006791
 80067b8:	08006791 	.word	0x08006791
 80067bc:	08006791 	.word	0x08006791
 80067c0:	08006815 	.word	0x08006815
 80067c4:	08006791 	.word	0x08006791
 80067c8:	08006791 	.word	0x08006791
 80067cc:	08006791 	.word	0x08006791
 80067d0:	08006791 	.word	0x08006791
 80067d4:	08006921 	.word	0x08006921
 80067d8:	08006845 	.word	0x08006845
 80067dc:	08006903 	.word	0x08006903
 80067e0:	08006791 	.word	0x08006791
 80067e4:	08006791 	.word	0x08006791
 80067e8:	08006943 	.word	0x08006943
 80067ec:	08006791 	.word	0x08006791
 80067f0:	08006845 	.word	0x08006845
 80067f4:	08006791 	.word	0x08006791
 80067f8:	08006791 	.word	0x08006791
 80067fc:	0800690b 	.word	0x0800690b
 8006800:	682b      	ldr	r3, [r5, #0]
 8006802:	1d1a      	adds	r2, r3, #4
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	602a      	str	r2, [r5, #0]
 8006808:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800680c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006810:	2301      	movs	r3, #1
 8006812:	e0a3      	b.n	800695c <_printf_i+0x1f4>
 8006814:	6820      	ldr	r0, [r4, #0]
 8006816:	6829      	ldr	r1, [r5, #0]
 8006818:	0606      	lsls	r6, r0, #24
 800681a:	f101 0304 	add.w	r3, r1, #4
 800681e:	d50a      	bpl.n	8006836 <_printf_i+0xce>
 8006820:	680e      	ldr	r6, [r1, #0]
 8006822:	602b      	str	r3, [r5, #0]
 8006824:	2e00      	cmp	r6, #0
 8006826:	da03      	bge.n	8006830 <_printf_i+0xc8>
 8006828:	232d      	movs	r3, #45	; 0x2d
 800682a:	4276      	negs	r6, r6
 800682c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006830:	485e      	ldr	r0, [pc, #376]	; (80069ac <_printf_i+0x244>)
 8006832:	230a      	movs	r3, #10
 8006834:	e019      	b.n	800686a <_printf_i+0x102>
 8006836:	680e      	ldr	r6, [r1, #0]
 8006838:	602b      	str	r3, [r5, #0]
 800683a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800683e:	bf18      	it	ne
 8006840:	b236      	sxthne	r6, r6
 8006842:	e7ef      	b.n	8006824 <_printf_i+0xbc>
 8006844:	682b      	ldr	r3, [r5, #0]
 8006846:	6820      	ldr	r0, [r4, #0]
 8006848:	1d19      	adds	r1, r3, #4
 800684a:	6029      	str	r1, [r5, #0]
 800684c:	0601      	lsls	r1, r0, #24
 800684e:	d501      	bpl.n	8006854 <_printf_i+0xec>
 8006850:	681e      	ldr	r6, [r3, #0]
 8006852:	e002      	b.n	800685a <_printf_i+0xf2>
 8006854:	0646      	lsls	r6, r0, #25
 8006856:	d5fb      	bpl.n	8006850 <_printf_i+0xe8>
 8006858:	881e      	ldrh	r6, [r3, #0]
 800685a:	4854      	ldr	r0, [pc, #336]	; (80069ac <_printf_i+0x244>)
 800685c:	2f6f      	cmp	r7, #111	; 0x6f
 800685e:	bf0c      	ite	eq
 8006860:	2308      	moveq	r3, #8
 8006862:	230a      	movne	r3, #10
 8006864:	2100      	movs	r1, #0
 8006866:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800686a:	6865      	ldr	r5, [r4, #4]
 800686c:	60a5      	str	r5, [r4, #8]
 800686e:	2d00      	cmp	r5, #0
 8006870:	bfa2      	ittt	ge
 8006872:	6821      	ldrge	r1, [r4, #0]
 8006874:	f021 0104 	bicge.w	r1, r1, #4
 8006878:	6021      	strge	r1, [r4, #0]
 800687a:	b90e      	cbnz	r6, 8006880 <_printf_i+0x118>
 800687c:	2d00      	cmp	r5, #0
 800687e:	d04d      	beq.n	800691c <_printf_i+0x1b4>
 8006880:	4615      	mov	r5, r2
 8006882:	fbb6 f1f3 	udiv	r1, r6, r3
 8006886:	fb03 6711 	mls	r7, r3, r1, r6
 800688a:	5dc7      	ldrb	r7, [r0, r7]
 800688c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006890:	4637      	mov	r7, r6
 8006892:	42bb      	cmp	r3, r7
 8006894:	460e      	mov	r6, r1
 8006896:	d9f4      	bls.n	8006882 <_printf_i+0x11a>
 8006898:	2b08      	cmp	r3, #8
 800689a:	d10b      	bne.n	80068b4 <_printf_i+0x14c>
 800689c:	6823      	ldr	r3, [r4, #0]
 800689e:	07de      	lsls	r6, r3, #31
 80068a0:	d508      	bpl.n	80068b4 <_printf_i+0x14c>
 80068a2:	6923      	ldr	r3, [r4, #16]
 80068a4:	6861      	ldr	r1, [r4, #4]
 80068a6:	4299      	cmp	r1, r3
 80068a8:	bfde      	ittt	le
 80068aa:	2330      	movle	r3, #48	; 0x30
 80068ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068b4:	1b52      	subs	r2, r2, r5
 80068b6:	6122      	str	r2, [r4, #16]
 80068b8:	f8cd a000 	str.w	sl, [sp]
 80068bc:	464b      	mov	r3, r9
 80068be:	aa03      	add	r2, sp, #12
 80068c0:	4621      	mov	r1, r4
 80068c2:	4640      	mov	r0, r8
 80068c4:	f7ff fee2 	bl	800668c <_printf_common>
 80068c8:	3001      	adds	r0, #1
 80068ca:	d14c      	bne.n	8006966 <_printf_i+0x1fe>
 80068cc:	f04f 30ff 	mov.w	r0, #4294967295
 80068d0:	b004      	add	sp, #16
 80068d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068d6:	4835      	ldr	r0, [pc, #212]	; (80069ac <_printf_i+0x244>)
 80068d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80068dc:	6829      	ldr	r1, [r5, #0]
 80068de:	6823      	ldr	r3, [r4, #0]
 80068e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80068e4:	6029      	str	r1, [r5, #0]
 80068e6:	061d      	lsls	r5, r3, #24
 80068e8:	d514      	bpl.n	8006914 <_printf_i+0x1ac>
 80068ea:	07df      	lsls	r7, r3, #31
 80068ec:	bf44      	itt	mi
 80068ee:	f043 0320 	orrmi.w	r3, r3, #32
 80068f2:	6023      	strmi	r3, [r4, #0]
 80068f4:	b91e      	cbnz	r6, 80068fe <_printf_i+0x196>
 80068f6:	6823      	ldr	r3, [r4, #0]
 80068f8:	f023 0320 	bic.w	r3, r3, #32
 80068fc:	6023      	str	r3, [r4, #0]
 80068fe:	2310      	movs	r3, #16
 8006900:	e7b0      	b.n	8006864 <_printf_i+0xfc>
 8006902:	6823      	ldr	r3, [r4, #0]
 8006904:	f043 0320 	orr.w	r3, r3, #32
 8006908:	6023      	str	r3, [r4, #0]
 800690a:	2378      	movs	r3, #120	; 0x78
 800690c:	4828      	ldr	r0, [pc, #160]	; (80069b0 <_printf_i+0x248>)
 800690e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006912:	e7e3      	b.n	80068dc <_printf_i+0x174>
 8006914:	0659      	lsls	r1, r3, #25
 8006916:	bf48      	it	mi
 8006918:	b2b6      	uxthmi	r6, r6
 800691a:	e7e6      	b.n	80068ea <_printf_i+0x182>
 800691c:	4615      	mov	r5, r2
 800691e:	e7bb      	b.n	8006898 <_printf_i+0x130>
 8006920:	682b      	ldr	r3, [r5, #0]
 8006922:	6826      	ldr	r6, [r4, #0]
 8006924:	6961      	ldr	r1, [r4, #20]
 8006926:	1d18      	adds	r0, r3, #4
 8006928:	6028      	str	r0, [r5, #0]
 800692a:	0635      	lsls	r5, r6, #24
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	d501      	bpl.n	8006934 <_printf_i+0x1cc>
 8006930:	6019      	str	r1, [r3, #0]
 8006932:	e002      	b.n	800693a <_printf_i+0x1d2>
 8006934:	0670      	lsls	r0, r6, #25
 8006936:	d5fb      	bpl.n	8006930 <_printf_i+0x1c8>
 8006938:	8019      	strh	r1, [r3, #0]
 800693a:	2300      	movs	r3, #0
 800693c:	6123      	str	r3, [r4, #16]
 800693e:	4615      	mov	r5, r2
 8006940:	e7ba      	b.n	80068b8 <_printf_i+0x150>
 8006942:	682b      	ldr	r3, [r5, #0]
 8006944:	1d1a      	adds	r2, r3, #4
 8006946:	602a      	str	r2, [r5, #0]
 8006948:	681d      	ldr	r5, [r3, #0]
 800694a:	6862      	ldr	r2, [r4, #4]
 800694c:	2100      	movs	r1, #0
 800694e:	4628      	mov	r0, r5
 8006950:	f7f9 fc8e 	bl	8000270 <memchr>
 8006954:	b108      	cbz	r0, 800695a <_printf_i+0x1f2>
 8006956:	1b40      	subs	r0, r0, r5
 8006958:	6060      	str	r0, [r4, #4]
 800695a:	6863      	ldr	r3, [r4, #4]
 800695c:	6123      	str	r3, [r4, #16]
 800695e:	2300      	movs	r3, #0
 8006960:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006964:	e7a8      	b.n	80068b8 <_printf_i+0x150>
 8006966:	6923      	ldr	r3, [r4, #16]
 8006968:	462a      	mov	r2, r5
 800696a:	4649      	mov	r1, r9
 800696c:	4640      	mov	r0, r8
 800696e:	47d0      	blx	sl
 8006970:	3001      	adds	r0, #1
 8006972:	d0ab      	beq.n	80068cc <_printf_i+0x164>
 8006974:	6823      	ldr	r3, [r4, #0]
 8006976:	079b      	lsls	r3, r3, #30
 8006978:	d413      	bmi.n	80069a2 <_printf_i+0x23a>
 800697a:	68e0      	ldr	r0, [r4, #12]
 800697c:	9b03      	ldr	r3, [sp, #12]
 800697e:	4298      	cmp	r0, r3
 8006980:	bfb8      	it	lt
 8006982:	4618      	movlt	r0, r3
 8006984:	e7a4      	b.n	80068d0 <_printf_i+0x168>
 8006986:	2301      	movs	r3, #1
 8006988:	4632      	mov	r2, r6
 800698a:	4649      	mov	r1, r9
 800698c:	4640      	mov	r0, r8
 800698e:	47d0      	blx	sl
 8006990:	3001      	adds	r0, #1
 8006992:	d09b      	beq.n	80068cc <_printf_i+0x164>
 8006994:	3501      	adds	r5, #1
 8006996:	68e3      	ldr	r3, [r4, #12]
 8006998:	9903      	ldr	r1, [sp, #12]
 800699a:	1a5b      	subs	r3, r3, r1
 800699c:	42ab      	cmp	r3, r5
 800699e:	dcf2      	bgt.n	8006986 <_printf_i+0x21e>
 80069a0:	e7eb      	b.n	800697a <_printf_i+0x212>
 80069a2:	2500      	movs	r5, #0
 80069a4:	f104 0619 	add.w	r6, r4, #25
 80069a8:	e7f5      	b.n	8006996 <_printf_i+0x22e>
 80069aa:	bf00      	nop
 80069ac:	08006ead 	.word	0x08006ead
 80069b0:	08006ebe 	.word	0x08006ebe

080069b4 <__sread>:
 80069b4:	b510      	push	{r4, lr}
 80069b6:	460c      	mov	r4, r1
 80069b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069bc:	f000 f95c 	bl	8006c78 <_read_r>
 80069c0:	2800      	cmp	r0, #0
 80069c2:	bfab      	itete	ge
 80069c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80069c6:	89a3      	ldrhlt	r3, [r4, #12]
 80069c8:	181b      	addge	r3, r3, r0
 80069ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80069ce:	bfac      	ite	ge
 80069d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80069d2:	81a3      	strhlt	r3, [r4, #12]
 80069d4:	bd10      	pop	{r4, pc}

080069d6 <__swrite>:
 80069d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069da:	461f      	mov	r7, r3
 80069dc:	898b      	ldrh	r3, [r1, #12]
 80069de:	05db      	lsls	r3, r3, #23
 80069e0:	4605      	mov	r5, r0
 80069e2:	460c      	mov	r4, r1
 80069e4:	4616      	mov	r6, r2
 80069e6:	d505      	bpl.n	80069f4 <__swrite+0x1e>
 80069e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069ec:	2302      	movs	r3, #2
 80069ee:	2200      	movs	r2, #0
 80069f0:	f000 f930 	bl	8006c54 <_lseek_r>
 80069f4:	89a3      	ldrh	r3, [r4, #12]
 80069f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069fe:	81a3      	strh	r3, [r4, #12]
 8006a00:	4632      	mov	r2, r6
 8006a02:	463b      	mov	r3, r7
 8006a04:	4628      	mov	r0, r5
 8006a06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a0a:	f000 b869 	b.w	8006ae0 <_write_r>

08006a0e <__sseek>:
 8006a0e:	b510      	push	{r4, lr}
 8006a10:	460c      	mov	r4, r1
 8006a12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a16:	f000 f91d 	bl	8006c54 <_lseek_r>
 8006a1a:	1c43      	adds	r3, r0, #1
 8006a1c:	89a3      	ldrh	r3, [r4, #12]
 8006a1e:	bf15      	itete	ne
 8006a20:	6560      	strne	r0, [r4, #84]	; 0x54
 8006a22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006a26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006a2a:	81a3      	strheq	r3, [r4, #12]
 8006a2c:	bf18      	it	ne
 8006a2e:	81a3      	strhne	r3, [r4, #12]
 8006a30:	bd10      	pop	{r4, pc}

08006a32 <__sclose>:
 8006a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a36:	f000 b8db 	b.w	8006bf0 <_close_r>
	...

08006a3c <__swbuf_r>:
 8006a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a3e:	460e      	mov	r6, r1
 8006a40:	4614      	mov	r4, r2
 8006a42:	4605      	mov	r5, r0
 8006a44:	b118      	cbz	r0, 8006a4e <__swbuf_r+0x12>
 8006a46:	6983      	ldr	r3, [r0, #24]
 8006a48:	b90b      	cbnz	r3, 8006a4e <__swbuf_r+0x12>
 8006a4a:	f7ff fba1 	bl	8006190 <__sinit>
 8006a4e:	4b21      	ldr	r3, [pc, #132]	; (8006ad4 <__swbuf_r+0x98>)
 8006a50:	429c      	cmp	r4, r3
 8006a52:	d12b      	bne.n	8006aac <__swbuf_r+0x70>
 8006a54:	686c      	ldr	r4, [r5, #4]
 8006a56:	69a3      	ldr	r3, [r4, #24]
 8006a58:	60a3      	str	r3, [r4, #8]
 8006a5a:	89a3      	ldrh	r3, [r4, #12]
 8006a5c:	071a      	lsls	r2, r3, #28
 8006a5e:	d52f      	bpl.n	8006ac0 <__swbuf_r+0x84>
 8006a60:	6923      	ldr	r3, [r4, #16]
 8006a62:	b36b      	cbz	r3, 8006ac0 <__swbuf_r+0x84>
 8006a64:	6923      	ldr	r3, [r4, #16]
 8006a66:	6820      	ldr	r0, [r4, #0]
 8006a68:	1ac0      	subs	r0, r0, r3
 8006a6a:	6963      	ldr	r3, [r4, #20]
 8006a6c:	b2f6      	uxtb	r6, r6
 8006a6e:	4283      	cmp	r3, r0
 8006a70:	4637      	mov	r7, r6
 8006a72:	dc04      	bgt.n	8006a7e <__swbuf_r+0x42>
 8006a74:	4621      	mov	r1, r4
 8006a76:	4628      	mov	r0, r5
 8006a78:	f7ff faf6 	bl	8006068 <_fflush_r>
 8006a7c:	bb30      	cbnz	r0, 8006acc <__swbuf_r+0x90>
 8006a7e:	68a3      	ldr	r3, [r4, #8]
 8006a80:	3b01      	subs	r3, #1
 8006a82:	60a3      	str	r3, [r4, #8]
 8006a84:	6823      	ldr	r3, [r4, #0]
 8006a86:	1c5a      	adds	r2, r3, #1
 8006a88:	6022      	str	r2, [r4, #0]
 8006a8a:	701e      	strb	r6, [r3, #0]
 8006a8c:	6963      	ldr	r3, [r4, #20]
 8006a8e:	3001      	adds	r0, #1
 8006a90:	4283      	cmp	r3, r0
 8006a92:	d004      	beq.n	8006a9e <__swbuf_r+0x62>
 8006a94:	89a3      	ldrh	r3, [r4, #12]
 8006a96:	07db      	lsls	r3, r3, #31
 8006a98:	d506      	bpl.n	8006aa8 <__swbuf_r+0x6c>
 8006a9a:	2e0a      	cmp	r6, #10
 8006a9c:	d104      	bne.n	8006aa8 <__swbuf_r+0x6c>
 8006a9e:	4621      	mov	r1, r4
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	f7ff fae1 	bl	8006068 <_fflush_r>
 8006aa6:	b988      	cbnz	r0, 8006acc <__swbuf_r+0x90>
 8006aa8:	4638      	mov	r0, r7
 8006aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006aac:	4b0a      	ldr	r3, [pc, #40]	; (8006ad8 <__swbuf_r+0x9c>)
 8006aae:	429c      	cmp	r4, r3
 8006ab0:	d101      	bne.n	8006ab6 <__swbuf_r+0x7a>
 8006ab2:	68ac      	ldr	r4, [r5, #8]
 8006ab4:	e7cf      	b.n	8006a56 <__swbuf_r+0x1a>
 8006ab6:	4b09      	ldr	r3, [pc, #36]	; (8006adc <__swbuf_r+0xa0>)
 8006ab8:	429c      	cmp	r4, r3
 8006aba:	bf08      	it	eq
 8006abc:	68ec      	ldreq	r4, [r5, #12]
 8006abe:	e7ca      	b.n	8006a56 <__swbuf_r+0x1a>
 8006ac0:	4621      	mov	r1, r4
 8006ac2:	4628      	mov	r0, r5
 8006ac4:	f000 f81e 	bl	8006b04 <__swsetup_r>
 8006ac8:	2800      	cmp	r0, #0
 8006aca:	d0cb      	beq.n	8006a64 <__swbuf_r+0x28>
 8006acc:	f04f 37ff 	mov.w	r7, #4294967295
 8006ad0:	e7ea      	b.n	8006aa8 <__swbuf_r+0x6c>
 8006ad2:	bf00      	nop
 8006ad4:	08006e5c 	.word	0x08006e5c
 8006ad8:	08006e7c 	.word	0x08006e7c
 8006adc:	08006e3c 	.word	0x08006e3c

08006ae0 <_write_r>:
 8006ae0:	b538      	push	{r3, r4, r5, lr}
 8006ae2:	4d07      	ldr	r5, [pc, #28]	; (8006b00 <_write_r+0x20>)
 8006ae4:	4604      	mov	r4, r0
 8006ae6:	4608      	mov	r0, r1
 8006ae8:	4611      	mov	r1, r2
 8006aea:	2200      	movs	r2, #0
 8006aec:	602a      	str	r2, [r5, #0]
 8006aee:	461a      	mov	r2, r3
 8006af0:	f7fa f985 	bl	8000dfe <_write>
 8006af4:	1c43      	adds	r3, r0, #1
 8006af6:	d102      	bne.n	8006afe <_write_r+0x1e>
 8006af8:	682b      	ldr	r3, [r5, #0]
 8006afa:	b103      	cbz	r3, 8006afe <_write_r+0x1e>
 8006afc:	6023      	str	r3, [r4, #0]
 8006afe:	bd38      	pop	{r3, r4, r5, pc}
 8006b00:	200005b0 	.word	0x200005b0

08006b04 <__swsetup_r>:
 8006b04:	4b32      	ldr	r3, [pc, #200]	; (8006bd0 <__swsetup_r+0xcc>)
 8006b06:	b570      	push	{r4, r5, r6, lr}
 8006b08:	681d      	ldr	r5, [r3, #0]
 8006b0a:	4606      	mov	r6, r0
 8006b0c:	460c      	mov	r4, r1
 8006b0e:	b125      	cbz	r5, 8006b1a <__swsetup_r+0x16>
 8006b10:	69ab      	ldr	r3, [r5, #24]
 8006b12:	b913      	cbnz	r3, 8006b1a <__swsetup_r+0x16>
 8006b14:	4628      	mov	r0, r5
 8006b16:	f7ff fb3b 	bl	8006190 <__sinit>
 8006b1a:	4b2e      	ldr	r3, [pc, #184]	; (8006bd4 <__swsetup_r+0xd0>)
 8006b1c:	429c      	cmp	r4, r3
 8006b1e:	d10f      	bne.n	8006b40 <__swsetup_r+0x3c>
 8006b20:	686c      	ldr	r4, [r5, #4]
 8006b22:	89a3      	ldrh	r3, [r4, #12]
 8006b24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b28:	0719      	lsls	r1, r3, #28
 8006b2a:	d42c      	bmi.n	8006b86 <__swsetup_r+0x82>
 8006b2c:	06dd      	lsls	r5, r3, #27
 8006b2e:	d411      	bmi.n	8006b54 <__swsetup_r+0x50>
 8006b30:	2309      	movs	r3, #9
 8006b32:	6033      	str	r3, [r6, #0]
 8006b34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006b38:	81a3      	strh	r3, [r4, #12]
 8006b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b3e:	e03e      	b.n	8006bbe <__swsetup_r+0xba>
 8006b40:	4b25      	ldr	r3, [pc, #148]	; (8006bd8 <__swsetup_r+0xd4>)
 8006b42:	429c      	cmp	r4, r3
 8006b44:	d101      	bne.n	8006b4a <__swsetup_r+0x46>
 8006b46:	68ac      	ldr	r4, [r5, #8]
 8006b48:	e7eb      	b.n	8006b22 <__swsetup_r+0x1e>
 8006b4a:	4b24      	ldr	r3, [pc, #144]	; (8006bdc <__swsetup_r+0xd8>)
 8006b4c:	429c      	cmp	r4, r3
 8006b4e:	bf08      	it	eq
 8006b50:	68ec      	ldreq	r4, [r5, #12]
 8006b52:	e7e6      	b.n	8006b22 <__swsetup_r+0x1e>
 8006b54:	0758      	lsls	r0, r3, #29
 8006b56:	d512      	bpl.n	8006b7e <__swsetup_r+0x7a>
 8006b58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b5a:	b141      	cbz	r1, 8006b6e <__swsetup_r+0x6a>
 8006b5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b60:	4299      	cmp	r1, r3
 8006b62:	d002      	beq.n	8006b6a <__swsetup_r+0x66>
 8006b64:	4630      	mov	r0, r6
 8006b66:	f7fe ffc1 	bl	8005aec <_free_r>
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	6363      	str	r3, [r4, #52]	; 0x34
 8006b6e:	89a3      	ldrh	r3, [r4, #12]
 8006b70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006b74:	81a3      	strh	r3, [r4, #12]
 8006b76:	2300      	movs	r3, #0
 8006b78:	6063      	str	r3, [r4, #4]
 8006b7a:	6923      	ldr	r3, [r4, #16]
 8006b7c:	6023      	str	r3, [r4, #0]
 8006b7e:	89a3      	ldrh	r3, [r4, #12]
 8006b80:	f043 0308 	orr.w	r3, r3, #8
 8006b84:	81a3      	strh	r3, [r4, #12]
 8006b86:	6923      	ldr	r3, [r4, #16]
 8006b88:	b94b      	cbnz	r3, 8006b9e <__swsetup_r+0x9a>
 8006b8a:	89a3      	ldrh	r3, [r4, #12]
 8006b8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006b90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b94:	d003      	beq.n	8006b9e <__swsetup_r+0x9a>
 8006b96:	4621      	mov	r1, r4
 8006b98:	4630      	mov	r0, r6
 8006b9a:	f7ff fbd1 	bl	8006340 <__smakebuf_r>
 8006b9e:	89a0      	ldrh	r0, [r4, #12]
 8006ba0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ba4:	f010 0301 	ands.w	r3, r0, #1
 8006ba8:	d00a      	beq.n	8006bc0 <__swsetup_r+0xbc>
 8006baa:	2300      	movs	r3, #0
 8006bac:	60a3      	str	r3, [r4, #8]
 8006bae:	6963      	ldr	r3, [r4, #20]
 8006bb0:	425b      	negs	r3, r3
 8006bb2:	61a3      	str	r3, [r4, #24]
 8006bb4:	6923      	ldr	r3, [r4, #16]
 8006bb6:	b943      	cbnz	r3, 8006bca <__swsetup_r+0xc6>
 8006bb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006bbc:	d1ba      	bne.n	8006b34 <__swsetup_r+0x30>
 8006bbe:	bd70      	pop	{r4, r5, r6, pc}
 8006bc0:	0781      	lsls	r1, r0, #30
 8006bc2:	bf58      	it	pl
 8006bc4:	6963      	ldrpl	r3, [r4, #20]
 8006bc6:	60a3      	str	r3, [r4, #8]
 8006bc8:	e7f4      	b.n	8006bb4 <__swsetup_r+0xb0>
 8006bca:	2000      	movs	r0, #0
 8006bcc:	e7f7      	b.n	8006bbe <__swsetup_r+0xba>
 8006bce:	bf00      	nop
 8006bd0:	20000010 	.word	0x20000010
 8006bd4:	08006e5c 	.word	0x08006e5c
 8006bd8:	08006e7c 	.word	0x08006e7c
 8006bdc:	08006e3c 	.word	0x08006e3c

08006be0 <abort>:
 8006be0:	b508      	push	{r3, lr}
 8006be2:	2006      	movs	r0, #6
 8006be4:	f000 f882 	bl	8006cec <raise>
 8006be8:	2001      	movs	r0, #1
 8006bea:	f7fa f8e1 	bl	8000db0 <_exit>
	...

08006bf0 <_close_r>:
 8006bf0:	b538      	push	{r3, r4, r5, lr}
 8006bf2:	4d06      	ldr	r5, [pc, #24]	; (8006c0c <_close_r+0x1c>)
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	4604      	mov	r4, r0
 8006bf8:	4608      	mov	r0, r1
 8006bfa:	602b      	str	r3, [r5, #0]
 8006bfc:	f7fa f91b 	bl	8000e36 <_close>
 8006c00:	1c43      	adds	r3, r0, #1
 8006c02:	d102      	bne.n	8006c0a <_close_r+0x1a>
 8006c04:	682b      	ldr	r3, [r5, #0]
 8006c06:	b103      	cbz	r3, 8006c0a <_close_r+0x1a>
 8006c08:	6023      	str	r3, [r4, #0]
 8006c0a:	bd38      	pop	{r3, r4, r5, pc}
 8006c0c:	200005b0 	.word	0x200005b0

08006c10 <_fstat_r>:
 8006c10:	b538      	push	{r3, r4, r5, lr}
 8006c12:	4d07      	ldr	r5, [pc, #28]	; (8006c30 <_fstat_r+0x20>)
 8006c14:	2300      	movs	r3, #0
 8006c16:	4604      	mov	r4, r0
 8006c18:	4608      	mov	r0, r1
 8006c1a:	4611      	mov	r1, r2
 8006c1c:	602b      	str	r3, [r5, #0]
 8006c1e:	f7fa f916 	bl	8000e4e <_fstat>
 8006c22:	1c43      	adds	r3, r0, #1
 8006c24:	d102      	bne.n	8006c2c <_fstat_r+0x1c>
 8006c26:	682b      	ldr	r3, [r5, #0]
 8006c28:	b103      	cbz	r3, 8006c2c <_fstat_r+0x1c>
 8006c2a:	6023      	str	r3, [r4, #0]
 8006c2c:	bd38      	pop	{r3, r4, r5, pc}
 8006c2e:	bf00      	nop
 8006c30:	200005b0 	.word	0x200005b0

08006c34 <_isatty_r>:
 8006c34:	b538      	push	{r3, r4, r5, lr}
 8006c36:	4d06      	ldr	r5, [pc, #24]	; (8006c50 <_isatty_r+0x1c>)
 8006c38:	2300      	movs	r3, #0
 8006c3a:	4604      	mov	r4, r0
 8006c3c:	4608      	mov	r0, r1
 8006c3e:	602b      	str	r3, [r5, #0]
 8006c40:	f7fa f915 	bl	8000e6e <_isatty>
 8006c44:	1c43      	adds	r3, r0, #1
 8006c46:	d102      	bne.n	8006c4e <_isatty_r+0x1a>
 8006c48:	682b      	ldr	r3, [r5, #0]
 8006c4a:	b103      	cbz	r3, 8006c4e <_isatty_r+0x1a>
 8006c4c:	6023      	str	r3, [r4, #0]
 8006c4e:	bd38      	pop	{r3, r4, r5, pc}
 8006c50:	200005b0 	.word	0x200005b0

08006c54 <_lseek_r>:
 8006c54:	b538      	push	{r3, r4, r5, lr}
 8006c56:	4d07      	ldr	r5, [pc, #28]	; (8006c74 <_lseek_r+0x20>)
 8006c58:	4604      	mov	r4, r0
 8006c5a:	4608      	mov	r0, r1
 8006c5c:	4611      	mov	r1, r2
 8006c5e:	2200      	movs	r2, #0
 8006c60:	602a      	str	r2, [r5, #0]
 8006c62:	461a      	mov	r2, r3
 8006c64:	f7fa f90e 	bl	8000e84 <_lseek>
 8006c68:	1c43      	adds	r3, r0, #1
 8006c6a:	d102      	bne.n	8006c72 <_lseek_r+0x1e>
 8006c6c:	682b      	ldr	r3, [r5, #0]
 8006c6e:	b103      	cbz	r3, 8006c72 <_lseek_r+0x1e>
 8006c70:	6023      	str	r3, [r4, #0]
 8006c72:	bd38      	pop	{r3, r4, r5, pc}
 8006c74:	200005b0 	.word	0x200005b0

08006c78 <_read_r>:
 8006c78:	b538      	push	{r3, r4, r5, lr}
 8006c7a:	4d07      	ldr	r5, [pc, #28]	; (8006c98 <_read_r+0x20>)
 8006c7c:	4604      	mov	r4, r0
 8006c7e:	4608      	mov	r0, r1
 8006c80:	4611      	mov	r1, r2
 8006c82:	2200      	movs	r2, #0
 8006c84:	602a      	str	r2, [r5, #0]
 8006c86:	461a      	mov	r2, r3
 8006c88:	f7fa f89c 	bl	8000dc4 <_read>
 8006c8c:	1c43      	adds	r3, r0, #1
 8006c8e:	d102      	bne.n	8006c96 <_read_r+0x1e>
 8006c90:	682b      	ldr	r3, [r5, #0]
 8006c92:	b103      	cbz	r3, 8006c96 <_read_r+0x1e>
 8006c94:	6023      	str	r3, [r4, #0]
 8006c96:	bd38      	pop	{r3, r4, r5, pc}
 8006c98:	200005b0 	.word	0x200005b0

08006c9c <_raise_r>:
 8006c9c:	291f      	cmp	r1, #31
 8006c9e:	b538      	push	{r3, r4, r5, lr}
 8006ca0:	4604      	mov	r4, r0
 8006ca2:	460d      	mov	r5, r1
 8006ca4:	d904      	bls.n	8006cb0 <_raise_r+0x14>
 8006ca6:	2316      	movs	r3, #22
 8006ca8:	6003      	str	r3, [r0, #0]
 8006caa:	f04f 30ff 	mov.w	r0, #4294967295
 8006cae:	bd38      	pop	{r3, r4, r5, pc}
 8006cb0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006cb2:	b112      	cbz	r2, 8006cba <_raise_r+0x1e>
 8006cb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006cb8:	b94b      	cbnz	r3, 8006cce <_raise_r+0x32>
 8006cba:	4620      	mov	r0, r4
 8006cbc:	f000 f830 	bl	8006d20 <_getpid_r>
 8006cc0:	462a      	mov	r2, r5
 8006cc2:	4601      	mov	r1, r0
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cca:	f000 b817 	b.w	8006cfc <_kill_r>
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d00a      	beq.n	8006ce8 <_raise_r+0x4c>
 8006cd2:	1c59      	adds	r1, r3, #1
 8006cd4:	d103      	bne.n	8006cde <_raise_r+0x42>
 8006cd6:	2316      	movs	r3, #22
 8006cd8:	6003      	str	r3, [r0, #0]
 8006cda:	2001      	movs	r0, #1
 8006cdc:	e7e7      	b.n	8006cae <_raise_r+0x12>
 8006cde:	2400      	movs	r4, #0
 8006ce0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006ce4:	4628      	mov	r0, r5
 8006ce6:	4798      	blx	r3
 8006ce8:	2000      	movs	r0, #0
 8006cea:	e7e0      	b.n	8006cae <_raise_r+0x12>

08006cec <raise>:
 8006cec:	4b02      	ldr	r3, [pc, #8]	; (8006cf8 <raise+0xc>)
 8006cee:	4601      	mov	r1, r0
 8006cf0:	6818      	ldr	r0, [r3, #0]
 8006cf2:	f7ff bfd3 	b.w	8006c9c <_raise_r>
 8006cf6:	bf00      	nop
 8006cf8:	20000010 	.word	0x20000010

08006cfc <_kill_r>:
 8006cfc:	b538      	push	{r3, r4, r5, lr}
 8006cfe:	4d07      	ldr	r5, [pc, #28]	; (8006d1c <_kill_r+0x20>)
 8006d00:	2300      	movs	r3, #0
 8006d02:	4604      	mov	r4, r0
 8006d04:	4608      	mov	r0, r1
 8006d06:	4611      	mov	r1, r2
 8006d08:	602b      	str	r3, [r5, #0]
 8006d0a:	f7fa f841 	bl	8000d90 <_kill>
 8006d0e:	1c43      	adds	r3, r0, #1
 8006d10:	d102      	bne.n	8006d18 <_kill_r+0x1c>
 8006d12:	682b      	ldr	r3, [r5, #0]
 8006d14:	b103      	cbz	r3, 8006d18 <_kill_r+0x1c>
 8006d16:	6023      	str	r3, [r4, #0]
 8006d18:	bd38      	pop	{r3, r4, r5, pc}
 8006d1a:	bf00      	nop
 8006d1c:	200005b0 	.word	0x200005b0

08006d20 <_getpid_r>:
 8006d20:	f7fa b82e 	b.w	8000d80 <_getpid>

08006d24 <_init>:
 8006d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d26:	bf00      	nop
 8006d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d2a:	bc08      	pop	{r3}
 8006d2c:	469e      	mov	lr, r3
 8006d2e:	4770      	bx	lr

08006d30 <_fini>:
 8006d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d32:	bf00      	nop
 8006d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d36:	bc08      	pop	{r3}
 8006d38:	469e      	mov	lr, r3
 8006d3a:	4770      	bx	lr
