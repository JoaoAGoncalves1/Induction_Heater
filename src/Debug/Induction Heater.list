
Induction Heater.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f4c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  0800614c  0800614c  0001614c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062e4  080062e4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080062e4  080062e4  000162e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062ec  080062ec  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062ec  080062ec  000162ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062f0  080062f0  000162f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080062f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000053c  20000074  08006368  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b0  08006368  000205b0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012851  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027ec  00000000  00000000  000328f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb8  00000000  00000000  000350e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da0  00000000  00000000  00035f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029814  00000000  00000000  00036d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013232  00000000  00000000  0006054c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd32e  00000000  00000000  0007377e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00170aac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046a0  00000000  00000000  00170afc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	08006134 	.word	0x08006134

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	08006134 	.word	0x08006134

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <uart_commands>:
uint8_t delim_1[1], delim_2[] = " ";
uint8_t rx_data = 0, tx_data = 0, new_com = 0, rx_buffer[FIFO_LEN], tx_buffer[FIFO_LEN], tx_flag = FALSE, val_com_flag = FALSE;
volatile uint16_t w_rx_bindex = 0, r_tx_bindex = 0,  r_rx_bindex = 0, w_tx_bindex = 0;
char *comando, *token, *aux_token, *memo_comando, *memo_valid_comando, *message, temp_arr[20], *memory_ptr;

void uart_commands(void){
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0

	char *com_arr[] = {"SD"};
 800061a:	4b53      	ldr	r3, [pc, #332]	; (8000768 <uart_commands+0x154>)
 800061c:	607b      	str	r3, [r7, #4]

 		if(((w_rx_bindex-r_rx_bindex) != 0) && (new_com >0) ){
 800061e:	4b53      	ldr	r3, [pc, #332]	; (800076c <uart_commands+0x158>)
 8000620:	881b      	ldrh	r3, [r3, #0]
 8000622:	b29a      	uxth	r2, r3
 8000624:	4b52      	ldr	r3, [pc, #328]	; (8000770 <uart_commands+0x15c>)
 8000626:	881b      	ldrh	r3, [r3, #0]
 8000628:	b29b      	uxth	r3, r3
 800062a:	429a      	cmp	r2, r3
 800062c:	f000 808f 	beq.w	800074e <uart_commands+0x13a>
 8000630:	4b50      	ldr	r3, [pc, #320]	; (8000774 <uart_commands+0x160>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	f000 808a 	beq.w	800074e <uart_commands+0x13a>

			if((*memo_comando != '$')&& (val_com_flag)){
 800063a:	4b4f      	ldr	r3, [pc, #316]	; (8000778 <uart_commands+0x164>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b24      	cmp	r3, #36	; 0x24
 8000642:	d019      	beq.n	8000678 <uart_commands+0x64>
 8000644:	4b4d      	ldr	r3, [pc, #308]	; (800077c <uart_commands+0x168>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d015      	beq.n	8000678 <uart_commands+0x64>
				memo_valid_comando = (char*)malloc(strlen(memo_comando)+1);
 800064c:	4b4a      	ldr	r3, [pc, #296]	; (8000778 <uart_commands+0x164>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4618      	mov	r0, r3
 8000652:	f7ff fdff 	bl	8000254 <strlen>
 8000656:	4603      	mov	r3, r0
 8000658:	3301      	adds	r3, #1
 800065a:	4618      	mov	r0, r3
 800065c:	f004 fc3e 	bl	8004edc <malloc>
 8000660:	4603      	mov	r3, r0
 8000662:	461a      	mov	r2, r3
 8000664:	4b46      	ldr	r3, [pc, #280]	; (8000780 <uart_commands+0x16c>)
 8000666:	601a      	str	r2, [r3, #0]
				strcpy (memo_valid_comando,memo_comando);
 8000668:	4b45      	ldr	r3, [pc, #276]	; (8000780 <uart_commands+0x16c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a42      	ldr	r2, [pc, #264]	; (8000778 <uart_commands+0x164>)
 800066e:	6812      	ldr	r2, [r2, #0]
 8000670:	4611      	mov	r1, r2
 8000672:	4618      	mov	r0, r3
 8000674:	f004 fdf8 	bl	8005268 <strcpy>
			}

			comando = _my_strtok(&rx_buffer[r_rx_bindex&(FIFO_LEN-1)], delim_1[0]);
 8000678:	4b3d      	ldr	r3, [pc, #244]	; (8000770 <uart_commands+0x15c>)
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	b29b      	uxth	r3, r3
 800067e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000682:	4a40      	ldr	r2, [pc, #256]	; (8000784 <uart_commands+0x170>)
 8000684:	4413      	add	r3, r2
 8000686:	4a40      	ldr	r2, [pc, #256]	; (8000788 <uart_commands+0x174>)
 8000688:	7812      	ldrb	r2, [r2, #0]
 800068a:	4611      	mov	r1, r2
 800068c:	4618      	mov	r0, r3
 800068e:	f000 f8ff 	bl	8000890 <_my_strtok>
 8000692:	4603      	mov	r3, r0
 8000694:	4a3d      	ldr	r2, [pc, #244]	; (800078c <uart_commands+0x178>)
 8000696:	6013      	str	r3, [r2, #0]
			memo_comando = (char*)malloc(strlen(comando)+1);//+1 para o caractere '\0'
 8000698:	4b3c      	ldr	r3, [pc, #240]	; (800078c <uart_commands+0x178>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff fdd9 	bl	8000254 <strlen>
 80006a2:	4603      	mov	r3, r0
 80006a4:	3301      	adds	r3, #1
 80006a6:	4618      	mov	r0, r3
 80006a8:	f004 fc18 	bl	8004edc <malloc>
 80006ac:	4603      	mov	r3, r0
 80006ae:	461a      	mov	r2, r3
 80006b0:	4b31      	ldr	r3, [pc, #196]	; (8000778 <uart_commands+0x164>)
 80006b2:	601a      	str	r2, [r3, #0]
			strcpy (memo_comando,comando);
 80006b4:	4b30      	ldr	r3, [pc, #192]	; (8000778 <uart_commands+0x164>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a34      	ldr	r2, [pc, #208]	; (800078c <uart_commands+0x178>)
 80006ba:	6812      	ldr	r2, [r2, #0]
 80006bc:	4611      	mov	r1, r2
 80006be:	4618      	mov	r0, r3
 80006c0:	f004 fdd2 	bl	8005268 <strcpy>
			r_rx_bindex += (strlen(comando)+1);
 80006c4:	4b31      	ldr	r3, [pc, #196]	; (800078c <uart_commands+0x178>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff fdc3 	bl	8000254 <strlen>
 80006ce:	4603      	mov	r3, r0
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	4b27      	ldr	r3, [pc, #156]	; (8000770 <uart_commands+0x15c>)
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	4413      	add	r3, r2
 80006da:	b29b      	uxth	r3, r3
 80006dc:	3301      	adds	r3, #1
 80006de:	b29a      	uxth	r2, r3
 80006e0:	4b23      	ldr	r3, [pc, #140]	; (8000770 <uart_commands+0x15c>)
 80006e2:	801a      	strh	r2, [r3, #0]
			token = strtok(comando, delim_2);
 80006e4:	4b29      	ldr	r3, [pc, #164]	; (800078c <uart_commands+0x178>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4929      	ldr	r1, [pc, #164]	; (8000790 <uart_commands+0x17c>)
 80006ea:	4618      	mov	r0, r3
 80006ec:	f004 fdc4 	bl	8005278 <strtok>
 80006f0:	4603      	mov	r3, r0
 80006f2:	4a28      	ldr	r2, [pc, #160]	; (8000794 <uart_commands+0x180>)
 80006f4:	6013      	str	r3, [r2, #0]
			_push_message(memo_comando);
 80006f6:	4b20      	ldr	r3, [pc, #128]	; (8000778 <uart_commands+0x164>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 f852 	bl	80007a4 <_push_message>
			append_char(delim_1[0]);
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <uart_commands+0x174>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	4618      	mov	r0, r3
 8000706:	f000 f87f 	bl	8000808 <append_char>

			switch(find_com(com_arr, token, 27)){
 800070a:	4b22      	ldr	r3, [pc, #136]	; (8000794 <uart_commands+0x180>)
 800070c:	6819      	ldr	r1, [r3, #0]
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	221b      	movs	r2, #27
 8000712:	4618      	mov	r0, r3
 8000714:	f000 f8e6 	bl	80008e4 <find_com>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d103      	bne.n	8000726 <uart_commands+0x112>
			case 0:
				_push_message("Funciona");
 800071e:	481e      	ldr	r0, [pc, #120]	; (8000798 <uart_commands+0x184>)
 8000720:	f000 f840 	bl	80007a4 <_push_message>
				break;
 8000724:	e006      	b.n	8000734 <uart_commands+0x120>
				default:
					_push_message("INVALID COMMAND!\n");
 8000726:	481d      	ldr	r0, [pc, #116]	; (800079c <uart_commands+0x188>)
 8000728:	f000 f83c 	bl	80007a4 <_push_message>
					 val_com_flag = FALSE;
 800072c:	4b13      	ldr	r3, [pc, #76]	; (800077c <uart_commands+0x168>)
 800072e:	2200      	movs	r2, #0
 8000730:	701a      	strb	r2, [r3, #0]
					break;
 8000732:	bf00      	nop
			}
			new_com--; //Limpa a flag de novo comando
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <uart_commands+0x160>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	3b01      	subs	r3, #1
 800073a:	b2da      	uxtb	r2, r3
 800073c:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <uart_commands+0x160>)
 800073e:	701a      	strb	r2, [r3, #0]
			append_char(delim_1[0]);
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <uart_commands+0x174>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	4618      	mov	r0, r3
 8000746:	f000 f85f 	bl	8000808 <append_char>
			//append_char('>');
			start_tx();
 800074a:	f000 f87b 	bl	8000844 <start_tx>
	}

 	if(tx_flag)
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <uart_commands+0x18c>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d004      	beq.n	8000760 <uart_commands+0x14c>
 	{
 		start_tx();
 8000756:	f000 f875 	bl	8000844 <start_tx>
 		tx_flag = FALSE;
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <uart_commands+0x18c>)
 800075c:	2200      	movs	r2, #0
 800075e:	701a      	strb	r2, [r3, #0]
 	}
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	0800614c 	.word	0x0800614c
 800076c:	20000496 	.word	0x20000496
 8000770:	2000049a 	.word	0x2000049a
 8000774:	20000093 	.word	0x20000093
 8000778:	200004a8 	.word	0x200004a8
 800077c:	20000495 	.word	0x20000495
 8000780:	200004ac 	.word	0x200004ac
 8000784:	20000094 	.word	0x20000094
 8000788:	20000090 	.word	0x20000090
 800078c:	200004a0 	.word	0x200004a0
 8000790:	20000000 	.word	0x20000000
 8000794:	200004a4 	.word	0x200004a4
 8000798:	08006150 	.word	0x08006150
 800079c:	0800615c 	.word	0x0800615c
 80007a0:	20000494 	.word	0x20000494

080007a4 <_push_message>:
void _push_message(char *message){
 80007a4:	b590      	push	{r4, r7, lr}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]

	char *aux_ptr;
	uint8_t i = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	72fb      	strb	r3, [r7, #11]
	aux_ptr = message;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	60fb      	str	r3, [r7, #12]

	for (i=0; i<strlen(message); i++){
 80007b4:	2300      	movs	r3, #0
 80007b6:	72fb      	strb	r3, [r7, #11]
 80007b8:	e015      	b.n	80007e6 <_push_message+0x42>

		 tx_buffer[w_tx_bindex&(FIFO_LEN-1)] = *aux_ptr;
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <_push_message+0x5c>)
 80007bc:	881b      	ldrh	r3, [r3, #0]
 80007be:	b29b      	uxth	r3, r3
 80007c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80007c4:	68fa      	ldr	r2, [r7, #12]
 80007c6:	7811      	ldrb	r1, [r2, #0]
 80007c8:	4a0e      	ldr	r2, [pc, #56]	; (8000804 <_push_message+0x60>)
 80007ca:	54d1      	strb	r1, [r2, r3]
		  aux_ptr++;
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	3301      	adds	r3, #1
 80007d0:	60fb      	str	r3, [r7, #12]
		  w_tx_bindex++;
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <_push_message+0x5c>)
 80007d4:	881b      	ldrh	r3, [r3, #0]
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	3301      	adds	r3, #1
 80007da:	b29a      	uxth	r2, r3
 80007dc:	4b08      	ldr	r3, [pc, #32]	; (8000800 <_push_message+0x5c>)
 80007de:	801a      	strh	r2, [r3, #0]
	for (i=0; i<strlen(message); i++){
 80007e0:	7afb      	ldrb	r3, [r7, #11]
 80007e2:	3301      	adds	r3, #1
 80007e4:	72fb      	strb	r3, [r7, #11]
 80007e6:	7afc      	ldrb	r4, [r7, #11]
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f7ff fd33 	bl	8000254 <strlen>
 80007ee:	4603      	mov	r3, r0
 80007f0:	429c      	cmp	r4, r3
 80007f2:	d3e2      	bcc.n	80007ba <_push_message+0x16>
	}
}
 80007f4:	bf00      	nop
 80007f6:	bf00      	nop
 80007f8:	3714      	adds	r7, #20
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd90      	pop	{r4, r7, pc}
 80007fe:	bf00      	nop
 8000800:	2000049c 	.word	0x2000049c
 8000804:	20000294 	.word	0x20000294

08000808 <append_char>:
void append_char(char caract){ // ACRESCENTA UM CARRIAGE RETURN NO TERMINAL
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	71fb      	strb	r3, [r7, #7]

	tx_buffer[w_tx_bindex&(FIFO_LEN-1)] = caract;
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <append_char+0x34>)
 8000814:	881b      	ldrh	r3, [r3, #0]
 8000816:	b29b      	uxth	r3, r3
 8000818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800081c:	4908      	ldr	r1, [pc, #32]	; (8000840 <append_char+0x38>)
 800081e:	79fa      	ldrb	r2, [r7, #7]
 8000820:	54ca      	strb	r2, [r1, r3]
	w_tx_bindex++;
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <append_char+0x34>)
 8000824:	881b      	ldrh	r3, [r3, #0]
 8000826:	b29b      	uxth	r3, r3
 8000828:	3301      	adds	r3, #1
 800082a:	b29a      	uxth	r2, r3
 800082c:	4b03      	ldr	r3, [pc, #12]	; (800083c <append_char+0x34>)
 800082e:	801a      	strh	r2, [r3, #0]
}
 8000830:	bf00      	nop
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	2000049c 	.word	0x2000049c
 8000840:	20000294 	.word	0x20000294

08000844 <start_tx>:
void start_tx(){
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0

	if (USART3->ISR & USART_ISR_TC){// Transmission Complete (TC) É ATIVADA QUANDO A TRANSMISSÃO É CONCLUIDA - CASO NAO ESTEJA CONCLUIDA NAO SE DEVE INVOCAR NOVAMENTE HAL_UART_Transmit_IT()
 8000848:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <start_tx+0x3c>)
 800084a:	69db      	ldr	r3, [r3, #28]
 800084c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000850:	2b00      	cmp	r3, #0
 8000852:	d012      	beq.n	800087a <start_tx+0x36>
		HAL_UART_Transmit_IT(&huart3, (uint8_t *)&tx_buffer[r_tx_bindex&(FIFO_LEN-1)],1);
 8000854:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <start_tx+0x40>)
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	b29b      	uxth	r3, r3
 800085a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800085e:	4a0a      	ldr	r2, [pc, #40]	; (8000888 <start_tx+0x44>)
 8000860:	4413      	add	r3, r2
 8000862:	2201      	movs	r2, #1
 8000864:	4619      	mov	r1, r3
 8000866:	4809      	ldr	r0, [pc, #36]	; (800088c <start_tx+0x48>)
 8000868:	f002 ffbe 	bl	80037e8 <HAL_UART_Transmit_IT>
		r_tx_bindex++;
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <start_tx+0x40>)
 800086e:	881b      	ldrh	r3, [r3, #0]
 8000870:	b29b      	uxth	r3, r3
 8000872:	3301      	adds	r3, #1
 8000874:	b29a      	uxth	r2, r3
 8000876:	4b03      	ldr	r3, [pc, #12]	; (8000884 <start_tx+0x40>)
 8000878:	801a      	strh	r2, [r3, #0]

	}
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40004800 	.word	0x40004800
 8000884:	20000498 	.word	0x20000498
 8000888:	20000294 	.word	0x20000294
 800088c:	20000514 	.word	0x20000514

08000890 <_my_strtok>:
char* _my_strtok(char* str, uint8_t delimiter){
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	460b      	mov	r3, r1
 800089a:	70fb      	strb	r3, [r7, #3]
	uint8_t i=0;
 800089c:	2300      	movs	r3, #0
 800089e:	73fb      	strb	r3, [r7, #15]
	for(i=0; str[i] != delimiter; i++){
 80008a0:	2300      	movs	r3, #0
 80008a2:	73fb      	strb	r3, [r7, #15]
 80008a4:	e009      	b.n	80008ba <_my_strtok+0x2a>
		i&= (FIFO_LEN-1);
		temp_arr[i] = str[i];
 80008a6:	7bfb      	ldrb	r3, [r7, #15]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	441a      	add	r2, r3
 80008ac:	7bfb      	ldrb	r3, [r7, #15]
 80008ae:	7811      	ldrb	r1, [r2, #0]
 80008b0:	4a0b      	ldr	r2, [pc, #44]	; (80008e0 <_my_strtok+0x50>)
 80008b2:	54d1      	strb	r1, [r2, r3]
	for(i=0; str[i] != delimiter; i++){
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
 80008b6:	3301      	adds	r3, #1
 80008b8:	73fb      	strb	r3, [r7, #15]
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	4413      	add	r3, r2
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	78fa      	ldrb	r2, [r7, #3]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d1ee      	bne.n	80008a6 <_my_strtok+0x16>

	}

	temp_arr[i] = '\0';
 80008c8:	7bfb      	ldrb	r3, [r7, #15]
 80008ca:	4a05      	ldr	r2, [pc, #20]	; (80008e0 <_my_strtok+0x50>)
 80008cc:	2100      	movs	r1, #0
 80008ce:	54d1      	strb	r1, [r2, r3]
	return temp_arr;
 80008d0:	4b03      	ldr	r3, [pc, #12]	; (80008e0 <_my_strtok+0x50>)
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	200004b0 	.word	0x200004b0

080008e4 <find_com>:
uint8_t find_com(char *com_array[], char*token, uint8_t arr_len){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	4613      	mov	r3, r2
 80008f0:	71fb      	strb	r3, [r7, #7]

	uint8_t i = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	75fb      	strb	r3, [r7, #23]
	while((strcmp(com_array[i], token))){
 80008f6:	e00a      	b.n	800090e <find_com+0x2a>
		if(i == (arr_len-1)){
 80008f8:	7dfa      	ldrb	r2, [r7, #23]
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	3b01      	subs	r3, #1
 80008fe:	429a      	cmp	r2, r3
 8000900:	d102      	bne.n	8000908 <find_com+0x24>
			i = -1;
 8000902:	23ff      	movs	r3, #255	; 0xff
 8000904:	75fb      	strb	r3, [r7, #23]
			break;
 8000906:	e00e      	b.n	8000926 <find_com+0x42>
		}
		i++;
 8000908:	7dfb      	ldrb	r3, [r7, #23]
 800090a:	3301      	adds	r3, #1
 800090c:	75fb      	strb	r3, [r7, #23]
	while((strcmp(com_array[i], token))){
 800090e:	7dfb      	ldrb	r3, [r7, #23]
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	68fa      	ldr	r2, [r7, #12]
 8000914:	4413      	add	r3, r2
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	68b9      	ldr	r1, [r7, #8]
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fc90 	bl	8000240 <strcmp>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d1e8      	bne.n	80008f8 <find_com+0x14>
	}
	return i;
 8000926:	7dfb      	ldrb	r3, [r7, #23]
}
 8000928:	4618      	mov	r0, r3
 800092a:	3718      	adds	r7, #24
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_GPIO_Init+0x2c>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a08      	ldr	r2, [pc, #32]	; (800095c <MX_GPIO_Init+0x2c>)
 800093c:	f043 0308 	orr.w	r3, r3, #8
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_GPIO_Init+0x2c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0308 	and.w	r3, r3, #8
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]

}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800

08000960 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000968:	1d39      	adds	r1, r7, #4
 800096a:	f04f 33ff 	mov.w	r3, #4294967295
 800096e:	2201      	movs	r2, #1
 8000970:	4803      	ldr	r0, [pc, #12]	; (8000980 <__io_putchar+0x20>)
 8000972:	f002 fdf1 	bl	8003558 <HAL_UART_Transmit>
	return ch;
 8000976:	687b      	ldr	r3, [r7, #4]
}
 8000978:	4618      	mov	r0, r3
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000514 	.word	0x20000514

08000984 <__io_getchar>:
int __io_getchar(void){
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	71fb      	strb	r3, [r7, #7]
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <__io_getchar+0x38>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	2208      	movs	r2, #8
 8000994:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000996:	1df9      	adds	r1, r7, #7
 8000998:	f04f 33ff 	mov.w	r3, #4294967295
 800099c:	2201      	movs	r2, #1
 800099e:	4807      	ldr	r0, [pc, #28]	; (80009bc <__io_getchar+0x38>)
 80009a0:	f002 fe5d 	bl	800365e <HAL_UART_Receive>
	HAL_UART_Transmit(&huart3,(uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80009a4:	1df9      	adds	r1, r7, #7
 80009a6:	f04f 33ff 	mov.w	r3, #4294967295
 80009aa:	2201      	movs	r2, #1
 80009ac:	4803      	ldr	r0, [pc, #12]	; (80009bc <__io_getchar+0x38>)
 80009ae:	f002 fdd3 	bl	8003558 <HAL_UART_Transmit>
	return ch;
 80009b2:	79fb      	ldrb	r3, [r7, #7]

}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000514 	.word	0x20000514

080009c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c4:	f000 fc29 	bl	800121a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c8:	f000 f822 	bl	8000a10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009cc:	f7ff ffb0 	bl	8000930 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80009d0:	f000 faf6 	bl	8000fc0 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80009d4:	f000 fa82 	bl	8000edc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  setvbuf(stdin, NULL, _IONBF, 0);
 80009d8:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <main+0x44>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	6858      	ldr	r0, [r3, #4]
 80009de:	2300      	movs	r3, #0
 80009e0:	2202      	movs	r2, #2
 80009e2:	2100      	movs	r1, #0
 80009e4:	f004 fb7a 	bl	80050dc <setvbuf>
  HAL_UART_Receive_IT(&huart3, (uint8_t *)&rx_data, 1);
 80009e8:	2201      	movs	r2, #1
 80009ea:	4907      	ldr	r1, [pc, #28]	; (8000a08 <main+0x48>)
 80009ec:	4807      	ldr	r0, [pc, #28]	; (8000a0c <main+0x4c>)
 80009ee:	f002 ff59 	bl	80038a4 <HAL_UART_Receive_IT>
  append_char('>');
 80009f2:	203e      	movs	r0, #62	; 0x3e
 80009f4:	f7ff ff08 	bl	8000808 <append_char>
  start_tx();
 80009f8:	f7ff ff24 	bl	8000844 <start_tx>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  uart_commands();
 80009fc:	f7ff fe0a 	bl	8000614 <uart_commands>
 8000a00:	e7fc      	b.n	80009fc <main+0x3c>
 8000a02:	bf00      	nop
 8000a04:	20000010 	.word	0x20000010
 8000a08:	20000091 	.word	0x20000091
 8000a0c:	20000514 	.word	0x20000514

08000a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b094      	sub	sp, #80	; 0x50
 8000a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	2234      	movs	r2, #52	; 0x34
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f004 fa64 	bl	8004eec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a24:	f107 0308 	add.w	r3, r7, #8
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a34:	4b2b      	ldr	r3, [pc, #172]	; (8000ae4 <SystemClock_Config+0xd4>)
 8000a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a38:	4a2a      	ldr	r2, [pc, #168]	; (8000ae4 <SystemClock_Config+0xd4>)
 8000a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a40:	4b28      	ldr	r3, [pc, #160]	; (8000ae4 <SystemClock_Config+0xd4>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a4c:	4b26      	ldr	r3, [pc, #152]	; (8000ae8 <SystemClock_Config+0xd8>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a25      	ldr	r2, [pc, #148]	; (8000ae8 <SystemClock_Config+0xd8>)
 8000a52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a56:	6013      	str	r3, [r2, #0]
 8000a58:	4b23      	ldr	r3, [pc, #140]	; (8000ae8 <SystemClock_Config+0xd8>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a60:	603b      	str	r3, [r7, #0]
 8000a62:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a64:	2302      	movs	r3, #2
 8000a66:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a6c:	2310      	movs	r3, #16
 8000a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a70:	2302      	movs	r3, #2
 8000a72:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a74:	2300      	movs	r3, #0
 8000a76:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a78:	2308      	movs	r3, #8
 8000a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000a7c:	23d8      	movs	r3, #216	; 0xd8
 8000a7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a80:	2302      	movs	r3, #2
 8000a82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a84:	2304      	movs	r3, #4
 8000a86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 ffbf 	bl	8001a14 <HAL_RCC_OscConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a9c:	f000 f826 	bl	8000aec <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000aa0:	f000 ff68 	bl	8001974 <HAL_PWREx_EnableOverDrive>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000aaa:	f000 f81f 	bl	8000aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aae:	230f      	movs	r3, #15
 8000ab0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000aba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000abe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000ac6:	f107 0308 	add.w	r3, r7, #8
 8000aca:	2107      	movs	r1, #7
 8000acc:	4618      	mov	r0, r3
 8000ace:	f001 fa4f 	bl	8001f70 <HAL_RCC_ClockConfig>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000ad8:	f000 f808 	bl	8000aec <Error_Handler>
  }
}
 8000adc:	bf00      	nop
 8000ade:	3750      	adds	r7, #80	; 0x50
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40007000 	.word	0x40007000

08000aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af0:	b672      	cpsid	i
}
 8000af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <Error_Handler+0x8>
	...

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000afe:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <HAL_MspInit+0x44>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	4a0e      	ldr	r2, [pc, #56]	; (8000b3c <HAL_MspInit+0x44>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b08:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <HAL_MspInit+0x44>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <HAL_MspInit+0x44>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	4a08      	ldr	r2, [pc, #32]	; (8000b3c <HAL_MspInit+0x44>)
 8000b1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b20:	6453      	str	r3, [r2, #68]	; 0x44
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_MspInit+0x44>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <NMI_Handler+0x4>

08000b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <HardFault_Handler+0x4>

08000b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <MemManage_Handler+0x4>

08000b52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <BusFault_Handler+0x4>

08000b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <UsageFault_Handler+0x4>

08000b5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8c:	f000 fb82 	bl	8001294 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b98:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <TIM2_IRQHandler+0x10>)
 8000b9a:	f002 f88e 	bl	8002cba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	200004c8 	.word	0x200004c8

08000ba8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000bac:	4802      	ldr	r0, [pc, #8]	; (8000bb8 <USART3_IRQHandler+0x10>)
 8000bae:	f002 febd 	bl	800392c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000514 	.word	0x20000514

08000bbc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]

	uint32_t i = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]

	if(huart == &huart3){
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a35      	ldr	r2, [pc, #212]	; (8000ca0 <HAL_UART_RxCpltCallback+0xe4>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d163      	bne.n	8000c98 <HAL_UART_RxCpltCallback+0xdc>

		HAL_UART_Receive_IT(&huart3, (uint8_t *)&rx_data, 1);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	4934      	ldr	r1, [pc, #208]	; (8000ca4 <HAL_UART_RxCpltCallback+0xe8>)
 8000bd4:	4832      	ldr	r0, [pc, #200]	; (8000ca0 <HAL_UART_RxCpltCallback+0xe4>)
 8000bd6:	f002 fe65 	bl	80038a4 <HAL_UART_Receive_IT>
		rx_buffer[w_rx_bindex&(FIFO_LEN-1)] = rx_data;
 8000bda:	4b33      	ldr	r3, [pc, #204]	; (8000ca8 <HAL_UART_RxCpltCallback+0xec>)
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000be4:	4a2f      	ldr	r2, [pc, #188]	; (8000ca4 <HAL_UART_RxCpltCallback+0xe8>)
 8000be6:	7811      	ldrb	r1, [r2, #0]
 8000be8:	4a30      	ldr	r2, [pc, #192]	; (8000cac <HAL_UART_RxCpltCallback+0xf0>)
 8000bea:	54d1      	strb	r1, [r2, r3]
		w_rx_bindex++;
 8000bec:	4b2e      	ldr	r3, [pc, #184]	; (8000ca8 <HAL_UART_RxCpltCallback+0xec>)
 8000bee:	881b      	ldrh	r3, [r3, #0]
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	b29a      	uxth	r2, r3
 8000bf6:	4b2c      	ldr	r3, [pc, #176]	; (8000ca8 <HAL_UART_RxCpltCallback+0xec>)
 8000bf8:	801a      	strh	r2, [r3, #0]

		if((rx_data == '\n') || (rx_data == '\r'))
 8000bfa:	4b2a      	ldr	r3, [pc, #168]	; (8000ca4 <HAL_UART_RxCpltCallback+0xe8>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2b0a      	cmp	r3, #10
 8000c00:	d003      	beq.n	8000c0a <HAL_UART_RxCpltCallback+0x4e>
 8000c02:	4b28      	ldr	r3, [pc, #160]	; (8000ca4 <HAL_UART_RxCpltCallback+0xe8>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b0d      	cmp	r3, #13
 8000c08:	d10a      	bne.n	8000c20 <HAL_UART_RxCpltCallback+0x64>
		{
			new_com++;
 8000c0a:	4b29      	ldr	r3, [pc, #164]	; (8000cb0 <HAL_UART_RxCpltCallback+0xf4>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	4b27      	ldr	r3, [pc, #156]	; (8000cb0 <HAL_UART_RxCpltCallback+0xf4>)
 8000c14:	701a      	strb	r2, [r3, #0]
			delim_1[0] = rx_data;// dependendo de terminal pode estar configurado para carriage return ou new line
 8000c16:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <HAL_UART_RxCpltCallback+0xe8>)
 8000c18:	781a      	ldrb	r2, [r3, #0]
 8000c1a:	4b26      	ldr	r3, [pc, #152]	; (8000cb4 <HAL_UART_RxCpltCallback+0xf8>)
 8000c1c:	701a      	strb	r2, [r3, #0]
			w_rx_bindex-=2;
			rx_buffer[w_rx_bindex&(FIFO_LEN-1)] = 0;
			rx_buffer[(w_rx_bindex+1)&(FIFO_LEN-1)] = 0;
		}
	}
}
 8000c1e:	e03b      	b.n	8000c98 <HAL_UART_RxCpltCallback+0xdc>
		}else if(rx_data == '\e')
 8000c20:	4b20      	ldr	r3, [pc, #128]	; (8000ca4 <HAL_UART_RxCpltCallback+0xe8>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b1b      	cmp	r3, #27
 8000c26:	d11b      	bne.n	8000c60 <HAL_UART_RxCpltCallback+0xa4>
		 for(i = 0; i< FIFO_LEN; i++) // Limpa o array
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	e007      	b.n	8000c3e <HAL_UART_RxCpltCallback+0x82>
			  rx_buffer[i] = 0;
 8000c2e:	4a1f      	ldr	r2, [pc, #124]	; (8000cac <HAL_UART_RxCpltCallback+0xf0>)
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	4413      	add	r3, r2
 8000c34:	2200      	movs	r2, #0
 8000c36:	701a      	strb	r2, [r3, #0]
		 for(i = 0; i< FIFO_LEN; i++) // Limpa o array
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c44:	d3f3      	bcc.n	8000c2e <HAL_UART_RxCpltCallback+0x72>
		  w_rx_bindex = 0;
 8000c46:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <HAL_UART_RxCpltCallback+0xec>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	801a      	strh	r2, [r3, #0]
		  r_rx_bindex = 0;
 8000c4c:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <HAL_UART_RxCpltCallback+0xfc>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	801a      	strh	r2, [r3, #0]
		  _push_message("ESC\rALL CLEAR\r\r>");
 8000c52:	481a      	ldr	r0, [pc, #104]	; (8000cbc <HAL_UART_RxCpltCallback+0x100>)
 8000c54:	f7ff fda6 	bl	80007a4 <_push_message>
		  tx_flag = TRUE; // EXSTE ALGO PARA TRANSMITIR
 8000c58:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <HAL_UART_RxCpltCallback+0x104>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	701a      	strb	r2, [r3, #0]
}
 8000c5e:	e01b      	b.n	8000c98 <HAL_UART_RxCpltCallback+0xdc>
		else if(rx_data == '\b')
 8000c60:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <HAL_UART_RxCpltCallback+0xe8>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b08      	cmp	r3, #8
 8000c66:	d117      	bne.n	8000c98 <HAL_UART_RxCpltCallback+0xdc>
			w_rx_bindex-=2;
 8000c68:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <HAL_UART_RxCpltCallback+0xec>)
 8000c6a:	881b      	ldrh	r3, [r3, #0]
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	3b02      	subs	r3, #2
 8000c70:	b29a      	uxth	r2, r3
 8000c72:	4b0d      	ldr	r3, [pc, #52]	; (8000ca8 <HAL_UART_RxCpltCallback+0xec>)
 8000c74:	801a      	strh	r2, [r3, #0]
			rx_buffer[w_rx_bindex&(FIFO_LEN-1)] = 0;
 8000c76:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <HAL_UART_RxCpltCallback+0xec>)
 8000c78:	881b      	ldrh	r3, [r3, #0]
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c80:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <HAL_UART_RxCpltCallback+0xf0>)
 8000c82:	2100      	movs	r1, #0
 8000c84:	54d1      	strb	r1, [r2, r3]
			rx_buffer[(w_rx_bindex+1)&(FIFO_LEN-1)] = 0;
 8000c86:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <HAL_UART_RxCpltCallback+0xec>)
 8000c88:	881b      	ldrh	r3, [r3, #0]
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c92:	4a06      	ldr	r2, [pc, #24]	; (8000cac <HAL_UART_RxCpltCallback+0xf0>)
 8000c94:	2100      	movs	r1, #0
 8000c96:	54d1      	strb	r1, [r2, r3]
}
 8000c98:	bf00      	nop
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000514 	.word	0x20000514
 8000ca4:	20000091 	.word	0x20000091
 8000ca8:	20000496 	.word	0x20000496
 8000cac:	20000094 	.word	0x20000094
 8000cb0:	20000093 	.word	0x20000093
 8000cb4:	20000090 	.word	0x20000090
 8000cb8:	2000049a 	.word	0x2000049a
 8000cbc:	08006170 	.word	0x08006170
 8000cc0:	20000494 	.word	0x20000494

08000cc4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]

	if(huart == &huart3){
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a12      	ldr	r2, [pc, #72]	; (8000d18 <HAL_UART_TxCpltCallback+0x54>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d11c      	bne.n	8000d0e <HAL_UART_TxCpltCallback+0x4a>

		if((w_tx_bindex-r_tx_bindex) != 0)
 8000cd4:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <HAL_UART_TxCpltCallback+0x58>)
 8000cd6:	881b      	ldrh	r3, [r3, #0]
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <HAL_UART_TxCpltCallback+0x5c>)
 8000cdc:	881b      	ldrh	r3, [r3, #0]
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d014      	beq.n	8000d0e <HAL_UART_TxCpltCallback+0x4a>
		{
			tx_data = tx_buffer[r_tx_bindex&(FIFO_LEN-1)];
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <HAL_UART_TxCpltCallback+0x5c>)
 8000ce6:	881b      	ldrh	r3, [r3, #0]
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000cee:	4a0d      	ldr	r2, [pc, #52]	; (8000d24 <HAL_UART_TxCpltCallback+0x60>)
 8000cf0:	5cd2      	ldrb	r2, [r2, r3]
 8000cf2:	4b0d      	ldr	r3, [pc, #52]	; (8000d28 <HAL_UART_TxCpltCallback+0x64>)
 8000cf4:	701a      	strb	r2, [r3, #0]
			r_tx_bindex++;
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <HAL_UART_TxCpltCallback+0x5c>)
 8000cf8:	881b      	ldrh	r3, [r3, #0]
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <HAL_UART_TxCpltCallback+0x5c>)
 8000d02:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart3, (uint8_t *)&tx_data,1);
 8000d04:	2201      	movs	r2, #1
 8000d06:	4908      	ldr	r1, [pc, #32]	; (8000d28 <HAL_UART_TxCpltCallback+0x64>)
 8000d08:	4803      	ldr	r0, [pc, #12]	; (8000d18 <HAL_UART_TxCpltCallback+0x54>)
 8000d0a:	f002 fd6d 	bl	80037e8 <HAL_UART_Transmit_IT>

		}
	}
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000514 	.word	0x20000514
 8000d1c:	2000049c 	.word	0x2000049c
 8000d20:	20000498 	.word	0x20000498
 8000d24:	20000294 	.word	0x20000294
 8000d28:	20000092 	.word	0x20000092

08000d2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return 1;
 8000d30:	2301      	movs	r3, #1
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <_kill>:

int _kill(int pid, int sig)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d46:	f004 f89f 	bl	8004e88 <__errno>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2216      	movs	r2, #22
 8000d4e:	601a      	str	r2, [r3, #0]
  return -1;
 8000d50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <_exit>:

void _exit (int status)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d64:	f04f 31ff 	mov.w	r1, #4294967295
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f7ff ffe7 	bl	8000d3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d6e:	e7fe      	b.n	8000d6e <_exit+0x12>

08000d70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	e00a      	b.n	8000d98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d82:	f7ff fdff 	bl	8000984 <__io_getchar>
 8000d86:	4601      	mov	r1, r0
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	1c5a      	adds	r2, r3, #1
 8000d8c:	60ba      	str	r2, [r7, #8]
 8000d8e:	b2ca      	uxtb	r2, r1
 8000d90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	3301      	adds	r3, #1
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	697a      	ldr	r2, [r7, #20]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	dbf0      	blt.n	8000d82 <_read+0x12>
  }

  return len;
 8000da0:	687b      	ldr	r3, [r7, #4]
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3718      	adds	r7, #24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b086      	sub	sp, #24
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	60f8      	str	r0, [r7, #12]
 8000db2:	60b9      	str	r1, [r7, #8]
 8000db4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
 8000dba:	e009      	b.n	8000dd0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	1c5a      	adds	r2, r3, #1
 8000dc0:	60ba      	str	r2, [r7, #8]
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fdcb 	bl	8000960 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	617b      	str	r3, [r7, #20]
 8000dd0:	697a      	ldr	r2, [r7, #20]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	dbf1      	blt.n	8000dbc <_write+0x12>
  }
  return len;
 8000dd8:	687b      	ldr	r3, [r7, #4]
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <_close>:

int _close(int file)
{
 8000de2:	b480      	push	{r7}
 8000de4:	b083      	sub	sp, #12
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b083      	sub	sp, #12
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
 8000e02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e0a:	605a      	str	r2, [r3, #4]
  return 0;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <_isatty>:

int _isatty(int file)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b083      	sub	sp, #12
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e22:	2301      	movs	r3, #1
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3714      	adds	r7, #20
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
	...

08000e4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e54:	4a14      	ldr	r2, [pc, #80]	; (8000ea8 <_sbrk+0x5c>)
 8000e56:	4b15      	ldr	r3, [pc, #84]	; (8000eac <_sbrk+0x60>)
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e60:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <_sbrk+0x64>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d102      	bne.n	8000e6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e68:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <_sbrk+0x64>)
 8000e6a:	4a12      	ldr	r2, [pc, #72]	; (8000eb4 <_sbrk+0x68>)
 8000e6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e6e:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <_sbrk+0x64>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4413      	add	r3, r2
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d207      	bcs.n	8000e8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e7c:	f004 f804 	bl	8004e88 <__errno>
 8000e80:	4603      	mov	r3, r0
 8000e82:	220c      	movs	r2, #12
 8000e84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e86:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8a:	e009      	b.n	8000ea0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e8c:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <_sbrk+0x64>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e92:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <_sbrk+0x64>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4413      	add	r3, r2
 8000e9a:	4a05      	ldr	r2, [pc, #20]	; (8000eb0 <_sbrk+0x64>)
 8000e9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3718      	adds	r7, #24
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20080000 	.word	0x20080000
 8000eac:	00000400 	.word	0x00000400
 8000eb0:	200004c4 	.word	0x200004c4
 8000eb4:	200005b0 	.word	0x200005b0

08000eb8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <SystemInit+0x20>)
 8000ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ec2:	4a05      	ldr	r2, [pc, #20]	; (8000ed8 <SystemInit+0x20>)
 8000ec4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ec8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b088      	sub	sp, #32
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ee2:	f107 0310 	add.w	r3, r7, #16
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef0:	1d3b      	adds	r3, r7, #4
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000efa:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <MX_TIM2_Init+0x98>)
 8000efc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f00:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f02:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <MX_TIM2_Init+0x98>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f08:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <MX_TIM2_Init+0x98>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000f0e:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <MX_TIM2_Init+0x98>)
 8000f10:	f04f 32ff 	mov.w	r2, #4294967295
 8000f14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f16:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <MX_TIM2_Init+0x98>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1c:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <MX_TIM2_Init+0x98>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f22:	4814      	ldr	r0, [pc, #80]	; (8000f74 <MX_TIM2_Init+0x98>)
 8000f24:	f001 fe72 	bl	8002c0c <HAL_TIM_Base_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f2e:	f7ff fddd 	bl	8000aec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f38:	f107 0310 	add.w	r3, r7, #16
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	480d      	ldr	r0, [pc, #52]	; (8000f74 <MX_TIM2_Init+0x98>)
 8000f40:	f001 ffda 	bl	8002ef8 <HAL_TIM_ConfigClockSource>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f4a:	f7ff fdcf 	bl	8000aec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4806      	ldr	r0, [pc, #24]	; (8000f74 <MX_TIM2_Init+0x98>)
 8000f5c:	f002 fa02 	bl	8003364 <HAL_TIMEx_MasterConfigSynchronization>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f66:	f7ff fdc1 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	3720      	adds	r7, #32
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200004c8 	.word	0x200004c8

08000f78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f88:	d113      	bne.n	8000fb2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <HAL_TIM_Base_MspInit+0x44>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	4a0b      	ldr	r2, [pc, #44]	; (8000fbc <HAL_TIM_Base_MspInit+0x44>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6413      	str	r3, [r2, #64]	; 0x40
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <HAL_TIM_Base_MspInit+0x44>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	201c      	movs	r0, #28
 8000fa8:	f000 fa6f 	bl	800148a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fac:	201c      	movs	r0, #28
 8000fae:	f000 fa88 	bl	80014c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40023800 	.word	0x40023800

08000fc0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fc4:	4b14      	ldr	r3, [pc, #80]	; (8001018 <MX_USART3_UART_Init+0x58>)
 8000fc6:	4a15      	ldr	r2, [pc, #84]	; (800101c <MX_USART3_UART_Init+0x5c>)
 8000fc8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fca:	4b13      	ldr	r3, [pc, #76]	; (8001018 <MX_USART3_UART_Init+0x58>)
 8000fcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fd0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <MX_USART3_UART_Init+0x58>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <MX_USART3_UART_Init+0x58>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <MX_USART3_UART_Init+0x58>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <MX_USART3_UART_Init+0x58>)
 8000fe6:	220c      	movs	r2, #12
 8000fe8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <MX_USART3_UART_Init+0x58>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff0:	4b09      	ldr	r3, [pc, #36]	; (8001018 <MX_USART3_UART_Init+0x58>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <MX_USART3_UART_Init+0x58>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <MX_USART3_UART_Init+0x58>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001002:	4805      	ldr	r0, [pc, #20]	; (8001018 <MX_USART3_UART_Init+0x58>)
 8001004:	f002 fa5a 	bl	80034bc <HAL_UART_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800100e:	f7ff fd6d 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000514 	.word	0x20000514
 800101c:	40004800 	.word	0x40004800

08001020 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b0b4      	sub	sp, #208	; 0xd0
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001038:	f107 0318 	add.w	r3, r7, #24
 800103c:	2290      	movs	r2, #144	; 0x90
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f003 ff53 	bl	8004eec <memset>
  if(uartHandle->Instance==USART3)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a58      	ldr	r2, [pc, #352]	; (80011ac <HAL_UART_MspInit+0x18c>)
 800104c:	4293      	cmp	r3, r2
 800104e:	f040 80a8 	bne.w	80011a2 <HAL_UART_MspInit+0x182>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001052:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001056:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001058:	2300      	movs	r3, #0
 800105a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800105c:	f107 0318 	add.w	r3, r7, #24
 8001060:	4618      	mov	r0, r3
 8001062:	f001 f9ab 	bl	80023bc <HAL_RCCEx_PeriphCLKConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800106c:	f7ff fd3e 	bl	8000aec <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001070:	4b4f      	ldr	r3, [pc, #316]	; (80011b0 <HAL_UART_MspInit+0x190>)
 8001072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001074:	4a4e      	ldr	r2, [pc, #312]	; (80011b0 <HAL_UART_MspInit+0x190>)
 8001076:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800107a:	6413      	str	r3, [r2, #64]	; 0x40
 800107c:	4b4c      	ldr	r3, [pc, #304]	; (80011b0 <HAL_UART_MspInit+0x190>)
 800107e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001080:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001084:	617b      	str	r3, [r7, #20]
 8001086:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001088:	4b49      	ldr	r3, [pc, #292]	; (80011b0 <HAL_UART_MspInit+0x190>)
 800108a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108c:	4a48      	ldr	r2, [pc, #288]	; (80011b0 <HAL_UART_MspInit+0x190>)
 800108e:	f043 0308 	orr.w	r3, r3, #8
 8001092:	6313      	str	r3, [r2, #48]	; 0x30
 8001094:	4b46      	ldr	r3, [pc, #280]	; (80011b0 <HAL_UART_MspInit+0x190>)
 8001096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001098:	f003 0308 	and.w	r3, r3, #8
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	693b      	ldr	r3, [r7, #16]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b4:	2303      	movs	r3, #3
 80010b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010ba:	2307      	movs	r3, #7
 80010bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80010c4:	4619      	mov	r1, r3
 80010c6:	483b      	ldr	r0, [pc, #236]	; (80011b4 <HAL_UART_MspInit+0x194>)
 80010c8:	f000 faa8 	bl	800161c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2100      	movs	r1, #0
 80010d0:	2027      	movs	r0, #39	; 0x27
 80010d2:	f000 f9da 	bl	800148a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80010d6:	2027      	movs	r0, #39	; 0x27
 80010d8:	f000 f9f3 	bl	80014c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

    uint32_t *ptr_RCC_RCC_APB1ENR = RCC_base + 0x40;
 80010dc:	4b36      	ldr	r3, [pc, #216]	; (80011b8 <HAL_UART_MspInit+0x198>)
 80010de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    uint32_t *ptr_RCC_RCC_DCKCFGR2 = RCC_base + 0x90;
 80010e2:	4b36      	ldr	r3, [pc, #216]	; (80011bc <HAL_UART_MspInit+0x19c>)
 80010e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    uint32_t *ptr_GPIOD_GPIOx_MODER = GPIOD_base + 0x0;
 80010e8:	4b32      	ldr	r3, [pc, #200]	; (80011b4 <HAL_UART_MspInit+0x194>)
 80010ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    uint32_t *ptr_GPIOD_GPIOx_OSPEEDR = GPIOD_base + 0x08;
 80010ee:	4b34      	ldr	r3, [pc, #208]	; (80011c0 <HAL_UART_MspInit+0x1a0>)
 80010f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    uint32_t *ptr_GPIOD_GPIOx_AFRH = GPIOD_base + 0x24;
 80010f4:	4b33      	ldr	r3, [pc, #204]	; (80011c4 <HAL_UART_MspInit+0x1a4>)
 80010f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

    *ptr_RCC_RCC_DCKCFGR2 |= (UART3SEL) << UART3SEL_pos;// configurar o clock da USART3
 80010fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f043 0210 	orr.w	r2, r3, #16
 8001104:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001108:	601a      	str	r2, [r3, #0]

    *ptr_RCC_RCC_APB1ENR |= (RCC_USART3EN) << RCC_USART3EN_pos; //enable ao clock da USART3
 800110a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001114:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001118:	601a      	str	r2, [r3, #0]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800111a:	4b25      	ldr	r3, [pc, #148]	; (80011b0 <HAL_UART_MspInit+0x190>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a24      	ldr	r2, [pc, #144]	; (80011b0 <HAL_UART_MspInit+0x190>)
 8001120:	f043 0308 	orr.w	r3, r3, #8
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b22      	ldr	r3, [pc, #136]	; (80011b0 <HAL_UART_MspInit+0x190>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0308 	and.w	r3, r3, #8
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]

     *ptr_GPIOD_GPIOx_MODER |= (MODER9) << MODER9_pos; // TX & RX
 8001132:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800113c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001140:	601a      	str	r2, [r3, #0]
     *ptr_GPIOD_GPIOx_MODER |= (MODER8) << MODER8_pos;
 8001142:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800114c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001150:	601a      	str	r2, [r3, #0]

     *ptr_GPIOD_GPIOx_OSPEEDR |= (OSPEEDR9) << OSPEEDR9_pos;// Configurar speed
 8001152:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f443 2240 	orr.w	r2, r3, #786432	; 0xc0000
 800115c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001160:	601a      	str	r2, [r3, #0]
     *ptr_GPIOD_GPIOx_OSPEEDR |= (OSPEEDR8) << OSPEEDR8_pos;
 8001162:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f443 3240 	orr.w	r2, r3, #196608	; 0x30000
 800116c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001170:	601a      	str	r2, [r3, #0]

     *ptr_GPIOD_GPIOx_AFRH |= (AFR9) << AFR9_pos;   // configurar o alternate
 8001172:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f043 0270 	orr.w	r2, r3, #112	; 0x70
 800117c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001180:	601a      	str	r2, [r3, #0]
     *ptr_GPIOD_GPIOx_AFRH |= (AFR8) << AFR8_pos;
 8001182:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f043 0207 	orr.w	r2, r3, #7
 800118c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001190:	601a      	str	r2, [r3, #0]

     HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	2100      	movs	r1, #0
 8001196:	2027      	movs	r0, #39	; 0x27
 8001198:	f000 f977 	bl	800148a <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(USART3_IRQn);
 800119c:	2027      	movs	r0, #39	; 0x27
 800119e:	f000 f990 	bl	80014c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART3_MspInit 1 */
  }
}
 80011a2:	bf00      	nop
 80011a4:	37d0      	adds	r7, #208	; 0xd0
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40004800 	.word	0x40004800
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40020c00 	.word	0x40020c00
 80011b8:	40023840 	.word	0x40023840
 80011bc:	40023890 	.word	0x40023890
 80011c0:	40020c08 	.word	0x40020c08
 80011c4:	40020c24 	.word	0x40020c24

080011c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001200 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011cc:	480d      	ldr	r0, [pc, #52]	; (8001204 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011ce:	490e      	ldr	r1, [pc, #56]	; (8001208 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011d0:	4a0e      	ldr	r2, [pc, #56]	; (800120c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d4:	e002      	b.n	80011dc <LoopCopyDataInit>

080011d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011da:	3304      	adds	r3, #4

080011dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e0:	d3f9      	bcc.n	80011d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e2:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011e4:	4c0b      	ldr	r4, [pc, #44]	; (8001214 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e8:	e001      	b.n	80011ee <LoopFillZerobss>

080011ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ec:	3204      	adds	r2, #4

080011ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f0:	d3fb      	bcc.n	80011ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011f2:	f7ff fe61 	bl	8000eb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011f6:	f003 fe4d 	bl	8004e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011fa:	f7ff fbe1 	bl	80009c0 <main>
  bx  lr    
 80011fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001200:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001208:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800120c:	080062f4 	.word	0x080062f4
  ldr r2, =_sbss
 8001210:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001214:	200005b0 	.word	0x200005b0

08001218 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001218:	e7fe      	b.n	8001218 <ADC_IRQHandler>

0800121a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800121e:	2003      	movs	r0, #3
 8001220:	f000 f928 	bl	8001474 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001224:	2000      	movs	r0, #0
 8001226:	f000 f805 	bl	8001234 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800122a:	f7ff fc65 	bl	8000af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	bd80      	pop	{r7, pc}

08001234 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <HAL_InitTick+0x54>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_InitTick+0x58>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4619      	mov	r1, r3
 8001246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124a:	fbb3 f3f1 	udiv	r3, r3, r1
 800124e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001252:	4618      	mov	r0, r3
 8001254:	f000 f943 	bl	80014de <HAL_SYSTICK_Config>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e00e      	b.n	8001280 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b0f      	cmp	r3, #15
 8001266:	d80a      	bhi.n	800127e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001268:	2200      	movs	r2, #0
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	f04f 30ff 	mov.w	r0, #4294967295
 8001270:	f000 f90b 	bl	800148a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001274:	4a06      	ldr	r2, [pc, #24]	; (8001290 <HAL_InitTick+0x5c>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800127a:	2300      	movs	r3, #0
 800127c:	e000      	b.n	8001280 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
}
 8001280:	4618      	mov	r0, r3
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000004 	.word	0x20000004
 800128c:	2000000c 	.word	0x2000000c
 8001290:	20000008 	.word	0x20000008

08001294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_IncTick+0x20>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_IncTick+0x24>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <HAL_IncTick+0x24>)
 80012a6:	6013      	str	r3, [r2, #0]
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	2000000c 	.word	0x2000000c
 80012b8:	2000059c 	.word	0x2000059c

080012bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return uwTick;
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <HAL_GetTick+0x14>)
 80012c2:	681b      	ldr	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	2000059c 	.word	0x2000059c

080012d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e4:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <__NVIC_SetPriorityGrouping+0x40>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f0:	4013      	ands	r3, r2
 80012f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 80012fe:	4313      	orrs	r3, r2
 8001300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001302:	4a04      	ldr	r2, [pc, #16]	; (8001314 <__NVIC_SetPriorityGrouping+0x40>)
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	60d3      	str	r3, [r2, #12]
}
 8001308:	bf00      	nop
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	e000ed00 	.word	0xe000ed00
 8001318:	05fa0000 	.word	0x05fa0000

0800131c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001320:	4b04      	ldr	r3, [pc, #16]	; (8001334 <__NVIC_GetPriorityGrouping+0x18>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	0a1b      	lsrs	r3, r3, #8
 8001326:	f003 0307 	and.w	r3, r3, #7
}
 800132a:	4618      	mov	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	2b00      	cmp	r3, #0
 8001348:	db0b      	blt.n	8001362 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	f003 021f 	and.w	r2, r3, #31
 8001350:	4907      	ldr	r1, [pc, #28]	; (8001370 <__NVIC_EnableIRQ+0x38>)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	095b      	lsrs	r3, r3, #5
 8001358:	2001      	movs	r0, #1
 800135a:	fa00 f202 	lsl.w	r2, r0, r2
 800135e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000e100 	.word	0xe000e100

08001374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	6039      	str	r1, [r7, #0]
 800137e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001384:	2b00      	cmp	r3, #0
 8001386:	db0a      	blt.n	800139e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	b2da      	uxtb	r2, r3
 800138c:	490c      	ldr	r1, [pc, #48]	; (80013c0 <__NVIC_SetPriority+0x4c>)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	0112      	lsls	r2, r2, #4
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	440b      	add	r3, r1
 8001398:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800139c:	e00a      	b.n	80013b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4908      	ldr	r1, [pc, #32]	; (80013c4 <__NVIC_SetPriority+0x50>)
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	3b04      	subs	r3, #4
 80013ac:	0112      	lsls	r2, r2, #4
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	440b      	add	r3, r1
 80013b2:	761a      	strb	r2, [r3, #24]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000e100 	.word	0xe000e100
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b089      	sub	sp, #36	; 0x24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f1c3 0307 	rsb	r3, r3, #7
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	bf28      	it	cs
 80013e6:	2304      	movcs	r3, #4
 80013e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3304      	adds	r3, #4
 80013ee:	2b06      	cmp	r3, #6
 80013f0:	d902      	bls.n	80013f8 <NVIC_EncodePriority+0x30>
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3b03      	subs	r3, #3
 80013f6:	e000      	b.n	80013fa <NVIC_EncodePriority+0x32>
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43da      	mvns	r2, r3
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	401a      	ands	r2, r3
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001410:	f04f 31ff 	mov.w	r1, #4294967295
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	fa01 f303 	lsl.w	r3, r1, r3
 800141a:	43d9      	mvns	r1, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001420:	4313      	orrs	r3, r2
         );
}
 8001422:	4618      	mov	r0, r3
 8001424:	3724      	adds	r7, #36	; 0x24
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
	...

08001430 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3b01      	subs	r3, #1
 800143c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001440:	d301      	bcc.n	8001446 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001442:	2301      	movs	r3, #1
 8001444:	e00f      	b.n	8001466 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001446:	4a0a      	ldr	r2, [pc, #40]	; (8001470 <SysTick_Config+0x40>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3b01      	subs	r3, #1
 800144c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800144e:	210f      	movs	r1, #15
 8001450:	f04f 30ff 	mov.w	r0, #4294967295
 8001454:	f7ff ff8e 	bl	8001374 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <SysTick_Config+0x40>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800145e:	4b04      	ldr	r3, [pc, #16]	; (8001470 <SysTick_Config+0x40>)
 8001460:	2207      	movs	r2, #7
 8001462:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	e000e010 	.word	0xe000e010

08001474 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff ff29 	bl	80012d4 <__NVIC_SetPriorityGrouping>
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800148a:	b580      	push	{r7, lr}
 800148c:	b086      	sub	sp, #24
 800148e:	af00      	add	r7, sp, #0
 8001490:	4603      	mov	r3, r0
 8001492:	60b9      	str	r1, [r7, #8]
 8001494:	607a      	str	r2, [r7, #4]
 8001496:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800149c:	f7ff ff3e 	bl	800131c <__NVIC_GetPriorityGrouping>
 80014a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	68b9      	ldr	r1, [r7, #8]
 80014a6:	6978      	ldr	r0, [r7, #20]
 80014a8:	f7ff ff8e 	bl	80013c8 <NVIC_EncodePriority>
 80014ac:	4602      	mov	r2, r0
 80014ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b2:	4611      	mov	r1, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff5d 	bl	8001374 <__NVIC_SetPriority>
}
 80014ba:	bf00      	nop
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4603      	mov	r3, r0
 80014ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ff31 	bl	8001338 <__NVIC_EnableIRQ>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff ffa2 	bl	8001430 <SysTick_Config>
 80014ec:	4603      	mov	r3, r0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b084      	sub	sp, #16
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001502:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001504:	f7ff feda 	bl	80012bc <HAL_GetTick>
 8001508:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d008      	beq.n	8001528 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2280      	movs	r2, #128	; 0x80
 800151a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e052      	b.n	80015ce <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 0216 	bic.w	r2, r2, #22
 8001536:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	695a      	ldr	r2, [r3, #20]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001546:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154c:	2b00      	cmp	r3, #0
 800154e:	d103      	bne.n	8001558 <HAL_DMA_Abort+0x62>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001554:	2b00      	cmp	r3, #0
 8001556:	d007      	beq.n	8001568 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 0208 	bic.w	r2, r2, #8
 8001566:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 0201 	bic.w	r2, r2, #1
 8001576:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001578:	e013      	b.n	80015a2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800157a:	f7ff fe9f 	bl	80012bc <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b05      	cmp	r3, #5
 8001586:	d90c      	bls.n	80015a2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2220      	movs	r2, #32
 800158c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2203      	movs	r2, #3
 8001592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e015      	b.n	80015ce <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1e4      	bne.n	800157a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b4:	223f      	movs	r2, #63	; 0x3f
 80015b6:	409a      	lsls	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d004      	beq.n	80015f4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2280      	movs	r2, #128	; 0x80
 80015ee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e00c      	b.n	800160e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2205      	movs	r2, #5
 80015f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f022 0201 	bic.w	r2, r2, #1
 800160a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
	...

0800161c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800161c:	b480      	push	{r7}
 800161e:	b089      	sub	sp, #36	; 0x24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800162e:	2300      	movs	r3, #0
 8001630:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001632:	2300      	movs	r3, #0
 8001634:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
 800163a:	e175      	b.n	8001928 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800163c:	2201      	movs	r2, #1
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	4013      	ands	r3, r2
 800164e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	429a      	cmp	r2, r3
 8001656:	f040 8164 	bne.w	8001922 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f003 0303 	and.w	r3, r3, #3
 8001662:	2b01      	cmp	r3, #1
 8001664:	d005      	beq.n	8001672 <HAL_GPIO_Init+0x56>
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f003 0303 	and.w	r3, r3, #3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d130      	bne.n	80016d4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	2203      	movs	r2, #3
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43db      	mvns	r3, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4013      	ands	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	68da      	ldr	r2, [r3, #12]
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4313      	orrs	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016a8:	2201      	movs	r2, #1
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	091b      	lsrs	r3, r3, #4
 80016be:	f003 0201 	and.w	r2, r3, #1
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 0303 	and.w	r3, r3, #3
 80016dc:	2b03      	cmp	r3, #3
 80016de:	d017      	beq.n	8001710 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	2203      	movs	r2, #3
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4013      	ands	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4313      	orrs	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 0303 	and.w	r3, r3, #3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d123      	bne.n	8001764 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	08da      	lsrs	r2, r3, #3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3208      	adds	r2, #8
 8001724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	f003 0307 	and.w	r3, r3, #7
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	220f      	movs	r2, #15
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4013      	ands	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	691a      	ldr	r2, [r3, #16]
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	08da      	lsrs	r2, r3, #3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3208      	adds	r2, #8
 800175e:	69b9      	ldr	r1, [r7, #24]
 8001760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	2203      	movs	r2, #3
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4013      	ands	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 0203 	and.w	r2, r3, #3
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f000 80be 	beq.w	8001922 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a6:	4b66      	ldr	r3, [pc, #408]	; (8001940 <HAL_GPIO_Init+0x324>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	4a65      	ldr	r2, [pc, #404]	; (8001940 <HAL_GPIO_Init+0x324>)
 80017ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b0:	6453      	str	r3, [r2, #68]	; 0x44
 80017b2:	4b63      	ldr	r3, [pc, #396]	; (8001940 <HAL_GPIO_Init+0x324>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80017be:	4a61      	ldr	r2, [pc, #388]	; (8001944 <HAL_GPIO_Init+0x328>)
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	089b      	lsrs	r3, r3, #2
 80017c4:	3302      	adds	r3, #2
 80017c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f003 0303 	and.w	r3, r3, #3
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	220f      	movs	r2, #15
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4013      	ands	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a58      	ldr	r2, [pc, #352]	; (8001948 <HAL_GPIO_Init+0x32c>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d037      	beq.n	800185a <HAL_GPIO_Init+0x23e>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a57      	ldr	r2, [pc, #348]	; (800194c <HAL_GPIO_Init+0x330>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d031      	beq.n	8001856 <HAL_GPIO_Init+0x23a>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a56      	ldr	r2, [pc, #344]	; (8001950 <HAL_GPIO_Init+0x334>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d02b      	beq.n	8001852 <HAL_GPIO_Init+0x236>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a55      	ldr	r2, [pc, #340]	; (8001954 <HAL_GPIO_Init+0x338>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d025      	beq.n	800184e <HAL_GPIO_Init+0x232>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a54      	ldr	r2, [pc, #336]	; (8001958 <HAL_GPIO_Init+0x33c>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d01f      	beq.n	800184a <HAL_GPIO_Init+0x22e>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a53      	ldr	r2, [pc, #332]	; (800195c <HAL_GPIO_Init+0x340>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d019      	beq.n	8001846 <HAL_GPIO_Init+0x22a>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a52      	ldr	r2, [pc, #328]	; (8001960 <HAL_GPIO_Init+0x344>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d013      	beq.n	8001842 <HAL_GPIO_Init+0x226>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a51      	ldr	r2, [pc, #324]	; (8001964 <HAL_GPIO_Init+0x348>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d00d      	beq.n	800183e <HAL_GPIO_Init+0x222>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a50      	ldr	r2, [pc, #320]	; (8001968 <HAL_GPIO_Init+0x34c>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d007      	beq.n	800183a <HAL_GPIO_Init+0x21e>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a4f      	ldr	r2, [pc, #316]	; (800196c <HAL_GPIO_Init+0x350>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d101      	bne.n	8001836 <HAL_GPIO_Init+0x21a>
 8001832:	2309      	movs	r3, #9
 8001834:	e012      	b.n	800185c <HAL_GPIO_Init+0x240>
 8001836:	230a      	movs	r3, #10
 8001838:	e010      	b.n	800185c <HAL_GPIO_Init+0x240>
 800183a:	2308      	movs	r3, #8
 800183c:	e00e      	b.n	800185c <HAL_GPIO_Init+0x240>
 800183e:	2307      	movs	r3, #7
 8001840:	e00c      	b.n	800185c <HAL_GPIO_Init+0x240>
 8001842:	2306      	movs	r3, #6
 8001844:	e00a      	b.n	800185c <HAL_GPIO_Init+0x240>
 8001846:	2305      	movs	r3, #5
 8001848:	e008      	b.n	800185c <HAL_GPIO_Init+0x240>
 800184a:	2304      	movs	r3, #4
 800184c:	e006      	b.n	800185c <HAL_GPIO_Init+0x240>
 800184e:	2303      	movs	r3, #3
 8001850:	e004      	b.n	800185c <HAL_GPIO_Init+0x240>
 8001852:	2302      	movs	r3, #2
 8001854:	e002      	b.n	800185c <HAL_GPIO_Init+0x240>
 8001856:	2301      	movs	r3, #1
 8001858:	e000      	b.n	800185c <HAL_GPIO_Init+0x240>
 800185a:	2300      	movs	r3, #0
 800185c:	69fa      	ldr	r2, [r7, #28]
 800185e:	f002 0203 	and.w	r2, r2, #3
 8001862:	0092      	lsls	r2, r2, #2
 8001864:	4093      	lsls	r3, r2
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4313      	orrs	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800186c:	4935      	ldr	r1, [pc, #212]	; (8001944 <HAL_GPIO_Init+0x328>)
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	089b      	lsrs	r3, r3, #2
 8001872:	3302      	adds	r3, #2
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800187a:	4b3d      	ldr	r3, [pc, #244]	; (8001970 <HAL_GPIO_Init+0x354>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	43db      	mvns	r3, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4013      	ands	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	4313      	orrs	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800189e:	4a34      	ldr	r2, [pc, #208]	; (8001970 <HAL_GPIO_Init+0x354>)
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018a4:	4b32      	ldr	r3, [pc, #200]	; (8001970 <HAL_GPIO_Init+0x354>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4013      	ands	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018c8:	4a29      	ldr	r2, [pc, #164]	; (8001970 <HAL_GPIO_Init+0x354>)
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018ce:	4b28      	ldr	r3, [pc, #160]	; (8001970 <HAL_GPIO_Init+0x354>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	43db      	mvns	r3, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4013      	ands	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018f2:	4a1f      	ldr	r2, [pc, #124]	; (8001970 <HAL_GPIO_Init+0x354>)
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018f8:	4b1d      	ldr	r3, [pc, #116]	; (8001970 <HAL_GPIO_Init+0x354>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	43db      	mvns	r3, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4013      	ands	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800191c:	4a14      	ldr	r2, [pc, #80]	; (8001970 <HAL_GPIO_Init+0x354>)
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	3301      	adds	r3, #1
 8001926:	61fb      	str	r3, [r7, #28]
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	2b0f      	cmp	r3, #15
 800192c:	f67f ae86 	bls.w	800163c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001930:	bf00      	nop
 8001932:	bf00      	nop
 8001934:	3724      	adds	r7, #36	; 0x24
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	40023800 	.word	0x40023800
 8001944:	40013800 	.word	0x40013800
 8001948:	40020000 	.word	0x40020000
 800194c:	40020400 	.word	0x40020400
 8001950:	40020800 	.word	0x40020800
 8001954:	40020c00 	.word	0x40020c00
 8001958:	40021000 	.word	0x40021000
 800195c:	40021400 	.word	0x40021400
 8001960:	40021800 	.word	0x40021800
 8001964:	40021c00 	.word	0x40021c00
 8001968:	40022000 	.word	0x40022000
 800196c:	40022400 	.word	0x40022400
 8001970:	40013c00 	.word	0x40013c00

08001974 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800197e:	4b23      	ldr	r3, [pc, #140]	; (8001a0c <HAL_PWREx_EnableOverDrive+0x98>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	4a22      	ldr	r2, [pc, #136]	; (8001a0c <HAL_PWREx_EnableOverDrive+0x98>)
 8001984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001988:	6413      	str	r3, [r2, #64]	; 0x40
 800198a:	4b20      	ldr	r3, [pc, #128]	; (8001a0c <HAL_PWREx_EnableOverDrive+0x98>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001992:	603b      	str	r3, [r7, #0]
 8001994:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001996:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a1d      	ldr	r2, [pc, #116]	; (8001a10 <HAL_PWREx_EnableOverDrive+0x9c>)
 800199c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019a2:	f7ff fc8b 	bl	80012bc <HAL_GetTick>
 80019a6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80019a8:	e009      	b.n	80019be <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80019aa:	f7ff fc87 	bl	80012bc <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019b8:	d901      	bls.n	80019be <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e022      	b.n	8001a04 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80019be:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ca:	d1ee      	bne.n	80019aa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80019cc:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a0f      	ldr	r2, [pc, #60]	; (8001a10 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019d8:	f7ff fc70 	bl	80012bc <HAL_GetTick>
 80019dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80019de:	e009      	b.n	80019f4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80019e0:	f7ff fc6c 	bl	80012bc <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019ee:	d901      	bls.n	80019f4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e007      	b.n	8001a04 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80019f4:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a00:	d1ee      	bne.n	80019e0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40007000 	.word	0x40007000

08001a14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e29b      	b.n	8001f62 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f000 8087 	beq.w	8001b46 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a38:	4b96      	ldr	r3, [pc, #600]	; (8001c94 <HAL_RCC_OscConfig+0x280>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 030c 	and.w	r3, r3, #12
 8001a40:	2b04      	cmp	r3, #4
 8001a42:	d00c      	beq.n	8001a5e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a44:	4b93      	ldr	r3, [pc, #588]	; (8001c94 <HAL_RCC_OscConfig+0x280>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 030c 	and.w	r3, r3, #12
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	d112      	bne.n	8001a76 <HAL_RCC_OscConfig+0x62>
 8001a50:	4b90      	ldr	r3, [pc, #576]	; (8001c94 <HAL_RCC_OscConfig+0x280>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a5c:	d10b      	bne.n	8001a76 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a5e:	4b8d      	ldr	r3, [pc, #564]	; (8001c94 <HAL_RCC_OscConfig+0x280>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d06c      	beq.n	8001b44 <HAL_RCC_OscConfig+0x130>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d168      	bne.n	8001b44 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e275      	b.n	8001f62 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a7e:	d106      	bne.n	8001a8e <HAL_RCC_OscConfig+0x7a>
 8001a80:	4b84      	ldr	r3, [pc, #528]	; (8001c94 <HAL_RCC_OscConfig+0x280>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a83      	ldr	r2, [pc, #524]	; (8001c94 <HAL_RCC_OscConfig+0x280>)
 8001a86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	e02e      	b.n	8001aec <HAL_RCC_OscConfig+0xd8>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d10c      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x9c>
 8001a96:	4b7f      	ldr	r3, [pc, #508]	; (8001c94 <HAL_RCC_OscConfig+0x280>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a7e      	ldr	r2, [pc, #504]	; (8001c94 <HAL_RCC_OscConfig+0x280>)
 8001a9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	4b7c      	ldr	r3, [pc, #496]	; (8001c94 <HAL_RCC_OscConfig+0x280>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a7b      	ldr	r2, [pc, #492]	; (8001c94 <HAL_RCC_OscConfig+0x280>)
 8001aa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	e01d      	b.n	8001aec <HAL_RCC_OscConfig+0xd8>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ab8:	d10c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0xc0>
 8001aba:	4b76      	ldr	r3, [pc, #472]	; (8001c94 <HAL_RCC_OscConfig+0x280>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a75      	ldr	r2, [pc, #468]	; (8001c94 <HAL_RCC_OscConfig+0x280>)
 8001ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	4b73      	ldr	r3, [pc, #460]	; (8001c94 <HAL_RCC_OscConfig+0x280>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a72      	ldr	r2, [pc, #456]	; (8001c94 <HAL_RCC_OscConfig+0x280>)
 8001acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	e00b      	b.n	8001aec <HAL_RCC_OscConfig+0xd8>
 8001ad4:	4b6f      	ldr	r3, [pc, #444]	; (8001c94 <HAL_RCC_OscConfig+0x280>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a6e      	ldr	r2, [pc, #440]	; (8001c94 <HAL_RCC_OscConfig+0x280>)
 8001ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	4b6c      	ldr	r3, [pc, #432]	; (8001c94 <HAL_RCC_OscConfig+0x280>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a6b      	ldr	r2, [pc, #428]	; (8001c94 <HAL_RCC_OscConfig+0x280>)
 8001ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d013      	beq.n	8001b1c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af4:	f7ff fbe2 	bl	80012bc <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001afc:	f7ff fbde 	bl	80012bc <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b64      	cmp	r3, #100	; 0x64
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e229      	b.n	8001f62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0e:	4b61      	ldr	r3, [pc, #388]	; (8001c94 <HAL_RCC_OscConfig+0x280>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0xe8>
 8001b1a:	e014      	b.n	8001b46 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1c:	f7ff fbce 	bl	80012bc <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b24:	f7ff fbca 	bl	80012bc <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b64      	cmp	r3, #100	; 0x64
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e215      	b.n	8001f62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b36:	4b57      	ldr	r3, [pc, #348]	; (8001c94 <HAL_RCC_OscConfig+0x280>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f0      	bne.n	8001b24 <HAL_RCC_OscConfig+0x110>
 8001b42:	e000      	b.n	8001b46 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d069      	beq.n	8001c26 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b52:	4b50      	ldr	r3, [pc, #320]	; (8001c94 <HAL_RCC_OscConfig+0x280>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 030c 	and.w	r3, r3, #12
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d00b      	beq.n	8001b76 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b5e:	4b4d      	ldr	r3, [pc, #308]	; (8001c94 <HAL_RCC_OscConfig+0x280>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 030c 	and.w	r3, r3, #12
 8001b66:	2b08      	cmp	r3, #8
 8001b68:	d11c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x190>
 8001b6a:	4b4a      	ldr	r3, [pc, #296]	; (8001c94 <HAL_RCC_OscConfig+0x280>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d116      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b76:	4b47      	ldr	r3, [pc, #284]	; (8001c94 <HAL_RCC_OscConfig+0x280>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d005      	beq.n	8001b8e <HAL_RCC_OscConfig+0x17a>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d001      	beq.n	8001b8e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e1e9      	b.n	8001f62 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8e:	4b41      	ldr	r3, [pc, #260]	; (8001c94 <HAL_RCC_OscConfig+0x280>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	493d      	ldr	r1, [pc, #244]	; (8001c94 <HAL_RCC_OscConfig+0x280>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba2:	e040      	b.n	8001c26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d023      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bac:	4b39      	ldr	r3, [pc, #228]	; (8001c94 <HAL_RCC_OscConfig+0x280>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a38      	ldr	r2, [pc, #224]	; (8001c94 <HAL_RCC_OscConfig+0x280>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb8:	f7ff fb80 	bl	80012bc <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bc0:	f7ff fb7c 	bl	80012bc <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e1c7      	b.n	8001f62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd2:	4b30      	ldr	r3, [pc, #192]	; (8001c94 <HAL_RCC_OscConfig+0x280>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0f0      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bde:	4b2d      	ldr	r3, [pc, #180]	; (8001c94 <HAL_RCC_OscConfig+0x280>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	4929      	ldr	r1, [pc, #164]	; (8001c94 <HAL_RCC_OscConfig+0x280>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	600b      	str	r3, [r1, #0]
 8001bf2:	e018      	b.n	8001c26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bf4:	4b27      	ldr	r3, [pc, #156]	; (8001c94 <HAL_RCC_OscConfig+0x280>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a26      	ldr	r2, [pc, #152]	; (8001c94 <HAL_RCC_OscConfig+0x280>)
 8001bfa:	f023 0301 	bic.w	r3, r3, #1
 8001bfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c00:	f7ff fb5c 	bl	80012bc <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c08:	f7ff fb58 	bl	80012bc <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e1a3      	b.n	8001f62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c1a:	4b1e      	ldr	r3, [pc, #120]	; (8001c94 <HAL_RCC_OscConfig+0x280>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f0      	bne.n	8001c08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0308 	and.w	r3, r3, #8
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d038      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d019      	beq.n	8001c6e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c3a:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <HAL_RCC_OscConfig+0x280>)
 8001c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c3e:	4a15      	ldr	r2, [pc, #84]	; (8001c94 <HAL_RCC_OscConfig+0x280>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c46:	f7ff fb39 	bl	80012bc <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c4e:	f7ff fb35 	bl	80012bc <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e180      	b.n	8001f62 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <HAL_RCC_OscConfig+0x280>)
 8001c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0f0      	beq.n	8001c4e <HAL_RCC_OscConfig+0x23a>
 8001c6c:	e01a      	b.n	8001ca4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c6e:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <HAL_RCC_OscConfig+0x280>)
 8001c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c72:	4a08      	ldr	r2, [pc, #32]	; (8001c94 <HAL_RCC_OscConfig+0x280>)
 8001c74:	f023 0301 	bic.w	r3, r3, #1
 8001c78:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7a:	f7ff fb1f 	bl	80012bc <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c80:	e00a      	b.n	8001c98 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c82:	f7ff fb1b 	bl	80012bc <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d903      	bls.n	8001c98 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e166      	b.n	8001f62 <HAL_RCC_OscConfig+0x54e>
 8001c94:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c98:	4b92      	ldr	r3, [pc, #584]	; (8001ee4 <HAL_RCC_OscConfig+0x4d0>)
 8001c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1ee      	bne.n	8001c82 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f000 80a4 	beq.w	8001dfa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cb2:	4b8c      	ldr	r3, [pc, #560]	; (8001ee4 <HAL_RCC_OscConfig+0x4d0>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10d      	bne.n	8001cda <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cbe:	4b89      	ldr	r3, [pc, #548]	; (8001ee4 <HAL_RCC_OscConfig+0x4d0>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	4a88      	ldr	r2, [pc, #544]	; (8001ee4 <HAL_RCC_OscConfig+0x4d0>)
 8001cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cca:	4b86      	ldr	r3, [pc, #536]	; (8001ee4 <HAL_RCC_OscConfig+0x4d0>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd2:	60bb      	str	r3, [r7, #8]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cda:	4b83      	ldr	r3, [pc, #524]	; (8001ee8 <HAL_RCC_OscConfig+0x4d4>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d118      	bne.n	8001d18 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001ce6:	4b80      	ldr	r3, [pc, #512]	; (8001ee8 <HAL_RCC_OscConfig+0x4d4>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a7f      	ldr	r2, [pc, #508]	; (8001ee8 <HAL_RCC_OscConfig+0x4d4>)
 8001cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cf2:	f7ff fae3 	bl	80012bc <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cfa:	f7ff fadf 	bl	80012bc <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b64      	cmp	r3, #100	; 0x64
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e12a      	b.n	8001f62 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d0c:	4b76      	ldr	r3, [pc, #472]	; (8001ee8 <HAL_RCC_OscConfig+0x4d4>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0f0      	beq.n	8001cfa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d106      	bne.n	8001d2e <HAL_RCC_OscConfig+0x31a>
 8001d20:	4b70      	ldr	r3, [pc, #448]	; (8001ee4 <HAL_RCC_OscConfig+0x4d0>)
 8001d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d24:	4a6f      	ldr	r2, [pc, #444]	; (8001ee4 <HAL_RCC_OscConfig+0x4d0>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d2c:	e02d      	b.n	8001d8a <HAL_RCC_OscConfig+0x376>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10c      	bne.n	8001d50 <HAL_RCC_OscConfig+0x33c>
 8001d36:	4b6b      	ldr	r3, [pc, #428]	; (8001ee4 <HAL_RCC_OscConfig+0x4d0>)
 8001d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3a:	4a6a      	ldr	r2, [pc, #424]	; (8001ee4 <HAL_RCC_OscConfig+0x4d0>)
 8001d3c:	f023 0301 	bic.w	r3, r3, #1
 8001d40:	6713      	str	r3, [r2, #112]	; 0x70
 8001d42:	4b68      	ldr	r3, [pc, #416]	; (8001ee4 <HAL_RCC_OscConfig+0x4d0>)
 8001d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d46:	4a67      	ldr	r2, [pc, #412]	; (8001ee4 <HAL_RCC_OscConfig+0x4d0>)
 8001d48:	f023 0304 	bic.w	r3, r3, #4
 8001d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d4e:	e01c      	b.n	8001d8a <HAL_RCC_OscConfig+0x376>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	2b05      	cmp	r3, #5
 8001d56:	d10c      	bne.n	8001d72 <HAL_RCC_OscConfig+0x35e>
 8001d58:	4b62      	ldr	r3, [pc, #392]	; (8001ee4 <HAL_RCC_OscConfig+0x4d0>)
 8001d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5c:	4a61      	ldr	r2, [pc, #388]	; (8001ee4 <HAL_RCC_OscConfig+0x4d0>)
 8001d5e:	f043 0304 	orr.w	r3, r3, #4
 8001d62:	6713      	str	r3, [r2, #112]	; 0x70
 8001d64:	4b5f      	ldr	r3, [pc, #380]	; (8001ee4 <HAL_RCC_OscConfig+0x4d0>)
 8001d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d68:	4a5e      	ldr	r2, [pc, #376]	; (8001ee4 <HAL_RCC_OscConfig+0x4d0>)
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d70:	e00b      	b.n	8001d8a <HAL_RCC_OscConfig+0x376>
 8001d72:	4b5c      	ldr	r3, [pc, #368]	; (8001ee4 <HAL_RCC_OscConfig+0x4d0>)
 8001d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d76:	4a5b      	ldr	r2, [pc, #364]	; (8001ee4 <HAL_RCC_OscConfig+0x4d0>)
 8001d78:	f023 0301 	bic.w	r3, r3, #1
 8001d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d7e:	4b59      	ldr	r3, [pc, #356]	; (8001ee4 <HAL_RCC_OscConfig+0x4d0>)
 8001d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d82:	4a58      	ldr	r2, [pc, #352]	; (8001ee4 <HAL_RCC_OscConfig+0x4d0>)
 8001d84:	f023 0304 	bic.w	r3, r3, #4
 8001d88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d015      	beq.n	8001dbe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d92:	f7ff fa93 	bl	80012bc <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d98:	e00a      	b.n	8001db0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d9a:	f7ff fa8f 	bl	80012bc <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e0d8      	b.n	8001f62 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db0:	4b4c      	ldr	r3, [pc, #304]	; (8001ee4 <HAL_RCC_OscConfig+0x4d0>)
 8001db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d0ee      	beq.n	8001d9a <HAL_RCC_OscConfig+0x386>
 8001dbc:	e014      	b.n	8001de8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dbe:	f7ff fa7d 	bl	80012bc <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc4:	e00a      	b.n	8001ddc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc6:	f7ff fa79 	bl	80012bc <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e0c2      	b.n	8001f62 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ddc:	4b41      	ldr	r3, [pc, #260]	; (8001ee4 <HAL_RCC_OscConfig+0x4d0>)
 8001dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1ee      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001de8:	7dfb      	ldrb	r3, [r7, #23]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d105      	bne.n	8001dfa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dee:	4b3d      	ldr	r3, [pc, #244]	; (8001ee4 <HAL_RCC_OscConfig+0x4d0>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	4a3c      	ldr	r2, [pc, #240]	; (8001ee4 <HAL_RCC_OscConfig+0x4d0>)
 8001df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001df8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 80ae 	beq.w	8001f60 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e04:	4b37      	ldr	r3, [pc, #220]	; (8001ee4 <HAL_RCC_OscConfig+0x4d0>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 030c 	and.w	r3, r3, #12
 8001e0c:	2b08      	cmp	r3, #8
 8001e0e:	d06d      	beq.n	8001eec <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d14b      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e18:	4b32      	ldr	r3, [pc, #200]	; (8001ee4 <HAL_RCC_OscConfig+0x4d0>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a31      	ldr	r2, [pc, #196]	; (8001ee4 <HAL_RCC_OscConfig+0x4d0>)
 8001e1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e24:	f7ff fa4a 	bl	80012bc <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e2c:	f7ff fa46 	bl	80012bc <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e091      	b.n	8001f62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e3e:	4b29      	ldr	r3, [pc, #164]	; (8001ee4 <HAL_RCC_OscConfig+0x4d0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f0      	bne.n	8001e2c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69da      	ldr	r2, [r3, #28]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	431a      	orrs	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	019b      	lsls	r3, r3, #6
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e60:	085b      	lsrs	r3, r3, #1
 8001e62:	3b01      	subs	r3, #1
 8001e64:	041b      	lsls	r3, r3, #16
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6c:	061b      	lsls	r3, r3, #24
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e74:	071b      	lsls	r3, r3, #28
 8001e76:	491b      	ldr	r1, [pc, #108]	; (8001ee4 <HAL_RCC_OscConfig+0x4d0>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e7c:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <HAL_RCC_OscConfig+0x4d0>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a18      	ldr	r2, [pc, #96]	; (8001ee4 <HAL_RCC_OscConfig+0x4d0>)
 8001e82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e88:	f7ff fa18 	bl	80012bc <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e90:	f7ff fa14 	bl	80012bc <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e05f      	b.n	8001f62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <HAL_RCC_OscConfig+0x4d0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f0      	beq.n	8001e90 <HAL_RCC_OscConfig+0x47c>
 8001eae:	e057      	b.n	8001f60 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <HAL_RCC_OscConfig+0x4d0>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a0b      	ldr	r2, [pc, #44]	; (8001ee4 <HAL_RCC_OscConfig+0x4d0>)
 8001eb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7ff f9fe 	bl	80012bc <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec4:	f7ff f9fa 	bl	80012bc <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e045      	b.n	8001f62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ed6:	4b03      	ldr	r3, [pc, #12]	; (8001ee4 <HAL_RCC_OscConfig+0x4d0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f0      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x4b0>
 8001ee2:	e03d      	b.n	8001f60 <HAL_RCC_OscConfig+0x54c>
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001eec:	4b1f      	ldr	r3, [pc, #124]	; (8001f6c <HAL_RCC_OscConfig+0x558>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d030      	beq.n	8001f5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d129      	bne.n	8001f5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d122      	bne.n	8001f5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f22:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d119      	bne.n	8001f5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f32:	085b      	lsrs	r3, r3, #1
 8001f34:	3b01      	subs	r3, #1
 8001f36:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d10f      	bne.n	8001f5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f46:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d107      	bne.n	8001f5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d001      	beq.n	8001f60 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e000      	b.n	8001f62 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40023800 	.word	0x40023800

08001f70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e0d0      	b.n	800212a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f88:	4b6a      	ldr	r3, [pc, #424]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 030f 	and.w	r3, r3, #15
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d910      	bls.n	8001fb8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f96:	4b67      	ldr	r3, [pc, #412]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f023 020f 	bic.w	r2, r3, #15
 8001f9e:	4965      	ldr	r1, [pc, #404]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa6:	4b63      	ldr	r3, [pc, #396]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d001      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e0b8      	b.n	800212a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d020      	beq.n	8002006 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d005      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fd0:	4b59      	ldr	r3, [pc, #356]	; (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	4a58      	ldr	r2, [pc, #352]	; (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 8001fd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fda:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0308 	and.w	r3, r3, #8
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d005      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fe8:	4b53      	ldr	r3, [pc, #332]	; (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	4a52      	ldr	r2, [pc, #328]	; (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 8001fee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ff2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ff4:	4b50      	ldr	r3, [pc, #320]	; (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	494d      	ldr	r1, [pc, #308]	; (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 8002002:	4313      	orrs	r3, r2
 8002004:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d040      	beq.n	8002094 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d107      	bne.n	800202a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201a:	4b47      	ldr	r3, [pc, #284]	; (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d115      	bne.n	8002052 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e07f      	b.n	800212a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b02      	cmp	r3, #2
 8002030:	d107      	bne.n	8002042 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002032:	4b41      	ldr	r3, [pc, #260]	; (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d109      	bne.n	8002052 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e073      	b.n	800212a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002042:	4b3d      	ldr	r3, [pc, #244]	; (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e06b      	b.n	800212a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002052:	4b39      	ldr	r3, [pc, #228]	; (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f023 0203 	bic.w	r2, r3, #3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	4936      	ldr	r1, [pc, #216]	; (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 8002060:	4313      	orrs	r3, r2
 8002062:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002064:	f7ff f92a 	bl	80012bc <HAL_GetTick>
 8002068:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800206a:	e00a      	b.n	8002082 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800206c:	f7ff f926 	bl	80012bc <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	f241 3288 	movw	r2, #5000	; 0x1388
 800207a:	4293      	cmp	r3, r2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e053      	b.n	800212a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002082:	4b2d      	ldr	r3, [pc, #180]	; (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 020c 	and.w	r2, r3, #12
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	429a      	cmp	r2, r3
 8002092:	d1eb      	bne.n	800206c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002094:	4b27      	ldr	r3, [pc, #156]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 030f 	and.w	r3, r3, #15
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d210      	bcs.n	80020c4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a2:	4b24      	ldr	r3, [pc, #144]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f023 020f 	bic.w	r2, r3, #15
 80020aa:	4922      	ldr	r1, [pc, #136]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b2:	4b20      	ldr	r3, [pc, #128]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d001      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e032      	b.n	800212a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d008      	beq.n	80020e2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020d0:	4b19      	ldr	r3, [pc, #100]	; (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	4916      	ldr	r1, [pc, #88]	; (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d009      	beq.n	8002102 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020ee:	4b12      	ldr	r3, [pc, #72]	; (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	490e      	ldr	r1, [pc, #56]	; (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002102:	f000 f821 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 8002106:	4602      	mov	r2, r0
 8002108:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	091b      	lsrs	r3, r3, #4
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	490a      	ldr	r1, [pc, #40]	; (800213c <HAL_RCC_ClockConfig+0x1cc>)
 8002114:	5ccb      	ldrb	r3, [r1, r3]
 8002116:	fa22 f303 	lsr.w	r3, r2, r3
 800211a:	4a09      	ldr	r2, [pc, #36]	; (8002140 <HAL_RCC_ClockConfig+0x1d0>)
 800211c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800211e:	4b09      	ldr	r3, [pc, #36]	; (8002144 <HAL_RCC_ClockConfig+0x1d4>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff f886 	bl	8001234 <HAL_InitTick>

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40023c00 	.word	0x40023c00
 8002138:	40023800 	.word	0x40023800
 800213c:	08006184 	.word	0x08006184
 8002140:	20000004 	.word	0x20000004
 8002144:	20000008 	.word	0x20000008

08002148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002148:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800214c:	b094      	sub	sp, #80	; 0x50
 800214e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	647b      	str	r3, [r7, #68]	; 0x44
 8002154:	2300      	movs	r3, #0
 8002156:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002158:	2300      	movs	r3, #0
 800215a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800215c:	2300      	movs	r3, #0
 800215e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002160:	4b79      	ldr	r3, [pc, #484]	; (8002348 <HAL_RCC_GetSysClockFreq+0x200>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f003 030c 	and.w	r3, r3, #12
 8002168:	2b08      	cmp	r3, #8
 800216a:	d00d      	beq.n	8002188 <HAL_RCC_GetSysClockFreq+0x40>
 800216c:	2b08      	cmp	r3, #8
 800216e:	f200 80e1 	bhi.w	8002334 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002172:	2b00      	cmp	r3, #0
 8002174:	d002      	beq.n	800217c <HAL_RCC_GetSysClockFreq+0x34>
 8002176:	2b04      	cmp	r3, #4
 8002178:	d003      	beq.n	8002182 <HAL_RCC_GetSysClockFreq+0x3a>
 800217a:	e0db      	b.n	8002334 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800217c:	4b73      	ldr	r3, [pc, #460]	; (800234c <HAL_RCC_GetSysClockFreq+0x204>)
 800217e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002180:	e0db      	b.n	800233a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002182:	4b73      	ldr	r3, [pc, #460]	; (8002350 <HAL_RCC_GetSysClockFreq+0x208>)
 8002184:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002186:	e0d8      	b.n	800233a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002188:	4b6f      	ldr	r3, [pc, #444]	; (8002348 <HAL_RCC_GetSysClockFreq+0x200>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002190:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002192:	4b6d      	ldr	r3, [pc, #436]	; (8002348 <HAL_RCC_GetSysClockFreq+0x200>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d063      	beq.n	8002266 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800219e:	4b6a      	ldr	r3, [pc, #424]	; (8002348 <HAL_RCC_GetSysClockFreq+0x200>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	099b      	lsrs	r3, r3, #6
 80021a4:	2200      	movs	r2, #0
 80021a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80021a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80021aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021b0:	633b      	str	r3, [r7, #48]	; 0x30
 80021b2:	2300      	movs	r3, #0
 80021b4:	637b      	str	r3, [r7, #52]	; 0x34
 80021b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80021ba:	4622      	mov	r2, r4
 80021bc:	462b      	mov	r3, r5
 80021be:	f04f 0000 	mov.w	r0, #0
 80021c2:	f04f 0100 	mov.w	r1, #0
 80021c6:	0159      	lsls	r1, r3, #5
 80021c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021cc:	0150      	lsls	r0, r2, #5
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	4621      	mov	r1, r4
 80021d4:	1a51      	subs	r1, r2, r1
 80021d6:	6139      	str	r1, [r7, #16]
 80021d8:	4629      	mov	r1, r5
 80021da:	eb63 0301 	sbc.w	r3, r3, r1
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	f04f 0200 	mov.w	r2, #0
 80021e4:	f04f 0300 	mov.w	r3, #0
 80021e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80021ec:	4659      	mov	r1, fp
 80021ee:	018b      	lsls	r3, r1, #6
 80021f0:	4651      	mov	r1, sl
 80021f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021f6:	4651      	mov	r1, sl
 80021f8:	018a      	lsls	r2, r1, #6
 80021fa:	4651      	mov	r1, sl
 80021fc:	ebb2 0801 	subs.w	r8, r2, r1
 8002200:	4659      	mov	r1, fp
 8002202:	eb63 0901 	sbc.w	r9, r3, r1
 8002206:	f04f 0200 	mov.w	r2, #0
 800220a:	f04f 0300 	mov.w	r3, #0
 800220e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002212:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002216:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800221a:	4690      	mov	r8, r2
 800221c:	4699      	mov	r9, r3
 800221e:	4623      	mov	r3, r4
 8002220:	eb18 0303 	adds.w	r3, r8, r3
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	462b      	mov	r3, r5
 8002228:	eb49 0303 	adc.w	r3, r9, r3
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	f04f 0200 	mov.w	r2, #0
 8002232:	f04f 0300 	mov.w	r3, #0
 8002236:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800223a:	4629      	mov	r1, r5
 800223c:	024b      	lsls	r3, r1, #9
 800223e:	4621      	mov	r1, r4
 8002240:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002244:	4621      	mov	r1, r4
 8002246:	024a      	lsls	r2, r1, #9
 8002248:	4610      	mov	r0, r2
 800224a:	4619      	mov	r1, r3
 800224c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800224e:	2200      	movs	r2, #0
 8002250:	62bb      	str	r3, [r7, #40]	; 0x28
 8002252:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002254:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002258:	f7fe f85a 	bl	8000310 <__aeabi_uldivmod>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	4613      	mov	r3, r2
 8002262:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002264:	e058      	b.n	8002318 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002266:	4b38      	ldr	r3, [pc, #224]	; (8002348 <HAL_RCC_GetSysClockFreq+0x200>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	099b      	lsrs	r3, r3, #6
 800226c:	2200      	movs	r2, #0
 800226e:	4618      	mov	r0, r3
 8002270:	4611      	mov	r1, r2
 8002272:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002276:	623b      	str	r3, [r7, #32]
 8002278:	2300      	movs	r3, #0
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
 800227c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002280:	4642      	mov	r2, r8
 8002282:	464b      	mov	r3, r9
 8002284:	f04f 0000 	mov.w	r0, #0
 8002288:	f04f 0100 	mov.w	r1, #0
 800228c:	0159      	lsls	r1, r3, #5
 800228e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002292:	0150      	lsls	r0, r2, #5
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	4641      	mov	r1, r8
 800229a:	ebb2 0a01 	subs.w	sl, r2, r1
 800229e:	4649      	mov	r1, r9
 80022a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80022a4:	f04f 0200 	mov.w	r2, #0
 80022a8:	f04f 0300 	mov.w	r3, #0
 80022ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80022b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80022b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80022b8:	ebb2 040a 	subs.w	r4, r2, sl
 80022bc:	eb63 050b 	sbc.w	r5, r3, fp
 80022c0:	f04f 0200 	mov.w	r2, #0
 80022c4:	f04f 0300 	mov.w	r3, #0
 80022c8:	00eb      	lsls	r3, r5, #3
 80022ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022ce:	00e2      	lsls	r2, r4, #3
 80022d0:	4614      	mov	r4, r2
 80022d2:	461d      	mov	r5, r3
 80022d4:	4643      	mov	r3, r8
 80022d6:	18e3      	adds	r3, r4, r3
 80022d8:	603b      	str	r3, [r7, #0]
 80022da:	464b      	mov	r3, r9
 80022dc:	eb45 0303 	adc.w	r3, r5, r3
 80022e0:	607b      	str	r3, [r7, #4]
 80022e2:	f04f 0200 	mov.w	r2, #0
 80022e6:	f04f 0300 	mov.w	r3, #0
 80022ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022ee:	4629      	mov	r1, r5
 80022f0:	028b      	lsls	r3, r1, #10
 80022f2:	4621      	mov	r1, r4
 80022f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022f8:	4621      	mov	r1, r4
 80022fa:	028a      	lsls	r2, r1, #10
 80022fc:	4610      	mov	r0, r2
 80022fe:	4619      	mov	r1, r3
 8002300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002302:	2200      	movs	r2, #0
 8002304:	61bb      	str	r3, [r7, #24]
 8002306:	61fa      	str	r2, [r7, #28]
 8002308:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800230c:	f7fe f800 	bl	8000310 <__aeabi_uldivmod>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	4613      	mov	r3, r2
 8002316:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002318:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <HAL_RCC_GetSysClockFreq+0x200>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	0c1b      	lsrs	r3, r3, #16
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	3301      	adds	r3, #1
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002328:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800232a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800232c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002330:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002332:	e002      	b.n	800233a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002334:	4b05      	ldr	r3, [pc, #20]	; (800234c <HAL_RCC_GetSysClockFreq+0x204>)
 8002336:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002338:	bf00      	nop
    }
  }
  return sysclockfreq;
 800233a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800233c:	4618      	mov	r0, r3
 800233e:	3750      	adds	r7, #80	; 0x50
 8002340:	46bd      	mov	sp, r7
 8002342:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002346:	bf00      	nop
 8002348:	40023800 	.word	0x40023800
 800234c:	00f42400 	.word	0x00f42400
 8002350:	007a1200 	.word	0x007a1200

08002354 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002358:	4b03      	ldr	r3, [pc, #12]	; (8002368 <HAL_RCC_GetHCLKFreq+0x14>)
 800235a:	681b      	ldr	r3, [r3, #0]
}
 800235c:	4618      	mov	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	20000004 	.word	0x20000004

0800236c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002370:	f7ff fff0 	bl	8002354 <HAL_RCC_GetHCLKFreq>
 8002374:	4602      	mov	r2, r0
 8002376:	4b05      	ldr	r3, [pc, #20]	; (800238c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	0a9b      	lsrs	r3, r3, #10
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	4903      	ldr	r1, [pc, #12]	; (8002390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002382:	5ccb      	ldrb	r3, [r1, r3]
 8002384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002388:	4618      	mov	r0, r3
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40023800 	.word	0x40023800
 8002390:	08006194 	.word	0x08006194

08002394 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002398:	f7ff ffdc 	bl	8002354 <HAL_RCC_GetHCLKFreq>
 800239c:	4602      	mov	r2, r0
 800239e:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	0b5b      	lsrs	r3, r3, #13
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	4903      	ldr	r1, [pc, #12]	; (80023b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023aa:	5ccb      	ldrb	r3, [r1, r3]
 80023ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40023800 	.word	0x40023800
 80023b8:	08006194 	.word	0x08006194

080023bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b088      	sub	sp, #32
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80023c8:	2300      	movs	r3, #0
 80023ca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80023cc:	2300      	movs	r3, #0
 80023ce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d012      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80023e4:	4b69      	ldr	r3, [pc, #420]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	4a68      	ldr	r2, [pc, #416]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80023ee:	6093      	str	r3, [r2, #8]
 80023f0:	4b66      	ldr	r3, [pc, #408]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f8:	4964      	ldr	r1, [pc, #400]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002406:	2301      	movs	r3, #1
 8002408:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d017      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002416:	4b5d      	ldr	r3, [pc, #372]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002418:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800241c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002424:	4959      	ldr	r1, [pc, #356]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002426:	4313      	orrs	r3, r2
 8002428:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002430:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002434:	d101      	bne.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002436:	2301      	movs	r3, #1
 8002438:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002442:	2301      	movs	r3, #1
 8002444:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d017      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002452:	4b4e      	ldr	r3, [pc, #312]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002454:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002458:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	494a      	ldr	r1, [pc, #296]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002462:	4313      	orrs	r3, r2
 8002464:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002470:	d101      	bne.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002472:	2301      	movs	r3, #1
 8002474:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800247e:	2301      	movs	r3, #1
 8002480:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800248e:	2301      	movs	r3, #1
 8002490:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0320 	and.w	r3, r3, #32
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 808b 	beq.w	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80024a0:	4b3a      	ldr	r3, [pc, #232]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	4a39      	ldr	r2, [pc, #228]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024aa:	6413      	str	r3, [r2, #64]	; 0x40
 80024ac:	4b37      	ldr	r3, [pc, #220]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80024b8:	4b35      	ldr	r3, [pc, #212]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a34      	ldr	r2, [pc, #208]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80024be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024c4:	f7fe fefa 	bl	80012bc <HAL_GetTick>
 80024c8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024cc:	f7fe fef6 	bl	80012bc <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b64      	cmp	r3, #100	; 0x64
 80024d8:	d901      	bls.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e38f      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80024de:	4b2c      	ldr	r3, [pc, #176]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0f0      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024ea:	4b28      	ldr	r3, [pc, #160]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024f2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d035      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	429a      	cmp	r2, r3
 8002506:	d02e      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002508:	4b20      	ldr	r3, [pc, #128]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800250a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002510:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002512:	4b1e      	ldr	r3, [pc, #120]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002516:	4a1d      	ldr	r2, [pc, #116]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800251c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800251e:	4b1b      	ldr	r3, [pc, #108]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002522:	4a1a      	ldr	r2, [pc, #104]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002528:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800252a:	4a18      	ldr	r2, [pc, #96]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002530:	4b16      	ldr	r3, [pc, #88]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b01      	cmp	r3, #1
 800253a:	d114      	bne.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253c:	f7fe febe 	bl	80012bc <HAL_GetTick>
 8002540:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002542:	e00a      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002544:	f7fe feba 	bl	80012bc <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002552:	4293      	cmp	r3, r2
 8002554:	d901      	bls.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e351      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800255a:	4b0c      	ldr	r3, [pc, #48]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800255c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0ee      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800256e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002572:	d111      	bne.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002574:	4b05      	ldr	r3, [pc, #20]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002580:	4b04      	ldr	r3, [pc, #16]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002582:	400b      	ands	r3, r1
 8002584:	4901      	ldr	r1, [pc, #4]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002586:	4313      	orrs	r3, r2
 8002588:	608b      	str	r3, [r1, #8]
 800258a:	e00b      	b.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800258c:	40023800 	.word	0x40023800
 8002590:	40007000 	.word	0x40007000
 8002594:	0ffffcff 	.word	0x0ffffcff
 8002598:	4bac      	ldr	r3, [pc, #688]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	4aab      	ldr	r2, [pc, #684]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800259e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80025a2:	6093      	str	r3, [r2, #8]
 80025a4:	4ba9      	ldr	r3, [pc, #676]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b0:	49a6      	ldr	r1, [pc, #664]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0310 	and.w	r3, r3, #16
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d010      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80025c2:	4ba2      	ldr	r3, [pc, #648]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025c8:	4aa0      	ldr	r2, [pc, #640]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80025d2:	4b9e      	ldr	r3, [pc, #632]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025d4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025dc:	499b      	ldr	r1, [pc, #620]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00a      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025f0:	4b96      	ldr	r3, [pc, #600]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025fe:	4993      	ldr	r1, [pc, #588]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002600:	4313      	orrs	r3, r2
 8002602:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00a      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002612:	4b8e      	ldr	r3, [pc, #568]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002618:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002620:	498a      	ldr	r1, [pc, #552]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002622:	4313      	orrs	r3, r2
 8002624:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00a      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002634:	4b85      	ldr	r3, [pc, #532]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002642:	4982      	ldr	r1, [pc, #520]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002644:	4313      	orrs	r3, r2
 8002646:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00a      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002656:	4b7d      	ldr	r3, [pc, #500]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002664:	4979      	ldr	r1, [pc, #484]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002666:	4313      	orrs	r3, r2
 8002668:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00a      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002678:	4b74      	ldr	r3, [pc, #464]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800267a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800267e:	f023 0203 	bic.w	r2, r3, #3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002686:	4971      	ldr	r1, [pc, #452]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002688:	4313      	orrs	r3, r2
 800268a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00a      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800269a:	4b6c      	ldr	r3, [pc, #432]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800269c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a0:	f023 020c 	bic.w	r2, r3, #12
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026a8:	4968      	ldr	r1, [pc, #416]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00a      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026bc:	4b63      	ldr	r3, [pc, #396]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ca:	4960      	ldr	r1, [pc, #384]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00a      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026de:	4b5b      	ldr	r3, [pc, #364]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ec:	4957      	ldr	r1, [pc, #348]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00a      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002700:	4b52      	ldr	r3, [pc, #328]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002706:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270e:	494f      	ldr	r1, [pc, #316]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002710:	4313      	orrs	r3, r2
 8002712:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00a      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002722:	4b4a      	ldr	r3, [pc, #296]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002728:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002730:	4946      	ldr	r1, [pc, #280]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002732:	4313      	orrs	r3, r2
 8002734:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00a      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002744:	4b41      	ldr	r3, [pc, #260]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800274a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002752:	493e      	ldr	r1, [pc, #248]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002754:	4313      	orrs	r3, r2
 8002756:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00a      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002766:	4b39      	ldr	r3, [pc, #228]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002774:	4935      	ldr	r1, [pc, #212]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002776:	4313      	orrs	r3, r2
 8002778:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00a      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002788:	4b30      	ldr	r3, [pc, #192]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800278a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800278e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002796:	492d      	ldr	r1, [pc, #180]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002798:	4313      	orrs	r3, r2
 800279a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d011      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80027aa:	4b28      	ldr	r3, [pc, #160]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027b8:	4924      	ldr	r1, [pc, #144]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027c8:	d101      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80027ca:	2301      	movs	r3, #1
 80027cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80027da:	2301      	movs	r3, #1
 80027dc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00a      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027ea:	4b18      	ldr	r3, [pc, #96]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027f8:	4914      	ldr	r1, [pc, #80]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00b      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800280c:	4b0f      	ldr	r3, [pc, #60]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800280e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002812:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800281c:	490b      	ldr	r1, [pc, #44]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800281e:	4313      	orrs	r3, r2
 8002820:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00f      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002836:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002840:	4902      	ldr	r1, [pc, #8]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002842:	4313      	orrs	r3, r2
 8002844:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002848:	e002      	b.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800284a:	bf00      	nop
 800284c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00b      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800285c:	4b8a      	ldr	r3, [pc, #552]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800285e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002862:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286c:	4986      	ldr	r1, [pc, #536]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800286e:	4313      	orrs	r3, r2
 8002870:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00b      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002880:	4b81      	ldr	r3, [pc, #516]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002882:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002886:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002890:	497d      	ldr	r1, [pc, #500]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002892:	4313      	orrs	r3, r2
 8002894:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d006      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 80d6 	beq.w	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80028ac:	4b76      	ldr	r3, [pc, #472]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a75      	ldr	r2, [pc, #468]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028b8:	f7fe fd00 	bl	80012bc <HAL_GetTick>
 80028bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028be:	e008      	b.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80028c0:	f7fe fcfc 	bl	80012bc <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b64      	cmp	r3, #100	; 0x64
 80028cc:	d901      	bls.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e195      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028d2:	4b6d      	ldr	r3, [pc, #436]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f0      	bne.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d021      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d11d      	bne.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80028f2:	4b65      	ldr	r3, [pc, #404]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028f8:	0c1b      	lsrs	r3, r3, #16
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002900:	4b61      	ldr	r3, [pc, #388]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002902:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002906:	0e1b      	lsrs	r3, r3, #24
 8002908:	f003 030f 	and.w	r3, r3, #15
 800290c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	019a      	lsls	r2, r3, #6
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	041b      	lsls	r3, r3, #16
 8002918:	431a      	orrs	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	061b      	lsls	r3, r3, #24
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	071b      	lsls	r3, r3, #28
 8002926:	4958      	ldr	r1, [pc, #352]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002928:	4313      	orrs	r3, r2
 800292a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d004      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002942:	d00a      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800294c:	2b00      	cmp	r3, #0
 800294e:	d02e      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002958:	d129      	bne.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800295a:	4b4b      	ldr	r3, [pc, #300]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800295c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002960:	0c1b      	lsrs	r3, r3, #16
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002968:	4b47      	ldr	r3, [pc, #284]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800296a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800296e:	0f1b      	lsrs	r3, r3, #28
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	019a      	lsls	r2, r3, #6
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	041b      	lsls	r3, r3, #16
 8002980:	431a      	orrs	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	061b      	lsls	r3, r3, #24
 8002988:	431a      	orrs	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	071b      	lsls	r3, r3, #28
 800298e:	493e      	ldr	r1, [pc, #248]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002996:	4b3c      	ldr	r3, [pc, #240]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002998:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800299c:	f023 021f 	bic.w	r2, r3, #31
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	3b01      	subs	r3, #1
 80029a6:	4938      	ldr	r1, [pc, #224]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d01d      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80029ba:	4b33      	ldr	r3, [pc, #204]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029c0:	0e1b      	lsrs	r3, r3, #24
 80029c2:	f003 030f 	and.w	r3, r3, #15
 80029c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029c8:	4b2f      	ldr	r3, [pc, #188]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029ce:	0f1b      	lsrs	r3, r3, #28
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	019a      	lsls	r2, r3, #6
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	041b      	lsls	r3, r3, #16
 80029e2:	431a      	orrs	r2, r3
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	061b      	lsls	r3, r3, #24
 80029e8:	431a      	orrs	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	071b      	lsls	r3, r3, #28
 80029ee:	4926      	ldr	r1, [pc, #152]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d011      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	019a      	lsls	r2, r3, #6
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	041b      	lsls	r3, r3, #16
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	061b      	lsls	r3, r3, #24
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	071b      	lsls	r3, r3, #28
 8002a1e:	491a      	ldr	r1, [pc, #104]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a26:	4b18      	ldr	r3, [pc, #96]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a17      	ldr	r2, [pc, #92]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a32:	f7fe fc43 	bl	80012bc <HAL_GetTick>
 8002a36:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a38:	e008      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a3a:	f7fe fc3f 	bl	80012bc <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b64      	cmp	r3, #100	; 0x64
 8002a46:	d901      	bls.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e0d8      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a4c:	4b0e      	ldr	r3, [pc, #56]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0f0      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	f040 80ce 	bne.w	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002a60:	4b09      	ldr	r3, [pc, #36]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a08      	ldr	r2, [pc, #32]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a6c:	f7fe fc26 	bl	80012bc <HAL_GetTick>
 8002a70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a72:	e00b      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a74:	f7fe fc22 	bl	80012bc <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b64      	cmp	r3, #100	; 0x64
 8002a80:	d904      	bls.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e0bb      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a8c:	4b5e      	ldr	r3, [pc, #376]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a98:	d0ec      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d009      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d02e      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d12a      	bne.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ac2:	4b51      	ldr	r3, [pc, #324]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac8:	0c1b      	lsrs	r3, r3, #16
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ad0:	4b4d      	ldr	r3, [pc, #308]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad6:	0f1b      	lsrs	r3, r3, #28
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	019a      	lsls	r2, r3, #6
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	041b      	lsls	r3, r3, #16
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	061b      	lsls	r3, r3, #24
 8002af0:	431a      	orrs	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	071b      	lsls	r3, r3, #28
 8002af6:	4944      	ldr	r1, [pc, #272]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002afe:	4b42      	ldr	r3, [pc, #264]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b04:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	021b      	lsls	r3, r3, #8
 8002b10:	493d      	ldr	r1, [pc, #244]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d022      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b2c:	d11d      	bne.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b2e:	4b36      	ldr	r3, [pc, #216]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b34:	0e1b      	lsrs	r3, r3, #24
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b3c:	4b32      	ldr	r3, [pc, #200]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b42:	0f1b      	lsrs	r3, r3, #28
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	019a      	lsls	r2, r3, #6
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	041b      	lsls	r3, r3, #16
 8002b56:	431a      	orrs	r2, r3
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	061b      	lsls	r3, r3, #24
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	071b      	lsls	r3, r3, #28
 8002b62:	4929      	ldr	r1, [pc, #164]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d028      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b76:	4b24      	ldr	r3, [pc, #144]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7c:	0e1b      	lsrs	r3, r3, #24
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b84:	4b20      	ldr	r3, [pc, #128]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8a:	0c1b      	lsrs	r3, r3, #16
 8002b8c:	f003 0303 	and.w	r3, r3, #3
 8002b90:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	019a      	lsls	r2, r3, #6
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	041b      	lsls	r3, r3, #16
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	061b      	lsls	r3, r3, #24
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	071b      	lsls	r3, r3, #28
 8002baa:	4917      	ldr	r1, [pc, #92]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002bb2:	4b15      	ldr	r3, [pc, #84]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc0:	4911      	ldr	r1, [pc, #68]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002bc8:	4b0f      	ldr	r3, [pc, #60]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a0e      	ldr	r2, [pc, #56]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bd4:	f7fe fb72 	bl	80012bc <HAL_GetTick>
 8002bd8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002bda:	e008      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002bdc:	f7fe fb6e 	bl	80012bc <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b64      	cmp	r3, #100	; 0x64
 8002be8:	d901      	bls.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e007      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002bee:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bfa:	d1ef      	bne.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3720      	adds	r7, #32
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40023800 	.word	0x40023800

08002c0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e049      	b.n	8002cb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d106      	bne.n	8002c38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7fe f9a0 	bl	8000f78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3304      	adds	r3, #4
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4610      	mov	r0, r2
 8002c4c:	f000 fa50 	bl	80030f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b082      	sub	sp, #8
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d122      	bne.n	8002d16 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d11b      	bne.n	8002d16 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f06f 0202 	mvn.w	r2, #2
 8002ce6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	f003 0303 	and.w	r3, r3, #3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d003      	beq.n	8002d04 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 f9d9 	bl	80030b4 <HAL_TIM_IC_CaptureCallback>
 8002d02:	e005      	b.n	8002d10 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f9cb 	bl	80030a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f9dc 	bl	80030c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	d122      	bne.n	8002d6a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	f003 0304 	and.w	r3, r3, #4
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d11b      	bne.n	8002d6a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f06f 0204 	mvn.w	r2, #4
 8002d3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f9af 	bl	80030b4 <HAL_TIM_IC_CaptureCallback>
 8002d56:	e005      	b.n	8002d64 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 f9a1 	bl	80030a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f9b2 	bl	80030c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	f003 0308 	and.w	r3, r3, #8
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d122      	bne.n	8002dbe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b08      	cmp	r3, #8
 8002d84:	d11b      	bne.n	8002dbe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f06f 0208 	mvn.w	r2, #8
 8002d8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2204      	movs	r2, #4
 8002d94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	f003 0303 	and.w	r3, r3, #3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d003      	beq.n	8002dac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 f985 	bl	80030b4 <HAL_TIM_IC_CaptureCallback>
 8002daa:	e005      	b.n	8002db8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 f977 	bl	80030a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f988 	bl	80030c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	f003 0310 	and.w	r3, r3, #16
 8002dc8:	2b10      	cmp	r3, #16
 8002dca:	d122      	bne.n	8002e12 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	f003 0310 	and.w	r3, r3, #16
 8002dd6:	2b10      	cmp	r3, #16
 8002dd8:	d11b      	bne.n	8002e12 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f06f 0210 	mvn.w	r2, #16
 8002de2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2208      	movs	r2, #8
 8002de8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	69db      	ldr	r3, [r3, #28]
 8002df0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d003      	beq.n	8002e00 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 f95b 	bl	80030b4 <HAL_TIM_IC_CaptureCallback>
 8002dfe:	e005      	b.n	8002e0c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f94d 	bl	80030a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f95e 	bl	80030c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d10e      	bne.n	8002e3e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d107      	bne.n	8002e3e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f06f 0201 	mvn.w	r2, #1
 8002e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 f927 	bl	800308c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e48:	2b80      	cmp	r3, #128	; 0x80
 8002e4a:	d10e      	bne.n	8002e6a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e56:	2b80      	cmp	r3, #128	; 0x80
 8002e58:	d107      	bne.n	8002e6a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 fb15 	bl	8003494 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e78:	d10e      	bne.n	8002e98 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e84:	2b80      	cmp	r3, #128	; 0x80
 8002e86:	d107      	bne.n	8002e98 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 fb08 	bl	80034a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea2:	2b40      	cmp	r3, #64	; 0x40
 8002ea4:	d10e      	bne.n	8002ec4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb0:	2b40      	cmp	r3, #64	; 0x40
 8002eb2:	d107      	bne.n	8002ec4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f90c 	bl	80030dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	f003 0320 	and.w	r3, r3, #32
 8002ece:	2b20      	cmp	r3, #32
 8002ed0:	d10e      	bne.n	8002ef0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f003 0320 	and.w	r3, r3, #32
 8002edc:	2b20      	cmp	r3, #32
 8002ede:	d107      	bne.n	8002ef0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f06f 0220 	mvn.w	r2, #32
 8002ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fac8 	bl	8003480 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ef0:	bf00      	nop
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f02:	2300      	movs	r3, #0
 8002f04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d101      	bne.n	8002f14 <HAL_TIM_ConfigClockSource+0x1c>
 8002f10:	2302      	movs	r3, #2
 8002f12:	e0b4      	b.n	800307e <HAL_TIM_ConfigClockSource+0x186>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2202      	movs	r2, #2
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	4b56      	ldr	r3, [pc, #344]	; (8003088 <HAL_TIM_ConfigClockSource+0x190>)
 8002f30:	4013      	ands	r3, r2
 8002f32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68ba      	ldr	r2, [r7, #8]
 8002f42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f4c:	d03e      	beq.n	8002fcc <HAL_TIM_ConfigClockSource+0xd4>
 8002f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f52:	f200 8087 	bhi.w	8003064 <HAL_TIM_ConfigClockSource+0x16c>
 8002f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f5a:	f000 8086 	beq.w	800306a <HAL_TIM_ConfigClockSource+0x172>
 8002f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f62:	d87f      	bhi.n	8003064 <HAL_TIM_ConfigClockSource+0x16c>
 8002f64:	2b70      	cmp	r3, #112	; 0x70
 8002f66:	d01a      	beq.n	8002f9e <HAL_TIM_ConfigClockSource+0xa6>
 8002f68:	2b70      	cmp	r3, #112	; 0x70
 8002f6a:	d87b      	bhi.n	8003064 <HAL_TIM_ConfigClockSource+0x16c>
 8002f6c:	2b60      	cmp	r3, #96	; 0x60
 8002f6e:	d050      	beq.n	8003012 <HAL_TIM_ConfigClockSource+0x11a>
 8002f70:	2b60      	cmp	r3, #96	; 0x60
 8002f72:	d877      	bhi.n	8003064 <HAL_TIM_ConfigClockSource+0x16c>
 8002f74:	2b50      	cmp	r3, #80	; 0x50
 8002f76:	d03c      	beq.n	8002ff2 <HAL_TIM_ConfigClockSource+0xfa>
 8002f78:	2b50      	cmp	r3, #80	; 0x50
 8002f7a:	d873      	bhi.n	8003064 <HAL_TIM_ConfigClockSource+0x16c>
 8002f7c:	2b40      	cmp	r3, #64	; 0x40
 8002f7e:	d058      	beq.n	8003032 <HAL_TIM_ConfigClockSource+0x13a>
 8002f80:	2b40      	cmp	r3, #64	; 0x40
 8002f82:	d86f      	bhi.n	8003064 <HAL_TIM_ConfigClockSource+0x16c>
 8002f84:	2b30      	cmp	r3, #48	; 0x30
 8002f86:	d064      	beq.n	8003052 <HAL_TIM_ConfigClockSource+0x15a>
 8002f88:	2b30      	cmp	r3, #48	; 0x30
 8002f8a:	d86b      	bhi.n	8003064 <HAL_TIM_ConfigClockSource+0x16c>
 8002f8c:	2b20      	cmp	r3, #32
 8002f8e:	d060      	beq.n	8003052 <HAL_TIM_ConfigClockSource+0x15a>
 8002f90:	2b20      	cmp	r3, #32
 8002f92:	d867      	bhi.n	8003064 <HAL_TIM_ConfigClockSource+0x16c>
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d05c      	beq.n	8003052 <HAL_TIM_ConfigClockSource+0x15a>
 8002f98:	2b10      	cmp	r3, #16
 8002f9a:	d05a      	beq.n	8003052 <HAL_TIM_ConfigClockSource+0x15a>
 8002f9c:	e062      	b.n	8003064 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	6899      	ldr	r1, [r3, #8]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	f000 f9b9 	bl	8003324 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002fc0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	609a      	str	r2, [r3, #8]
      break;
 8002fca:	e04f      	b.n	800306c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6818      	ldr	r0, [r3, #0]
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	6899      	ldr	r1, [r3, #8]
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f000 f9a2 	bl	8003324 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fee:	609a      	str	r2, [r3, #8]
      break;
 8002ff0:	e03c      	b.n	800306c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6818      	ldr	r0, [r3, #0]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	6859      	ldr	r1, [r3, #4]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	461a      	mov	r2, r3
 8003000:	f000 f916 	bl	8003230 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2150      	movs	r1, #80	; 0x50
 800300a:	4618      	mov	r0, r3
 800300c:	f000 f96f 	bl	80032ee <TIM_ITRx_SetConfig>
      break;
 8003010:	e02c      	b.n	800306c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6818      	ldr	r0, [r3, #0]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	6859      	ldr	r1, [r3, #4]
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	461a      	mov	r2, r3
 8003020:	f000 f935 	bl	800328e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2160      	movs	r1, #96	; 0x60
 800302a:	4618      	mov	r0, r3
 800302c:	f000 f95f 	bl	80032ee <TIM_ITRx_SetConfig>
      break;
 8003030:	e01c      	b.n	800306c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6818      	ldr	r0, [r3, #0]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	6859      	ldr	r1, [r3, #4]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	461a      	mov	r2, r3
 8003040:	f000 f8f6 	bl	8003230 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2140      	movs	r1, #64	; 0x40
 800304a:	4618      	mov	r0, r3
 800304c:	f000 f94f 	bl	80032ee <TIM_ITRx_SetConfig>
      break;
 8003050:	e00c      	b.n	800306c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4619      	mov	r1, r3
 800305c:	4610      	mov	r0, r2
 800305e:	f000 f946 	bl	80032ee <TIM_ITRx_SetConfig>
      break;
 8003062:	e003      	b.n	800306c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	73fb      	strb	r3, [r7, #15]
      break;
 8003068:	e000      	b.n	800306c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800306a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800307c:	7bfb      	ldrb	r3, [r7, #15]
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	fffeff88 	.word	0xfffeff88

0800308c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a40      	ldr	r2, [pc, #256]	; (8003204 <TIM_Base_SetConfig+0x114>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d013      	beq.n	8003130 <TIM_Base_SetConfig+0x40>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800310e:	d00f      	beq.n	8003130 <TIM_Base_SetConfig+0x40>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a3d      	ldr	r2, [pc, #244]	; (8003208 <TIM_Base_SetConfig+0x118>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d00b      	beq.n	8003130 <TIM_Base_SetConfig+0x40>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a3c      	ldr	r2, [pc, #240]	; (800320c <TIM_Base_SetConfig+0x11c>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d007      	beq.n	8003130 <TIM_Base_SetConfig+0x40>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a3b      	ldr	r2, [pc, #236]	; (8003210 <TIM_Base_SetConfig+0x120>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d003      	beq.n	8003130 <TIM_Base_SetConfig+0x40>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a3a      	ldr	r2, [pc, #232]	; (8003214 <TIM_Base_SetConfig+0x124>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d108      	bne.n	8003142 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003136:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	4313      	orrs	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a2f      	ldr	r2, [pc, #188]	; (8003204 <TIM_Base_SetConfig+0x114>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d02b      	beq.n	80031a2 <TIM_Base_SetConfig+0xb2>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003150:	d027      	beq.n	80031a2 <TIM_Base_SetConfig+0xb2>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a2c      	ldr	r2, [pc, #176]	; (8003208 <TIM_Base_SetConfig+0x118>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d023      	beq.n	80031a2 <TIM_Base_SetConfig+0xb2>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a2b      	ldr	r2, [pc, #172]	; (800320c <TIM_Base_SetConfig+0x11c>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d01f      	beq.n	80031a2 <TIM_Base_SetConfig+0xb2>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a2a      	ldr	r2, [pc, #168]	; (8003210 <TIM_Base_SetConfig+0x120>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d01b      	beq.n	80031a2 <TIM_Base_SetConfig+0xb2>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a29      	ldr	r2, [pc, #164]	; (8003214 <TIM_Base_SetConfig+0x124>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d017      	beq.n	80031a2 <TIM_Base_SetConfig+0xb2>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a28      	ldr	r2, [pc, #160]	; (8003218 <TIM_Base_SetConfig+0x128>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d013      	beq.n	80031a2 <TIM_Base_SetConfig+0xb2>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a27      	ldr	r2, [pc, #156]	; (800321c <TIM_Base_SetConfig+0x12c>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d00f      	beq.n	80031a2 <TIM_Base_SetConfig+0xb2>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a26      	ldr	r2, [pc, #152]	; (8003220 <TIM_Base_SetConfig+0x130>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d00b      	beq.n	80031a2 <TIM_Base_SetConfig+0xb2>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a25      	ldr	r2, [pc, #148]	; (8003224 <TIM_Base_SetConfig+0x134>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d007      	beq.n	80031a2 <TIM_Base_SetConfig+0xb2>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a24      	ldr	r2, [pc, #144]	; (8003228 <TIM_Base_SetConfig+0x138>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d003      	beq.n	80031a2 <TIM_Base_SetConfig+0xb2>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a23      	ldr	r2, [pc, #140]	; (800322c <TIM_Base_SetConfig+0x13c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d108      	bne.n	80031b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	4313      	orrs	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a0a      	ldr	r2, [pc, #40]	; (8003204 <TIM_Base_SetConfig+0x114>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d003      	beq.n	80031e8 <TIM_Base_SetConfig+0xf8>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a0c      	ldr	r2, [pc, #48]	; (8003214 <TIM_Base_SetConfig+0x124>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d103      	bne.n	80031f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	691a      	ldr	r2, [r3, #16]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	615a      	str	r2, [r3, #20]
}
 80031f6:	bf00      	nop
 80031f8:	3714      	adds	r7, #20
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	40010000 	.word	0x40010000
 8003208:	40000400 	.word	0x40000400
 800320c:	40000800 	.word	0x40000800
 8003210:	40000c00 	.word	0x40000c00
 8003214:	40010400 	.word	0x40010400
 8003218:	40014000 	.word	0x40014000
 800321c:	40014400 	.word	0x40014400
 8003220:	40014800 	.word	0x40014800
 8003224:	40001800 	.word	0x40001800
 8003228:	40001c00 	.word	0x40001c00
 800322c:	40002000 	.word	0x40002000

08003230 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003230:	b480      	push	{r7}
 8003232:	b087      	sub	sp, #28
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	f023 0201 	bic.w	r2, r3, #1
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800325a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	4313      	orrs	r3, r2
 8003264:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f023 030a 	bic.w	r3, r3, #10
 800326c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	4313      	orrs	r3, r2
 8003274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	621a      	str	r2, [r3, #32]
}
 8003282:	bf00      	nop
 8003284:	371c      	adds	r7, #28
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800328e:	b480      	push	{r7}
 8003290:	b087      	sub	sp, #28
 8003292:	af00      	add	r7, sp, #0
 8003294:	60f8      	str	r0, [r7, #12]
 8003296:	60b9      	str	r1, [r7, #8]
 8003298:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	f023 0210 	bic.w	r2, r3, #16
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	031b      	lsls	r3, r3, #12
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	621a      	str	r2, [r3, #32]
}
 80032e2:	bf00      	nop
 80032e4:	371c      	adds	r7, #28
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b085      	sub	sp, #20
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
 80032f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003304:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4313      	orrs	r3, r2
 800330c:	f043 0307 	orr.w	r3, r3, #7
 8003310:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	609a      	str	r2, [r3, #8]
}
 8003318:	bf00      	nop
 800331a:	3714      	adds	r7, #20
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003324:	b480      	push	{r7}
 8003326:	b087      	sub	sp, #28
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
 8003330:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800333e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	021a      	lsls	r2, r3, #8
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	431a      	orrs	r2, r3
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	4313      	orrs	r3, r2
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	4313      	orrs	r3, r2
 8003350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	609a      	str	r2, [r3, #8]
}
 8003358:	bf00      	nop
 800335a:	371c      	adds	r7, #28
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003374:	2b01      	cmp	r3, #1
 8003376:	d101      	bne.n	800337c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003378:	2302      	movs	r3, #2
 800337a:	e06d      	b.n	8003458 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2202      	movs	r2, #2
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a30      	ldr	r2, [pc, #192]	; (8003464 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d004      	beq.n	80033b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a2f      	ldr	r2, [pc, #188]	; (8003468 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d108      	bne.n	80033c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80033b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	4313      	orrs	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a20      	ldr	r2, [pc, #128]	; (8003464 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d022      	beq.n	800342c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ee:	d01d      	beq.n	800342c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a1d      	ldr	r2, [pc, #116]	; (800346c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d018      	beq.n	800342c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a1c      	ldr	r2, [pc, #112]	; (8003470 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d013      	beq.n	800342c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a1a      	ldr	r2, [pc, #104]	; (8003474 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d00e      	beq.n	800342c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a15      	ldr	r2, [pc, #84]	; (8003468 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d009      	beq.n	800342c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a16      	ldr	r2, [pc, #88]	; (8003478 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d004      	beq.n	800342c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a15      	ldr	r2, [pc, #84]	; (800347c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d10c      	bne.n	8003446 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003432:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	4313      	orrs	r3, r2
 800343c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	40010000 	.word	0x40010000
 8003468:	40010400 	.word	0x40010400
 800346c:	40000400 	.word	0x40000400
 8003470:	40000800 	.word	0x40000800
 8003474:	40000c00 	.word	0x40000c00
 8003478:	40014000 	.word	0x40014000
 800347c:	40001800 	.word	0x40001800

08003480 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e040      	b.n	8003550 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d106      	bne.n	80034e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7fd fd9e 	bl	8001020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2224      	movs	r2, #36	; 0x24
 80034e8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0201 	bic.w	r2, r2, #1
 80034f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 fd1e 	bl	8003f3c <UART_SetConfig>
 8003500:	4603      	mov	r3, r0
 8003502:	2b01      	cmp	r3, #1
 8003504:	d101      	bne.n	800350a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e022      	b.n	8003550 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350e:	2b00      	cmp	r3, #0
 8003510:	d002      	beq.n	8003518 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 ff76 	bl	8004404 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003526:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003536:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0201 	orr.w	r2, r2, #1
 8003546:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 fffd 	bl	8004548 <UART_CheckIdleState>
 800354e:	4603      	mov	r3, r0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b08a      	sub	sp, #40	; 0x28
 800355c:	af02      	add	r7, sp, #8
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	603b      	str	r3, [r7, #0]
 8003564:	4613      	mov	r3, r2
 8003566:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800356c:	2b20      	cmp	r3, #32
 800356e:	d171      	bne.n	8003654 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <HAL_UART_Transmit+0x24>
 8003576:	88fb      	ldrh	r3, [r7, #6]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e06a      	b.n	8003656 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2221      	movs	r2, #33	; 0x21
 800358c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800358e:	f7fd fe95 	bl	80012bc <HAL_GetTick>
 8003592:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	88fa      	ldrh	r2, [r7, #6]
 8003598:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	88fa      	ldrh	r2, [r7, #6]
 80035a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ac:	d108      	bne.n	80035c0 <HAL_UART_Transmit+0x68>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d104      	bne.n	80035c0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80035b6:	2300      	movs	r3, #0
 80035b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	61bb      	str	r3, [r7, #24]
 80035be:	e003      	b.n	80035c8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035c4:	2300      	movs	r3, #0
 80035c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035c8:	e02c      	b.n	8003624 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2200      	movs	r2, #0
 80035d2:	2180      	movs	r1, #128	; 0x80
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f001 f804 	bl	80045e2 <UART_WaitOnFlagUntilTimeout>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e038      	b.n	8003656 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10b      	bne.n	8003602 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	881b      	ldrh	r3, [r3, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	3302      	adds	r3, #2
 80035fe:	61bb      	str	r3, [r7, #24]
 8003600:	e007      	b.n	8003612 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	781a      	ldrb	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	3301      	adds	r3, #1
 8003610:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003618:	b29b      	uxth	r3, r3
 800361a:	3b01      	subs	r3, #1
 800361c:	b29a      	uxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800362a:	b29b      	uxth	r3, r3
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1cc      	bne.n	80035ca <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	2200      	movs	r2, #0
 8003638:	2140      	movs	r1, #64	; 0x40
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f000 ffd1 	bl	80045e2 <UART_WaitOnFlagUntilTimeout>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e005      	b.n	8003656 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2220      	movs	r2, #32
 800364e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003650:	2300      	movs	r3, #0
 8003652:	e000      	b.n	8003656 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003654:	2302      	movs	r3, #2
  }
}
 8003656:	4618      	mov	r0, r3
 8003658:	3720      	adds	r7, #32
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b08a      	sub	sp, #40	; 0x28
 8003662:	af02      	add	r7, sp, #8
 8003664:	60f8      	str	r0, [r7, #12]
 8003666:	60b9      	str	r1, [r7, #8]
 8003668:	603b      	str	r3, [r7, #0]
 800366a:	4613      	mov	r3, r2
 800366c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003674:	2b20      	cmp	r3, #32
 8003676:	f040 80b1 	bne.w	80037dc <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d002      	beq.n	8003686 <HAL_UART_Receive+0x28>
 8003680:	88fb      	ldrh	r3, [r7, #6]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e0a9      	b.n	80037de <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2222      	movs	r2, #34	; 0x22
 8003696:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036a0:	f7fd fe0c 	bl	80012bc <HAL_GetTick>
 80036a4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	88fa      	ldrh	r2, [r7, #6]
 80036aa:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	88fa      	ldrh	r2, [r7, #6]
 80036b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036be:	d10e      	bne.n	80036de <HAL_UART_Receive+0x80>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d105      	bne.n	80036d4 <HAL_UART_Receive+0x76>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f240 12ff 	movw	r2, #511	; 0x1ff
 80036ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036d2:	e02d      	b.n	8003730 <HAL_UART_Receive+0xd2>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	22ff      	movs	r2, #255	; 0xff
 80036d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036dc:	e028      	b.n	8003730 <HAL_UART_Receive+0xd2>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10d      	bne.n	8003702 <HAL_UART_Receive+0xa4>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d104      	bne.n	80036f8 <HAL_UART_Receive+0x9a>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	22ff      	movs	r2, #255	; 0xff
 80036f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036f6:	e01b      	b.n	8003730 <HAL_UART_Receive+0xd2>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	227f      	movs	r2, #127	; 0x7f
 80036fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003700:	e016      	b.n	8003730 <HAL_UART_Receive+0xd2>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800370a:	d10d      	bne.n	8003728 <HAL_UART_Receive+0xca>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d104      	bne.n	800371e <HAL_UART_Receive+0xc0>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	227f      	movs	r2, #127	; 0x7f
 8003718:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800371c:	e008      	b.n	8003730 <HAL_UART_Receive+0xd2>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	223f      	movs	r2, #63	; 0x3f
 8003722:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003726:	e003      	b.n	8003730 <HAL_UART_Receive+0xd2>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003736:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003740:	d108      	bne.n	8003754 <HAL_UART_Receive+0xf6>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d104      	bne.n	8003754 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800374a:	2300      	movs	r3, #0
 800374c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	61bb      	str	r3, [r7, #24]
 8003752:	e003      	b.n	800375c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003758:	2300      	movs	r3, #0
 800375a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800375c:	e032      	b.n	80037c4 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	2200      	movs	r2, #0
 8003766:	2120      	movs	r1, #32
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 ff3a 	bl	80045e2 <UART_WaitOnFlagUntilTimeout>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e032      	b.n	80037de <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10c      	bne.n	8003798 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	b29a      	uxth	r2, r3
 8003786:	8a7b      	ldrh	r3, [r7, #18]
 8003788:	4013      	ands	r3, r2
 800378a:	b29a      	uxth	r2, r3
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	3302      	adds	r3, #2
 8003794:	61bb      	str	r3, [r7, #24]
 8003796:	e00c      	b.n	80037b2 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	8a7b      	ldrh	r3, [r7, #18]
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	4013      	ands	r3, r2
 80037a6:	b2da      	uxtb	r2, r3
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	3301      	adds	r3, #1
 80037b0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	3b01      	subs	r3, #1
 80037bc:	b29a      	uxth	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1c6      	bne.n	800375e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2220      	movs	r2, #32
 80037d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80037d8:	2300      	movs	r3, #0
 80037da:	e000      	b.n	80037de <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80037dc:	2302      	movs	r3, #2
  }
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3720      	adds	r7, #32
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
	...

080037e8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b08b      	sub	sp, #44	; 0x2c
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	4613      	mov	r3, r2
 80037f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037fa:	2b20      	cmp	r3, #32
 80037fc:	d147      	bne.n	800388e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d002      	beq.n	800380a <HAL_UART_Transmit_IT+0x22>
 8003804:	88fb      	ldrh	r3, [r7, #6]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e040      	b.n	8003890 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	88fa      	ldrh	r2, [r7, #6]
 8003818:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	88fa      	ldrh	r2, [r7, #6]
 8003820:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2221      	movs	r2, #33	; 0x21
 8003836:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003840:	d107      	bne.n	8003852 <HAL_UART_Transmit_IT+0x6a>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d103      	bne.n	8003852 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	4a13      	ldr	r2, [pc, #76]	; (800389c <HAL_UART_Transmit_IT+0xb4>)
 800384e:	66da      	str	r2, [r3, #108]	; 0x6c
 8003850:	e002      	b.n	8003858 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	4a12      	ldr	r2, [pc, #72]	; (80038a0 <HAL_UART_Transmit_IT+0xb8>)
 8003856:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	e853 3f00 	ldrex	r3, [r3]
 8003864:	613b      	str	r3, [r7, #16]
   return(result);
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800386c:	627b      	str	r3, [r7, #36]	; 0x24
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	461a      	mov	r2, r3
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	623b      	str	r3, [r7, #32]
 8003878:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387a:	69f9      	ldr	r1, [r7, #28]
 800387c:	6a3a      	ldr	r2, [r7, #32]
 800387e:	e841 2300 	strex	r3, r2, [r1]
 8003882:	61bb      	str	r3, [r7, #24]
   return(result);
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1e6      	bne.n	8003858 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800388a:	2300      	movs	r3, #0
 800388c:	e000      	b.n	8003890 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800388e:	2302      	movs	r3, #2
  }
}
 8003890:	4618      	mov	r0, r3
 8003892:	372c      	adds	r7, #44	; 0x2c
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr
 800389c:	08004aa7 	.word	0x08004aa7
 80038a0:	080049f1 	.word	0x080049f1

080038a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08a      	sub	sp, #40	; 0x28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	4613      	mov	r3, r2
 80038b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038b8:	2b20      	cmp	r3, #32
 80038ba:	d132      	bne.n	8003922 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d002      	beq.n	80038c8 <HAL_UART_Receive_IT+0x24>
 80038c2:	88fb      	ldrh	r3, [r7, #6]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e02b      	b.n	8003924 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d018      	beq.n	8003912 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	e853 3f00 	ldrex	r3, [r3]
 80038ec:	613b      	str	r3, [r7, #16]
   return(result);
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038f4:	627b      	str	r3, [r7, #36]	; 0x24
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	461a      	mov	r2, r3
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	623b      	str	r3, [r7, #32]
 8003900:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003902:	69f9      	ldr	r1, [r7, #28]
 8003904:	6a3a      	ldr	r2, [r7, #32]
 8003906:	e841 2300 	strex	r3, r2, [r1]
 800390a:	61bb      	str	r3, [r7, #24]
   return(result);
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1e6      	bne.n	80038e0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003912:	88fb      	ldrh	r3, [r7, #6]
 8003914:	461a      	mov	r2, r3
 8003916:	68b9      	ldr	r1, [r7, #8]
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 ff29 	bl	8004770 <UART_Start_Receive_IT>
 800391e:	4603      	mov	r3, r0
 8003920:	e000      	b.n	8003924 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003922:	2302      	movs	r3, #2
  }
}
 8003924:	4618      	mov	r0, r3
 8003926:	3728      	adds	r7, #40	; 0x28
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b0ba      	sub	sp, #232	; 0xe8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003952:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003956:	f640 030f 	movw	r3, #2063	; 0x80f
 800395a:	4013      	ands	r3, r2
 800395c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003960:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003964:	2b00      	cmp	r3, #0
 8003966:	d115      	bne.n	8003994 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800396c:	f003 0320 	and.w	r3, r3, #32
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00f      	beq.n	8003994 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003978:	f003 0320 	and.w	r3, r3, #32
 800397c:	2b00      	cmp	r3, #0
 800397e:	d009      	beq.n	8003994 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 82ac 	beq.w	8003ee2 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	4798      	blx	r3
      }
      return;
 8003992:	e2a6      	b.n	8003ee2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003994:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 8117 	beq.w	8003bcc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800399e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d106      	bne.n	80039b8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80039aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80039ae:	4b85      	ldr	r3, [pc, #532]	; (8003bc4 <HAL_UART_IRQHandler+0x298>)
 80039b0:	4013      	ands	r3, r2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 810a 	beq.w	8003bcc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80039b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d011      	beq.n	80039e8 <HAL_UART_IRQHandler+0xbc>
 80039c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00b      	beq.n	80039e8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2201      	movs	r2, #1
 80039d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039de:	f043 0201 	orr.w	r2, r3, #1
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d011      	beq.n	8003a18 <HAL_UART_IRQHandler+0xec>
 80039f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00b      	beq.n	8003a18 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2202      	movs	r2, #2
 8003a06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a0e:	f043 0204 	orr.w	r2, r3, #4
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d011      	beq.n	8003a48 <HAL_UART_IRQHandler+0x11c>
 8003a24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00b      	beq.n	8003a48 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2204      	movs	r2, #4
 8003a36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a3e:	f043 0202 	orr.w	r2, r3, #2
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a4c:	f003 0308 	and.w	r3, r3, #8
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d017      	beq.n	8003a84 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a58:	f003 0320 	and.w	r3, r3, #32
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d105      	bne.n	8003a6c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003a60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a64:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00b      	beq.n	8003a84 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2208      	movs	r2, #8
 8003a72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a7a:	f043 0208 	orr.w	r2, r3, #8
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d012      	beq.n	8003ab6 <HAL_UART_IRQHandler+0x18a>
 8003a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00c      	beq.n	8003ab6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003aa4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aac:	f043 0220 	orr.w	r2, r3, #32
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 8212 	beq.w	8003ee6 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ac6:	f003 0320 	and.w	r3, r3, #32
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00d      	beq.n	8003aea <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ad2:	f003 0320 	and.w	r3, r3, #32
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d007      	beq.n	8003aea <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d003      	beq.n	8003aea <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003af0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afe:	2b40      	cmp	r3, #64	; 0x40
 8003b00:	d005      	beq.n	8003b0e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003b02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b06:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d04f      	beq.n	8003bae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 fef4 	bl	80048fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1e:	2b40      	cmp	r3, #64	; 0x40
 8003b20:	d141      	bne.n	8003ba6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	3308      	adds	r3, #8
 8003b28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b30:	e853 3f00 	ldrex	r3, [r3]
 8003b34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	3308      	adds	r3, #8
 8003b4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b4e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b5e:	e841 2300 	strex	r3, r2, [r1]
 8003b62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1d9      	bne.n	8003b22 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d013      	beq.n	8003b9e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b7a:	4a13      	ldr	r2, [pc, #76]	; (8003bc8 <HAL_UART_IRQHandler+0x29c>)
 8003b7c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fd fd27 	bl	80015d6 <HAL_DMA_Abort_IT>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d017      	beq.n	8003bbe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003b98:	4610      	mov	r0, r2
 8003b9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b9c:	e00f      	b.n	8003bbe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f9ac 	bl	8003efc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba4:	e00b      	b.n	8003bbe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f9a8 	bl	8003efc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bac:	e007      	b.n	8003bbe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f9a4 	bl	8003efc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003bbc:	e193      	b.n	8003ee6 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bbe:	bf00      	nop
    return;
 8003bc0:	e191      	b.n	8003ee6 <HAL_UART_IRQHandler+0x5ba>
 8003bc2:	bf00      	nop
 8003bc4:	04000120 	.word	0x04000120
 8003bc8:	080049c5 	.word	0x080049c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	f040 814c 	bne.w	8003e6e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bda:	f003 0310 	and.w	r3, r3, #16
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f000 8145 	beq.w	8003e6e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003be8:	f003 0310 	and.w	r3, r3, #16
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 813e 	beq.w	8003e6e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2210      	movs	r2, #16
 8003bf8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c04:	2b40      	cmp	r3, #64	; 0x40
 8003c06:	f040 80b6 	bne.w	8003d76 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c16:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 8165 	beq.w	8003eea <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003c26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	f080 815d 	bcs.w	8003eea <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c36:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c3e:	69db      	ldr	r3, [r3, #28]
 8003c40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c44:	f000 8086 	beq.w	8003d54 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c54:	e853 3f00 	ldrex	r3, [r3]
 8003c58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003c72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003c76:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c82:	e841 2300 	strex	r3, r2, [r1]
 8003c86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1da      	bne.n	8003c48 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	3308      	adds	r3, #8
 8003c98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c9c:	e853 3f00 	ldrex	r3, [r3]
 8003ca0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003ca2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ca4:	f023 0301 	bic.w	r3, r3, #1
 8003ca8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	3308      	adds	r3, #8
 8003cb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003cb6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003cba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cbc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003cbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003cc2:	e841 2300 	strex	r3, r2, [r1]
 8003cc6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003cc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1e1      	bne.n	8003c92 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	3308      	adds	r3, #8
 8003cd4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cd8:	e853 3f00 	ldrex	r3, [r3]
 8003cdc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003cde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ce0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ce4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	3308      	adds	r3, #8
 8003cee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003cf2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003cf4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003cf8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003cfa:	e841 2300 	strex	r3, r2, [r1]
 8003cfe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1e3      	bne.n	8003cce <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d1c:	e853 3f00 	ldrex	r3, [r3]
 8003d20:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d24:	f023 0310 	bic.w	r3, r3, #16
 8003d28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	461a      	mov	r2, r3
 8003d32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d36:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d38:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d3e:	e841 2300 	strex	r3, r2, [r1]
 8003d42:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1e4      	bne.n	8003d14 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7fd fbd1 	bl	80014f6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f8ce 	bl	8003f10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d74:	e0b9      	b.n	8003eea <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 80ab 	beq.w	8003eee <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8003d98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 80a6 	beq.w	8003eee <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003daa:	e853 3f00 	ldrex	r3, [r3]
 8003dae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003db2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003db6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003dc4:	647b      	str	r3, [r7, #68]	; 0x44
 8003dc6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003dca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dcc:	e841 2300 	strex	r3, r2, [r1]
 8003dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1e4      	bne.n	8003da2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	3308      	adds	r3, #8
 8003dde:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	e853 3f00 	ldrex	r3, [r3]
 8003de6:	623b      	str	r3, [r7, #32]
   return(result);
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	f023 0301 	bic.w	r3, r3, #1
 8003dee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	3308      	adds	r3, #8
 8003df8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003dfc:	633a      	str	r2, [r7, #48]	; 0x30
 8003dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e04:	e841 2300 	strex	r3, r2, [r1]
 8003e08:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1e3      	bne.n	8003dd8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2220      	movs	r2, #32
 8003e14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	e853 3f00 	ldrex	r3, [r3]
 8003e30:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f023 0310 	bic.w	r3, r3, #16
 8003e38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	461a      	mov	r2, r3
 8003e42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e46:	61fb      	str	r3, [r7, #28]
 8003e48:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4a:	69b9      	ldr	r1, [r7, #24]
 8003e4c:	69fa      	ldr	r2, [r7, #28]
 8003e4e:	e841 2300 	strex	r3, r2, [r1]
 8003e52:	617b      	str	r3, [r7, #20]
   return(result);
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1e4      	bne.n	8003e24 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e64:	4619      	mov	r1, r3
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f852 	bl	8003f10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e6c:	e03f      	b.n	8003eee <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00e      	beq.n	8003e98 <HAL_UART_IRQHandler+0x56c>
 8003e7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d008      	beq.n	8003e98 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003e8e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f849 	bl	8003f28 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e96:	e02d      	b.n	8003ef4 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00e      	beq.n	8003ec2 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d008      	beq.n	8003ec2 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d01c      	beq.n	8003ef2 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	4798      	blx	r3
    }
    return;
 8003ec0:	e017      	b.n	8003ef2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d012      	beq.n	8003ef4 <HAL_UART_IRQHandler+0x5c8>
 8003ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00c      	beq.n	8003ef4 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 fe43 	bl	8004b66 <UART_EndTransmit_IT>
    return;
 8003ee0:	e008      	b.n	8003ef4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003ee2:	bf00      	nop
 8003ee4:	e006      	b.n	8003ef4 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003ee6:	bf00      	nop
 8003ee8:	e004      	b.n	8003ef4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003eea:	bf00      	nop
 8003eec:	e002      	b.n	8003ef4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003eee:	bf00      	nop
 8003ef0:	e000      	b.n	8003ef4 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003ef2:	bf00      	nop
  }

}
 8003ef4:	37e8      	adds	r7, #232	; 0xe8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop

08003efc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	460b      	mov	r3, r1
 8003f1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b088      	sub	sp, #32
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f44:	2300      	movs	r3, #0
 8003f46:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	431a      	orrs	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	4ba6      	ldr	r3, [pc, #664]	; (8004200 <UART_SetConfig+0x2c4>)
 8003f68:	4013      	ands	r3, r2
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6812      	ldr	r2, [r2, #0]
 8003f6e:	6979      	ldr	r1, [r7, #20]
 8003f70:	430b      	orrs	r3, r1
 8003f72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a94      	ldr	r2, [pc, #592]	; (8004204 <UART_SetConfig+0x2c8>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d120      	bne.n	8003ffa <UART_SetConfig+0xbe>
 8003fb8:	4b93      	ldr	r3, [pc, #588]	; (8004208 <UART_SetConfig+0x2cc>)
 8003fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fbe:	f003 0303 	and.w	r3, r3, #3
 8003fc2:	2b03      	cmp	r3, #3
 8003fc4:	d816      	bhi.n	8003ff4 <UART_SetConfig+0xb8>
 8003fc6:	a201      	add	r2, pc, #4	; (adr r2, 8003fcc <UART_SetConfig+0x90>)
 8003fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fcc:	08003fdd 	.word	0x08003fdd
 8003fd0:	08003fe9 	.word	0x08003fe9
 8003fd4:	08003fe3 	.word	0x08003fe3
 8003fd8:	08003fef 	.word	0x08003fef
 8003fdc:	2301      	movs	r3, #1
 8003fde:	77fb      	strb	r3, [r7, #31]
 8003fe0:	e150      	b.n	8004284 <UART_SetConfig+0x348>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	77fb      	strb	r3, [r7, #31]
 8003fe6:	e14d      	b.n	8004284 <UART_SetConfig+0x348>
 8003fe8:	2304      	movs	r3, #4
 8003fea:	77fb      	strb	r3, [r7, #31]
 8003fec:	e14a      	b.n	8004284 <UART_SetConfig+0x348>
 8003fee:	2308      	movs	r3, #8
 8003ff0:	77fb      	strb	r3, [r7, #31]
 8003ff2:	e147      	b.n	8004284 <UART_SetConfig+0x348>
 8003ff4:	2310      	movs	r3, #16
 8003ff6:	77fb      	strb	r3, [r7, #31]
 8003ff8:	e144      	b.n	8004284 <UART_SetConfig+0x348>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a83      	ldr	r2, [pc, #524]	; (800420c <UART_SetConfig+0x2d0>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d132      	bne.n	800406a <UART_SetConfig+0x12e>
 8004004:	4b80      	ldr	r3, [pc, #512]	; (8004208 <UART_SetConfig+0x2cc>)
 8004006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400a:	f003 030c 	and.w	r3, r3, #12
 800400e:	2b0c      	cmp	r3, #12
 8004010:	d828      	bhi.n	8004064 <UART_SetConfig+0x128>
 8004012:	a201      	add	r2, pc, #4	; (adr r2, 8004018 <UART_SetConfig+0xdc>)
 8004014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004018:	0800404d 	.word	0x0800404d
 800401c:	08004065 	.word	0x08004065
 8004020:	08004065 	.word	0x08004065
 8004024:	08004065 	.word	0x08004065
 8004028:	08004059 	.word	0x08004059
 800402c:	08004065 	.word	0x08004065
 8004030:	08004065 	.word	0x08004065
 8004034:	08004065 	.word	0x08004065
 8004038:	08004053 	.word	0x08004053
 800403c:	08004065 	.word	0x08004065
 8004040:	08004065 	.word	0x08004065
 8004044:	08004065 	.word	0x08004065
 8004048:	0800405f 	.word	0x0800405f
 800404c:	2300      	movs	r3, #0
 800404e:	77fb      	strb	r3, [r7, #31]
 8004050:	e118      	b.n	8004284 <UART_SetConfig+0x348>
 8004052:	2302      	movs	r3, #2
 8004054:	77fb      	strb	r3, [r7, #31]
 8004056:	e115      	b.n	8004284 <UART_SetConfig+0x348>
 8004058:	2304      	movs	r3, #4
 800405a:	77fb      	strb	r3, [r7, #31]
 800405c:	e112      	b.n	8004284 <UART_SetConfig+0x348>
 800405e:	2308      	movs	r3, #8
 8004060:	77fb      	strb	r3, [r7, #31]
 8004062:	e10f      	b.n	8004284 <UART_SetConfig+0x348>
 8004064:	2310      	movs	r3, #16
 8004066:	77fb      	strb	r3, [r7, #31]
 8004068:	e10c      	b.n	8004284 <UART_SetConfig+0x348>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a68      	ldr	r2, [pc, #416]	; (8004210 <UART_SetConfig+0x2d4>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d120      	bne.n	80040b6 <UART_SetConfig+0x17a>
 8004074:	4b64      	ldr	r3, [pc, #400]	; (8004208 <UART_SetConfig+0x2cc>)
 8004076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800407e:	2b30      	cmp	r3, #48	; 0x30
 8004080:	d013      	beq.n	80040aa <UART_SetConfig+0x16e>
 8004082:	2b30      	cmp	r3, #48	; 0x30
 8004084:	d814      	bhi.n	80040b0 <UART_SetConfig+0x174>
 8004086:	2b20      	cmp	r3, #32
 8004088:	d009      	beq.n	800409e <UART_SetConfig+0x162>
 800408a:	2b20      	cmp	r3, #32
 800408c:	d810      	bhi.n	80040b0 <UART_SetConfig+0x174>
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <UART_SetConfig+0x15c>
 8004092:	2b10      	cmp	r3, #16
 8004094:	d006      	beq.n	80040a4 <UART_SetConfig+0x168>
 8004096:	e00b      	b.n	80040b0 <UART_SetConfig+0x174>
 8004098:	2300      	movs	r3, #0
 800409a:	77fb      	strb	r3, [r7, #31]
 800409c:	e0f2      	b.n	8004284 <UART_SetConfig+0x348>
 800409e:	2302      	movs	r3, #2
 80040a0:	77fb      	strb	r3, [r7, #31]
 80040a2:	e0ef      	b.n	8004284 <UART_SetConfig+0x348>
 80040a4:	2304      	movs	r3, #4
 80040a6:	77fb      	strb	r3, [r7, #31]
 80040a8:	e0ec      	b.n	8004284 <UART_SetConfig+0x348>
 80040aa:	2308      	movs	r3, #8
 80040ac:	77fb      	strb	r3, [r7, #31]
 80040ae:	e0e9      	b.n	8004284 <UART_SetConfig+0x348>
 80040b0:	2310      	movs	r3, #16
 80040b2:	77fb      	strb	r3, [r7, #31]
 80040b4:	e0e6      	b.n	8004284 <UART_SetConfig+0x348>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a56      	ldr	r2, [pc, #344]	; (8004214 <UART_SetConfig+0x2d8>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d120      	bne.n	8004102 <UART_SetConfig+0x1c6>
 80040c0:	4b51      	ldr	r3, [pc, #324]	; (8004208 <UART_SetConfig+0x2cc>)
 80040c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80040ca:	2bc0      	cmp	r3, #192	; 0xc0
 80040cc:	d013      	beq.n	80040f6 <UART_SetConfig+0x1ba>
 80040ce:	2bc0      	cmp	r3, #192	; 0xc0
 80040d0:	d814      	bhi.n	80040fc <UART_SetConfig+0x1c0>
 80040d2:	2b80      	cmp	r3, #128	; 0x80
 80040d4:	d009      	beq.n	80040ea <UART_SetConfig+0x1ae>
 80040d6:	2b80      	cmp	r3, #128	; 0x80
 80040d8:	d810      	bhi.n	80040fc <UART_SetConfig+0x1c0>
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d002      	beq.n	80040e4 <UART_SetConfig+0x1a8>
 80040de:	2b40      	cmp	r3, #64	; 0x40
 80040e0:	d006      	beq.n	80040f0 <UART_SetConfig+0x1b4>
 80040e2:	e00b      	b.n	80040fc <UART_SetConfig+0x1c0>
 80040e4:	2300      	movs	r3, #0
 80040e6:	77fb      	strb	r3, [r7, #31]
 80040e8:	e0cc      	b.n	8004284 <UART_SetConfig+0x348>
 80040ea:	2302      	movs	r3, #2
 80040ec:	77fb      	strb	r3, [r7, #31]
 80040ee:	e0c9      	b.n	8004284 <UART_SetConfig+0x348>
 80040f0:	2304      	movs	r3, #4
 80040f2:	77fb      	strb	r3, [r7, #31]
 80040f4:	e0c6      	b.n	8004284 <UART_SetConfig+0x348>
 80040f6:	2308      	movs	r3, #8
 80040f8:	77fb      	strb	r3, [r7, #31]
 80040fa:	e0c3      	b.n	8004284 <UART_SetConfig+0x348>
 80040fc:	2310      	movs	r3, #16
 80040fe:	77fb      	strb	r3, [r7, #31]
 8004100:	e0c0      	b.n	8004284 <UART_SetConfig+0x348>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a44      	ldr	r2, [pc, #272]	; (8004218 <UART_SetConfig+0x2dc>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d125      	bne.n	8004158 <UART_SetConfig+0x21c>
 800410c:	4b3e      	ldr	r3, [pc, #248]	; (8004208 <UART_SetConfig+0x2cc>)
 800410e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004116:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800411a:	d017      	beq.n	800414c <UART_SetConfig+0x210>
 800411c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004120:	d817      	bhi.n	8004152 <UART_SetConfig+0x216>
 8004122:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004126:	d00b      	beq.n	8004140 <UART_SetConfig+0x204>
 8004128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800412c:	d811      	bhi.n	8004152 <UART_SetConfig+0x216>
 800412e:	2b00      	cmp	r3, #0
 8004130:	d003      	beq.n	800413a <UART_SetConfig+0x1fe>
 8004132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004136:	d006      	beq.n	8004146 <UART_SetConfig+0x20a>
 8004138:	e00b      	b.n	8004152 <UART_SetConfig+0x216>
 800413a:	2300      	movs	r3, #0
 800413c:	77fb      	strb	r3, [r7, #31]
 800413e:	e0a1      	b.n	8004284 <UART_SetConfig+0x348>
 8004140:	2302      	movs	r3, #2
 8004142:	77fb      	strb	r3, [r7, #31]
 8004144:	e09e      	b.n	8004284 <UART_SetConfig+0x348>
 8004146:	2304      	movs	r3, #4
 8004148:	77fb      	strb	r3, [r7, #31]
 800414a:	e09b      	b.n	8004284 <UART_SetConfig+0x348>
 800414c:	2308      	movs	r3, #8
 800414e:	77fb      	strb	r3, [r7, #31]
 8004150:	e098      	b.n	8004284 <UART_SetConfig+0x348>
 8004152:	2310      	movs	r3, #16
 8004154:	77fb      	strb	r3, [r7, #31]
 8004156:	e095      	b.n	8004284 <UART_SetConfig+0x348>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a2f      	ldr	r2, [pc, #188]	; (800421c <UART_SetConfig+0x2e0>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d125      	bne.n	80041ae <UART_SetConfig+0x272>
 8004162:	4b29      	ldr	r3, [pc, #164]	; (8004208 <UART_SetConfig+0x2cc>)
 8004164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004168:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800416c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004170:	d017      	beq.n	80041a2 <UART_SetConfig+0x266>
 8004172:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004176:	d817      	bhi.n	80041a8 <UART_SetConfig+0x26c>
 8004178:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800417c:	d00b      	beq.n	8004196 <UART_SetConfig+0x25a>
 800417e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004182:	d811      	bhi.n	80041a8 <UART_SetConfig+0x26c>
 8004184:	2b00      	cmp	r3, #0
 8004186:	d003      	beq.n	8004190 <UART_SetConfig+0x254>
 8004188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800418c:	d006      	beq.n	800419c <UART_SetConfig+0x260>
 800418e:	e00b      	b.n	80041a8 <UART_SetConfig+0x26c>
 8004190:	2301      	movs	r3, #1
 8004192:	77fb      	strb	r3, [r7, #31]
 8004194:	e076      	b.n	8004284 <UART_SetConfig+0x348>
 8004196:	2302      	movs	r3, #2
 8004198:	77fb      	strb	r3, [r7, #31]
 800419a:	e073      	b.n	8004284 <UART_SetConfig+0x348>
 800419c:	2304      	movs	r3, #4
 800419e:	77fb      	strb	r3, [r7, #31]
 80041a0:	e070      	b.n	8004284 <UART_SetConfig+0x348>
 80041a2:	2308      	movs	r3, #8
 80041a4:	77fb      	strb	r3, [r7, #31]
 80041a6:	e06d      	b.n	8004284 <UART_SetConfig+0x348>
 80041a8:	2310      	movs	r3, #16
 80041aa:	77fb      	strb	r3, [r7, #31]
 80041ac:	e06a      	b.n	8004284 <UART_SetConfig+0x348>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a1b      	ldr	r2, [pc, #108]	; (8004220 <UART_SetConfig+0x2e4>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d138      	bne.n	800422a <UART_SetConfig+0x2ee>
 80041b8:	4b13      	ldr	r3, [pc, #76]	; (8004208 <UART_SetConfig+0x2cc>)
 80041ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041be:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80041c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041c6:	d017      	beq.n	80041f8 <UART_SetConfig+0x2bc>
 80041c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041cc:	d82a      	bhi.n	8004224 <UART_SetConfig+0x2e8>
 80041ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041d2:	d00b      	beq.n	80041ec <UART_SetConfig+0x2b0>
 80041d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041d8:	d824      	bhi.n	8004224 <UART_SetConfig+0x2e8>
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <UART_SetConfig+0x2aa>
 80041de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e2:	d006      	beq.n	80041f2 <UART_SetConfig+0x2b6>
 80041e4:	e01e      	b.n	8004224 <UART_SetConfig+0x2e8>
 80041e6:	2300      	movs	r3, #0
 80041e8:	77fb      	strb	r3, [r7, #31]
 80041ea:	e04b      	b.n	8004284 <UART_SetConfig+0x348>
 80041ec:	2302      	movs	r3, #2
 80041ee:	77fb      	strb	r3, [r7, #31]
 80041f0:	e048      	b.n	8004284 <UART_SetConfig+0x348>
 80041f2:	2304      	movs	r3, #4
 80041f4:	77fb      	strb	r3, [r7, #31]
 80041f6:	e045      	b.n	8004284 <UART_SetConfig+0x348>
 80041f8:	2308      	movs	r3, #8
 80041fa:	77fb      	strb	r3, [r7, #31]
 80041fc:	e042      	b.n	8004284 <UART_SetConfig+0x348>
 80041fe:	bf00      	nop
 8004200:	efff69f3 	.word	0xefff69f3
 8004204:	40011000 	.word	0x40011000
 8004208:	40023800 	.word	0x40023800
 800420c:	40004400 	.word	0x40004400
 8004210:	40004800 	.word	0x40004800
 8004214:	40004c00 	.word	0x40004c00
 8004218:	40005000 	.word	0x40005000
 800421c:	40011400 	.word	0x40011400
 8004220:	40007800 	.word	0x40007800
 8004224:	2310      	movs	r3, #16
 8004226:	77fb      	strb	r3, [r7, #31]
 8004228:	e02c      	b.n	8004284 <UART_SetConfig+0x348>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a72      	ldr	r2, [pc, #456]	; (80043f8 <UART_SetConfig+0x4bc>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d125      	bne.n	8004280 <UART_SetConfig+0x344>
 8004234:	4b71      	ldr	r3, [pc, #452]	; (80043fc <UART_SetConfig+0x4c0>)
 8004236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800423e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004242:	d017      	beq.n	8004274 <UART_SetConfig+0x338>
 8004244:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004248:	d817      	bhi.n	800427a <UART_SetConfig+0x33e>
 800424a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800424e:	d00b      	beq.n	8004268 <UART_SetConfig+0x32c>
 8004250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004254:	d811      	bhi.n	800427a <UART_SetConfig+0x33e>
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <UART_SetConfig+0x326>
 800425a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800425e:	d006      	beq.n	800426e <UART_SetConfig+0x332>
 8004260:	e00b      	b.n	800427a <UART_SetConfig+0x33e>
 8004262:	2300      	movs	r3, #0
 8004264:	77fb      	strb	r3, [r7, #31]
 8004266:	e00d      	b.n	8004284 <UART_SetConfig+0x348>
 8004268:	2302      	movs	r3, #2
 800426a:	77fb      	strb	r3, [r7, #31]
 800426c:	e00a      	b.n	8004284 <UART_SetConfig+0x348>
 800426e:	2304      	movs	r3, #4
 8004270:	77fb      	strb	r3, [r7, #31]
 8004272:	e007      	b.n	8004284 <UART_SetConfig+0x348>
 8004274:	2308      	movs	r3, #8
 8004276:	77fb      	strb	r3, [r7, #31]
 8004278:	e004      	b.n	8004284 <UART_SetConfig+0x348>
 800427a:	2310      	movs	r3, #16
 800427c:	77fb      	strb	r3, [r7, #31]
 800427e:	e001      	b.n	8004284 <UART_SetConfig+0x348>
 8004280:	2310      	movs	r3, #16
 8004282:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	69db      	ldr	r3, [r3, #28]
 8004288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800428c:	d15b      	bne.n	8004346 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800428e:	7ffb      	ldrb	r3, [r7, #31]
 8004290:	2b08      	cmp	r3, #8
 8004292:	d828      	bhi.n	80042e6 <UART_SetConfig+0x3aa>
 8004294:	a201      	add	r2, pc, #4	; (adr r2, 800429c <UART_SetConfig+0x360>)
 8004296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800429a:	bf00      	nop
 800429c:	080042c1 	.word	0x080042c1
 80042a0:	080042c9 	.word	0x080042c9
 80042a4:	080042d1 	.word	0x080042d1
 80042a8:	080042e7 	.word	0x080042e7
 80042ac:	080042d7 	.word	0x080042d7
 80042b0:	080042e7 	.word	0x080042e7
 80042b4:	080042e7 	.word	0x080042e7
 80042b8:	080042e7 	.word	0x080042e7
 80042bc:	080042df 	.word	0x080042df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042c0:	f7fe f854 	bl	800236c <HAL_RCC_GetPCLK1Freq>
 80042c4:	61b8      	str	r0, [r7, #24]
        break;
 80042c6:	e013      	b.n	80042f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042c8:	f7fe f864 	bl	8002394 <HAL_RCC_GetPCLK2Freq>
 80042cc:	61b8      	str	r0, [r7, #24]
        break;
 80042ce:	e00f      	b.n	80042f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042d0:	4b4b      	ldr	r3, [pc, #300]	; (8004400 <UART_SetConfig+0x4c4>)
 80042d2:	61bb      	str	r3, [r7, #24]
        break;
 80042d4:	e00c      	b.n	80042f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042d6:	f7fd ff37 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 80042da:	61b8      	str	r0, [r7, #24]
        break;
 80042dc:	e008      	b.n	80042f0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042e2:	61bb      	str	r3, [r7, #24]
        break;
 80042e4:	e004      	b.n	80042f0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80042e6:	2300      	movs	r3, #0
 80042e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	77bb      	strb	r3, [r7, #30]
        break;
 80042ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d074      	beq.n	80043e0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	005a      	lsls	r2, r3, #1
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	085b      	lsrs	r3, r3, #1
 8004300:	441a      	add	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	fbb2 f3f3 	udiv	r3, r2, r3
 800430a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	2b0f      	cmp	r3, #15
 8004310:	d916      	bls.n	8004340 <UART_SetConfig+0x404>
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004318:	d212      	bcs.n	8004340 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	b29b      	uxth	r3, r3
 800431e:	f023 030f 	bic.w	r3, r3, #15
 8004322:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	085b      	lsrs	r3, r3, #1
 8004328:	b29b      	uxth	r3, r3
 800432a:	f003 0307 	and.w	r3, r3, #7
 800432e:	b29a      	uxth	r2, r3
 8004330:	89fb      	ldrh	r3, [r7, #14]
 8004332:	4313      	orrs	r3, r2
 8004334:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	89fa      	ldrh	r2, [r7, #14]
 800433c:	60da      	str	r2, [r3, #12]
 800433e:	e04f      	b.n	80043e0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	77bb      	strb	r3, [r7, #30]
 8004344:	e04c      	b.n	80043e0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004346:	7ffb      	ldrb	r3, [r7, #31]
 8004348:	2b08      	cmp	r3, #8
 800434a:	d828      	bhi.n	800439e <UART_SetConfig+0x462>
 800434c:	a201      	add	r2, pc, #4	; (adr r2, 8004354 <UART_SetConfig+0x418>)
 800434e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004352:	bf00      	nop
 8004354:	08004379 	.word	0x08004379
 8004358:	08004381 	.word	0x08004381
 800435c:	08004389 	.word	0x08004389
 8004360:	0800439f 	.word	0x0800439f
 8004364:	0800438f 	.word	0x0800438f
 8004368:	0800439f 	.word	0x0800439f
 800436c:	0800439f 	.word	0x0800439f
 8004370:	0800439f 	.word	0x0800439f
 8004374:	08004397 	.word	0x08004397
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004378:	f7fd fff8 	bl	800236c <HAL_RCC_GetPCLK1Freq>
 800437c:	61b8      	str	r0, [r7, #24]
        break;
 800437e:	e013      	b.n	80043a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004380:	f7fe f808 	bl	8002394 <HAL_RCC_GetPCLK2Freq>
 8004384:	61b8      	str	r0, [r7, #24]
        break;
 8004386:	e00f      	b.n	80043a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004388:	4b1d      	ldr	r3, [pc, #116]	; (8004400 <UART_SetConfig+0x4c4>)
 800438a:	61bb      	str	r3, [r7, #24]
        break;
 800438c:	e00c      	b.n	80043a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800438e:	f7fd fedb 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 8004392:	61b8      	str	r0, [r7, #24]
        break;
 8004394:	e008      	b.n	80043a8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004396:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800439a:	61bb      	str	r3, [r7, #24]
        break;
 800439c:	e004      	b.n	80043a8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800439e:	2300      	movs	r3, #0
 80043a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	77bb      	strb	r3, [r7, #30]
        break;
 80043a6:	bf00      	nop
    }

    if (pclk != 0U)
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d018      	beq.n	80043e0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	085a      	lsrs	r2, r3, #1
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	441a      	add	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	2b0f      	cmp	r3, #15
 80043c6:	d909      	bls.n	80043dc <UART_SetConfig+0x4a0>
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ce:	d205      	bcs.n	80043dc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	60da      	str	r2, [r3, #12]
 80043da:	e001      	b.n	80043e0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80043ec:	7fbb      	ldrb	r3, [r7, #30]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3720      	adds	r7, #32
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	40007c00 	.word	0x40007c00
 80043fc:	40023800 	.word	0x40023800
 8004400:	00f42400 	.word	0x00f42400

08004404 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00a      	beq.n	800442e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00a      	beq.n	8004450 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004454:	f003 0304 	and.w	r3, r3, #4
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00a      	beq.n	8004472 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	f003 0308 	and.w	r3, r3, #8
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	f003 0310 	and.w	r3, r3, #16
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00a      	beq.n	80044b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	f003 0320 	and.w	r3, r3, #32
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00a      	beq.n	80044d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d01a      	beq.n	800451a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004502:	d10a      	bne.n	800451a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00a      	beq.n	800453c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	430a      	orrs	r2, r1
 800453a:	605a      	str	r2, [r3, #4]
  }
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af02      	add	r7, sp, #8
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004558:	f7fc feb0 	bl	80012bc <HAL_GetTick>
 800455c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0308 	and.w	r3, r3, #8
 8004568:	2b08      	cmp	r3, #8
 800456a:	d10e      	bne.n	800458a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800456c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f831 	bl	80045e2 <UART_WaitOnFlagUntilTimeout>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e027      	b.n	80045da <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b04      	cmp	r3, #4
 8004596:	d10e      	bne.n	80045b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004598:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800459c:	9300      	str	r3, [sp, #0]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f81b 	bl	80045e2 <UART_WaitOnFlagUntilTimeout>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e011      	b.n	80045da <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2220      	movs	r2, #32
 80045ba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2220      	movs	r2, #32
 80045c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b09c      	sub	sp, #112	; 0x70
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	60f8      	str	r0, [r7, #12]
 80045ea:	60b9      	str	r1, [r7, #8]
 80045ec:	603b      	str	r3, [r7, #0]
 80045ee:	4613      	mov	r3, r2
 80045f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045f2:	e0a7      	b.n	8004744 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fa:	f000 80a3 	beq.w	8004744 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045fe:	f7fc fe5d 	bl	80012bc <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800460a:	429a      	cmp	r2, r3
 800460c:	d302      	bcc.n	8004614 <UART_WaitOnFlagUntilTimeout+0x32>
 800460e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004610:	2b00      	cmp	r3, #0
 8004612:	d13f      	bne.n	8004694 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800461c:	e853 3f00 	ldrex	r3, [r3]
 8004620:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004624:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004628:	667b      	str	r3, [r7, #100]	; 0x64
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	461a      	mov	r2, r3
 8004630:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004632:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004634:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004636:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004638:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800463a:	e841 2300 	strex	r3, r2, [r1]
 800463e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1e6      	bne.n	8004614 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	3308      	adds	r3, #8
 800464c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004650:	e853 3f00 	ldrex	r3, [r3]
 8004654:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004658:	f023 0301 	bic.w	r3, r3, #1
 800465c:	663b      	str	r3, [r7, #96]	; 0x60
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	3308      	adds	r3, #8
 8004664:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004666:	64ba      	str	r2, [r7, #72]	; 0x48
 8004668:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800466c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800466e:	e841 2300 	strex	r3, r2, [r1]
 8004672:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1e5      	bne.n	8004646 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2220      	movs	r2, #32
 800467e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2220      	movs	r2, #32
 8004684:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e068      	b.n	8004766 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0304 	and.w	r3, r3, #4
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d050      	beq.n	8004744 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	69db      	ldr	r3, [r3, #28]
 80046a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046b0:	d148      	bne.n	8004744 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046ba:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c4:	e853 3f00 	ldrex	r3, [r3]
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	461a      	mov	r2, r3
 80046d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046da:	637b      	str	r3, [r7, #52]	; 0x34
 80046dc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046e2:	e841 2300 	strex	r3, r2, [r1]
 80046e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80046e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1e6      	bne.n	80046bc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	3308      	adds	r3, #8
 80046f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	e853 3f00 	ldrex	r3, [r3]
 80046fc:	613b      	str	r3, [r7, #16]
   return(result);
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	f023 0301 	bic.w	r3, r3, #1
 8004704:	66bb      	str	r3, [r7, #104]	; 0x68
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	3308      	adds	r3, #8
 800470c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800470e:	623a      	str	r2, [r7, #32]
 8004710:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004712:	69f9      	ldr	r1, [r7, #28]
 8004714:	6a3a      	ldr	r2, [r7, #32]
 8004716:	e841 2300 	strex	r3, r2, [r1]
 800471a:	61bb      	str	r3, [r7, #24]
   return(result);
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1e5      	bne.n	80046ee <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2220      	movs	r2, #32
 8004726:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2220      	movs	r2, #32
 800472c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2220      	movs	r2, #32
 8004734:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e010      	b.n	8004766 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	69da      	ldr	r2, [r3, #28]
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	4013      	ands	r3, r2
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	429a      	cmp	r2, r3
 8004752:	bf0c      	ite	eq
 8004754:	2301      	moveq	r3, #1
 8004756:	2300      	movne	r3, #0
 8004758:	b2db      	uxtb	r3, r3
 800475a:	461a      	mov	r2, r3
 800475c:	79fb      	ldrb	r3, [r7, #7]
 800475e:	429a      	cmp	r2, r3
 8004760:	f43f af48 	beq.w	80045f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3770      	adds	r7, #112	; 0x70
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
	...

08004770 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004770:	b480      	push	{r7}
 8004772:	b097      	sub	sp, #92	; 0x5c
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	4613      	mov	r3, r2
 800477c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	88fa      	ldrh	r2, [r7, #6]
 8004788:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	88fa      	ldrh	r2, [r7, #6]
 8004790:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a2:	d10e      	bne.n	80047c2 <UART_Start_Receive_IT+0x52>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d105      	bne.n	80047b8 <UART_Start_Receive_IT+0x48>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f240 12ff 	movw	r2, #511	; 0x1ff
 80047b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047b6:	e02d      	b.n	8004814 <UART_Start_Receive_IT+0xa4>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	22ff      	movs	r2, #255	; 0xff
 80047bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047c0:	e028      	b.n	8004814 <UART_Start_Receive_IT+0xa4>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10d      	bne.n	80047e6 <UART_Start_Receive_IT+0x76>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d104      	bne.n	80047dc <UART_Start_Receive_IT+0x6c>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	22ff      	movs	r2, #255	; 0xff
 80047d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047da:	e01b      	b.n	8004814 <UART_Start_Receive_IT+0xa4>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	227f      	movs	r2, #127	; 0x7f
 80047e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80047e4:	e016      	b.n	8004814 <UART_Start_Receive_IT+0xa4>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047ee:	d10d      	bne.n	800480c <UART_Start_Receive_IT+0x9c>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d104      	bne.n	8004802 <UART_Start_Receive_IT+0x92>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	227f      	movs	r2, #127	; 0x7f
 80047fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004800:	e008      	b.n	8004814 <UART_Start_Receive_IT+0xa4>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	223f      	movs	r2, #63	; 0x3f
 8004806:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800480a:	e003      	b.n	8004814 <UART_Start_Receive_IT+0xa4>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2222      	movs	r2, #34	; 0x22
 8004820:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	3308      	adds	r3, #8
 800482a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800482e:	e853 3f00 	ldrex	r3, [r3]
 8004832:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004836:	f043 0301 	orr.w	r3, r3, #1
 800483a:	657b      	str	r3, [r7, #84]	; 0x54
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	3308      	adds	r3, #8
 8004842:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004844:	64ba      	str	r2, [r7, #72]	; 0x48
 8004846:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004848:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800484a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800484c:	e841 2300 	strex	r3, r2, [r1]
 8004850:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1e5      	bne.n	8004824 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004860:	d107      	bne.n	8004872 <UART_Start_Receive_IT+0x102>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d103      	bne.n	8004872 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	4a21      	ldr	r2, [pc, #132]	; (80048f4 <UART_Start_Receive_IT+0x184>)
 800486e:	669a      	str	r2, [r3, #104]	; 0x68
 8004870:	e002      	b.n	8004878 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	4a20      	ldr	r2, [pc, #128]	; (80048f8 <UART_Start_Receive_IT+0x188>)
 8004876:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d019      	beq.n	80048b4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004888:	e853 3f00 	ldrex	r3, [r3]
 800488c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004894:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	461a      	mov	r2, r3
 800489c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800489e:	637b      	str	r3, [r7, #52]	; 0x34
 80048a0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048a6:	e841 2300 	strex	r3, r2, [r1]
 80048aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1e6      	bne.n	8004880 <UART_Start_Receive_IT+0x110>
 80048b2:	e018      	b.n	80048e6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	e853 3f00 	ldrex	r3, [r3]
 80048c0:	613b      	str	r3, [r7, #16]
   return(result);
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	f043 0320 	orr.w	r3, r3, #32
 80048c8:	653b      	str	r3, [r7, #80]	; 0x50
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	461a      	mov	r2, r3
 80048d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048d2:	623b      	str	r3, [r7, #32]
 80048d4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d6:	69f9      	ldr	r1, [r7, #28]
 80048d8:	6a3a      	ldr	r2, [r7, #32]
 80048da:	e841 2300 	strex	r3, r2, [r1]
 80048de:	61bb      	str	r3, [r7, #24]
   return(result);
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1e6      	bne.n	80048b4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	375c      	adds	r7, #92	; 0x5c
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	08004d21 	.word	0x08004d21
 80048f8:	08004bbb 	.word	0x08004bbb

080048fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b095      	sub	sp, #84	; 0x54
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800490c:	e853 3f00 	ldrex	r3, [r3]
 8004910:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004914:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004918:	64fb      	str	r3, [r7, #76]	; 0x4c
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	461a      	mov	r2, r3
 8004920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004922:	643b      	str	r3, [r7, #64]	; 0x40
 8004924:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004926:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004928:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800492a:	e841 2300 	strex	r3, r2, [r1]
 800492e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1e6      	bne.n	8004904 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	3308      	adds	r3, #8
 800493c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493e:	6a3b      	ldr	r3, [r7, #32]
 8004940:	e853 3f00 	ldrex	r3, [r3]
 8004944:	61fb      	str	r3, [r7, #28]
   return(result);
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	f023 0301 	bic.w	r3, r3, #1
 800494c:	64bb      	str	r3, [r7, #72]	; 0x48
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	3308      	adds	r3, #8
 8004954:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004956:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004958:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800495c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800495e:	e841 2300 	strex	r3, r2, [r1]
 8004962:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1e5      	bne.n	8004936 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800496e:	2b01      	cmp	r3, #1
 8004970:	d118      	bne.n	80049a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	e853 3f00 	ldrex	r3, [r3]
 800497e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f023 0310 	bic.w	r3, r3, #16
 8004986:	647b      	str	r3, [r7, #68]	; 0x44
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	461a      	mov	r2, r3
 800498e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004990:	61bb      	str	r3, [r7, #24]
 8004992:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004994:	6979      	ldr	r1, [r7, #20]
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	e841 2300 	strex	r3, r2, [r1]
 800499c:	613b      	str	r3, [r7, #16]
   return(result);
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1e6      	bne.n	8004972 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2220      	movs	r2, #32
 80049a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80049b8:	bf00      	nop
 80049ba:	3754      	adds	r7, #84	; 0x54
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f7ff fa8a 	bl	8003efc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049e8:	bf00      	nop
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b08f      	sub	sp, #60	; 0x3c
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049fc:	2b21      	cmp	r3, #33	; 0x21
 80049fe:	d14c      	bne.n	8004a9a <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d132      	bne.n	8004a72 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a12:	6a3b      	ldr	r3, [r7, #32]
 8004a14:	e853 3f00 	ldrex	r3, [r3]
 8004a18:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a20:	637b      	str	r3, [r7, #52]	; 0x34
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	461a      	mov	r2, r3
 8004a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a2c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a32:	e841 2300 	strex	r3, r2, [r1]
 8004a36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1e6      	bne.n	8004a0c <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	e853 3f00 	ldrex	r3, [r3]
 8004a4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a52:	633b      	str	r3, [r7, #48]	; 0x30
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	461a      	mov	r2, r3
 8004a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5c:	61bb      	str	r3, [r7, #24]
 8004a5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a60:	6979      	ldr	r1, [r7, #20]
 8004a62:	69ba      	ldr	r2, [r7, #24]
 8004a64:	e841 2300 	strex	r3, r2, [r1]
 8004a68:	613b      	str	r3, [r7, #16]
   return(result);
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1e6      	bne.n	8004a3e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004a70:	e013      	b.n	8004a9a <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a76:	781a      	ldrb	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a82:	1c5a      	adds	r2, r3, #1
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	3b01      	subs	r3, #1
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004a9a:	bf00      	nop
 8004a9c:	373c      	adds	r7, #60	; 0x3c
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b091      	sub	sp, #68	; 0x44
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ab2:	2b21      	cmp	r3, #33	; 0x21
 8004ab4:	d151      	bne.n	8004b5a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d132      	bne.n	8004b28 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	e853 3f00 	ldrex	r3, [r3]
 8004ace:	623b      	str	r3, [r7, #32]
   return(result);
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
 8004ad2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ad6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	461a      	mov	r2, r3
 8004ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae0:	633b      	str	r3, [r7, #48]	; 0x30
 8004ae2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ae6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ae8:	e841 2300 	strex	r3, r2, [r1]
 8004aec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1e6      	bne.n	8004ac2 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	e853 3f00 	ldrex	r3, [r3]
 8004b00:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b08:	637b      	str	r3, [r7, #52]	; 0x34
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	461a      	mov	r2, r3
 8004b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b12:	61fb      	str	r3, [r7, #28]
 8004b14:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b16:	69b9      	ldr	r1, [r7, #24]
 8004b18:	69fa      	ldr	r2, [r7, #28]
 8004b1a:	e841 2300 	strex	r3, r2, [r1]
 8004b1e:	617b      	str	r3, [r7, #20]
   return(result);
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1e6      	bne.n	8004af4 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004b26:	e018      	b.n	8004b5a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	461a      	mov	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b3c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b42:	1c9a      	adds	r2, r3, #2
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	3b01      	subs	r3, #1
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004b5a:	bf00      	nop
 8004b5c:	3744      	adds	r7, #68	; 0x44
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b088      	sub	sp, #32
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	e853 3f00 	ldrex	r3, [r3]
 8004b7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b82:	61fb      	str	r3, [r7, #28]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	461a      	mov	r2, r3
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	61bb      	str	r3, [r7, #24]
 8004b8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b90:	6979      	ldr	r1, [r7, #20]
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	e841 2300 	strex	r3, r2, [r1]
 8004b98:	613b      	str	r3, [r7, #16]
   return(result);
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1e6      	bne.n	8004b6e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f7fc f889 	bl	8000cc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bb2:	bf00      	nop
 8004bb4:	3720      	adds	r7, #32
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b096      	sub	sp, #88	; 0x58
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004bc8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bd2:	2b22      	cmp	r3, #34	; 0x22
 8004bd4:	f040 8098 	bne.w	8004d08 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bde:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004be2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004be6:	b2d9      	uxtb	r1, r3
 8004be8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf2:	400a      	ands	r2, r1
 8004bf4:	b2d2      	uxtb	r2, r2
 8004bf6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bfc:	1c5a      	adds	r2, r3, #1
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d17b      	bne.n	8004d18 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c28:	e853 3f00 	ldrex	r3, [r3]
 8004c2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c34:	653b      	str	r3, [r7, #80]	; 0x50
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c3e:	647b      	str	r3, [r7, #68]	; 0x44
 8004c40:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c46:	e841 2300 	strex	r3, r2, [r1]
 8004c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1e6      	bne.n	8004c20 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	3308      	adds	r3, #8
 8004c58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5c:	e853 3f00 	ldrex	r3, [r3]
 8004c60:	623b      	str	r3, [r7, #32]
   return(result);
 8004c62:	6a3b      	ldr	r3, [r7, #32]
 8004c64:	f023 0301 	bic.w	r3, r3, #1
 8004c68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	3308      	adds	r3, #8
 8004c70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c72:	633a      	str	r2, [r7, #48]	; 0x30
 8004c74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c7a:	e841 2300 	strex	r3, r2, [r1]
 8004c7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1e5      	bne.n	8004c52 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d12e      	bne.n	8004d00 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	e853 3f00 	ldrex	r3, [r3]
 8004cb4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f023 0310 	bic.w	r3, r3, #16
 8004cbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cc6:	61fb      	str	r3, [r7, #28]
 8004cc8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cca:	69b9      	ldr	r1, [r7, #24]
 8004ccc:	69fa      	ldr	r2, [r7, #28]
 8004cce:	e841 2300 	strex	r3, r2, [r1]
 8004cd2:	617b      	str	r3, [r7, #20]
   return(result);
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1e6      	bne.n	8004ca8 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	69db      	ldr	r3, [r3, #28]
 8004ce0:	f003 0310 	and.w	r3, r3, #16
 8004ce4:	2b10      	cmp	r3, #16
 8004ce6:	d103      	bne.n	8004cf0 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2210      	movs	r2, #16
 8004cee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f7ff f909 	bl	8003f10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004cfe:	e00b      	b.n	8004d18 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f7fb ff5b 	bl	8000bbc <HAL_UART_RxCpltCallback>
}
 8004d06:	e007      	b.n	8004d18 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	699a      	ldr	r2, [r3, #24]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f042 0208 	orr.w	r2, r2, #8
 8004d16:	619a      	str	r2, [r3, #24]
}
 8004d18:	bf00      	nop
 8004d1a:	3758      	adds	r7, #88	; 0x58
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b096      	sub	sp, #88	; 0x58
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004d2e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d38:	2b22      	cmp	r3, #34	; 0x22
 8004d3a:	f040 8098 	bne.w	8004e6e <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d44:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d4c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004d4e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004d52:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004d56:	4013      	ands	r3, r2
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d5c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d62:	1c9a      	adds	r2, r3, #2
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	3b01      	subs	r3, #1
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d17b      	bne.n	8004e7e <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d8e:	e853 3f00 	ldrex	r3, [r3]
 8004d92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	461a      	mov	r2, r3
 8004da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da4:	643b      	str	r3, [r7, #64]	; 0x40
 8004da6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004daa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004dac:	e841 2300 	strex	r3, r2, [r1]
 8004db0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1e6      	bne.n	8004d86 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3308      	adds	r3, #8
 8004dbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc0:	6a3b      	ldr	r3, [r7, #32]
 8004dc2:	e853 3f00 	ldrex	r3, [r3]
 8004dc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	f023 0301 	bic.w	r3, r3, #1
 8004dce:	64bb      	str	r3, [r7, #72]	; 0x48
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	3308      	adds	r3, #8
 8004dd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ddc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004de0:	e841 2300 	strex	r3, r2, [r1]
 8004de4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1e5      	bne.n	8004db8 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2220      	movs	r2, #32
 8004df0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d12e      	bne.n	8004e66 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	e853 3f00 	ldrex	r3, [r3]
 8004e1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	f023 0310 	bic.w	r3, r3, #16
 8004e22:	647b      	str	r3, [r7, #68]	; 0x44
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	461a      	mov	r2, r3
 8004e2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e2c:	61bb      	str	r3, [r7, #24]
 8004e2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e30:	6979      	ldr	r1, [r7, #20]
 8004e32:	69ba      	ldr	r2, [r7, #24]
 8004e34:	e841 2300 	strex	r3, r2, [r1]
 8004e38:	613b      	str	r3, [r7, #16]
   return(result);
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1e6      	bne.n	8004e0e <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	f003 0310 	and.w	r3, r3, #16
 8004e4a:	2b10      	cmp	r3, #16
 8004e4c:	d103      	bne.n	8004e56 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2210      	movs	r2, #16
 8004e54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f7ff f856 	bl	8003f10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e64:	e00b      	b.n	8004e7e <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7fb fea8 	bl	8000bbc <HAL_UART_RxCpltCallback>
}
 8004e6c:	e007      	b.n	8004e7e <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	699a      	ldr	r2, [r3, #24]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f042 0208 	orr.w	r2, r2, #8
 8004e7c:	619a      	str	r2, [r3, #24]
}
 8004e7e:	bf00      	nop
 8004e80:	3758      	adds	r7, #88	; 0x58
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
	...

08004e88 <__errno>:
 8004e88:	4b01      	ldr	r3, [pc, #4]	; (8004e90 <__errno+0x8>)
 8004e8a:	6818      	ldr	r0, [r3, #0]
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	20000010 	.word	0x20000010

08004e94 <__libc_init_array>:
 8004e94:	b570      	push	{r4, r5, r6, lr}
 8004e96:	4d0d      	ldr	r5, [pc, #52]	; (8004ecc <__libc_init_array+0x38>)
 8004e98:	4c0d      	ldr	r4, [pc, #52]	; (8004ed0 <__libc_init_array+0x3c>)
 8004e9a:	1b64      	subs	r4, r4, r5
 8004e9c:	10a4      	asrs	r4, r4, #2
 8004e9e:	2600      	movs	r6, #0
 8004ea0:	42a6      	cmp	r6, r4
 8004ea2:	d109      	bne.n	8004eb8 <__libc_init_array+0x24>
 8004ea4:	4d0b      	ldr	r5, [pc, #44]	; (8004ed4 <__libc_init_array+0x40>)
 8004ea6:	4c0c      	ldr	r4, [pc, #48]	; (8004ed8 <__libc_init_array+0x44>)
 8004ea8:	f001 f944 	bl	8006134 <_init>
 8004eac:	1b64      	subs	r4, r4, r5
 8004eae:	10a4      	asrs	r4, r4, #2
 8004eb0:	2600      	movs	r6, #0
 8004eb2:	42a6      	cmp	r6, r4
 8004eb4:	d105      	bne.n	8004ec2 <__libc_init_array+0x2e>
 8004eb6:	bd70      	pop	{r4, r5, r6, pc}
 8004eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ebc:	4798      	blx	r3
 8004ebe:	3601      	adds	r6, #1
 8004ec0:	e7ee      	b.n	8004ea0 <__libc_init_array+0xc>
 8004ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ec6:	4798      	blx	r3
 8004ec8:	3601      	adds	r6, #1
 8004eca:	e7f2      	b.n	8004eb2 <__libc_init_array+0x1e>
 8004ecc:	080062ec 	.word	0x080062ec
 8004ed0:	080062ec 	.word	0x080062ec
 8004ed4:	080062ec 	.word	0x080062ec
 8004ed8:	080062f0 	.word	0x080062f0

08004edc <malloc>:
 8004edc:	4b02      	ldr	r3, [pc, #8]	; (8004ee8 <malloc+0xc>)
 8004ede:	4601      	mov	r1, r0
 8004ee0:	6818      	ldr	r0, [r3, #0]
 8004ee2:	f000 b877 	b.w	8004fd4 <_malloc_r>
 8004ee6:	bf00      	nop
 8004ee8:	20000010 	.word	0x20000010

08004eec <memset>:
 8004eec:	4402      	add	r2, r0
 8004eee:	4603      	mov	r3, r0
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d100      	bne.n	8004ef6 <memset+0xa>
 8004ef4:	4770      	bx	lr
 8004ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8004efa:	e7f9      	b.n	8004ef0 <memset+0x4>

08004efc <_free_r>:
 8004efc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004efe:	2900      	cmp	r1, #0
 8004f00:	d044      	beq.n	8004f8c <_free_r+0x90>
 8004f02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f06:	9001      	str	r0, [sp, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f1a1 0404 	sub.w	r4, r1, #4
 8004f0e:	bfb8      	it	lt
 8004f10:	18e4      	addlt	r4, r4, r3
 8004f12:	f000 fc5d 	bl	80057d0 <__malloc_lock>
 8004f16:	4a1e      	ldr	r2, [pc, #120]	; (8004f90 <_free_r+0x94>)
 8004f18:	9801      	ldr	r0, [sp, #4]
 8004f1a:	6813      	ldr	r3, [r2, #0]
 8004f1c:	b933      	cbnz	r3, 8004f2c <_free_r+0x30>
 8004f1e:	6063      	str	r3, [r4, #4]
 8004f20:	6014      	str	r4, [r2, #0]
 8004f22:	b003      	add	sp, #12
 8004f24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f28:	f000 bc58 	b.w	80057dc <__malloc_unlock>
 8004f2c:	42a3      	cmp	r3, r4
 8004f2e:	d908      	bls.n	8004f42 <_free_r+0x46>
 8004f30:	6825      	ldr	r5, [r4, #0]
 8004f32:	1961      	adds	r1, r4, r5
 8004f34:	428b      	cmp	r3, r1
 8004f36:	bf01      	itttt	eq
 8004f38:	6819      	ldreq	r1, [r3, #0]
 8004f3a:	685b      	ldreq	r3, [r3, #4]
 8004f3c:	1949      	addeq	r1, r1, r5
 8004f3e:	6021      	streq	r1, [r4, #0]
 8004f40:	e7ed      	b.n	8004f1e <_free_r+0x22>
 8004f42:	461a      	mov	r2, r3
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	b10b      	cbz	r3, 8004f4c <_free_r+0x50>
 8004f48:	42a3      	cmp	r3, r4
 8004f4a:	d9fa      	bls.n	8004f42 <_free_r+0x46>
 8004f4c:	6811      	ldr	r1, [r2, #0]
 8004f4e:	1855      	adds	r5, r2, r1
 8004f50:	42a5      	cmp	r5, r4
 8004f52:	d10b      	bne.n	8004f6c <_free_r+0x70>
 8004f54:	6824      	ldr	r4, [r4, #0]
 8004f56:	4421      	add	r1, r4
 8004f58:	1854      	adds	r4, r2, r1
 8004f5a:	42a3      	cmp	r3, r4
 8004f5c:	6011      	str	r1, [r2, #0]
 8004f5e:	d1e0      	bne.n	8004f22 <_free_r+0x26>
 8004f60:	681c      	ldr	r4, [r3, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	6053      	str	r3, [r2, #4]
 8004f66:	4421      	add	r1, r4
 8004f68:	6011      	str	r1, [r2, #0]
 8004f6a:	e7da      	b.n	8004f22 <_free_r+0x26>
 8004f6c:	d902      	bls.n	8004f74 <_free_r+0x78>
 8004f6e:	230c      	movs	r3, #12
 8004f70:	6003      	str	r3, [r0, #0]
 8004f72:	e7d6      	b.n	8004f22 <_free_r+0x26>
 8004f74:	6825      	ldr	r5, [r4, #0]
 8004f76:	1961      	adds	r1, r4, r5
 8004f78:	428b      	cmp	r3, r1
 8004f7a:	bf04      	itt	eq
 8004f7c:	6819      	ldreq	r1, [r3, #0]
 8004f7e:	685b      	ldreq	r3, [r3, #4]
 8004f80:	6063      	str	r3, [r4, #4]
 8004f82:	bf04      	itt	eq
 8004f84:	1949      	addeq	r1, r1, r5
 8004f86:	6021      	streq	r1, [r4, #0]
 8004f88:	6054      	str	r4, [r2, #4]
 8004f8a:	e7ca      	b.n	8004f22 <_free_r+0x26>
 8004f8c:	b003      	add	sp, #12
 8004f8e:	bd30      	pop	{r4, r5, pc}
 8004f90:	200005a0 	.word	0x200005a0

08004f94 <sbrk_aligned>:
 8004f94:	b570      	push	{r4, r5, r6, lr}
 8004f96:	4e0e      	ldr	r6, [pc, #56]	; (8004fd0 <sbrk_aligned+0x3c>)
 8004f98:	460c      	mov	r4, r1
 8004f9a:	6831      	ldr	r1, [r6, #0]
 8004f9c:	4605      	mov	r5, r0
 8004f9e:	b911      	cbnz	r1, 8004fa6 <sbrk_aligned+0x12>
 8004fa0:	f000 f88c 	bl	80050bc <_sbrk_r>
 8004fa4:	6030      	str	r0, [r6, #0]
 8004fa6:	4621      	mov	r1, r4
 8004fa8:	4628      	mov	r0, r5
 8004faa:	f000 f887 	bl	80050bc <_sbrk_r>
 8004fae:	1c43      	adds	r3, r0, #1
 8004fb0:	d00a      	beq.n	8004fc8 <sbrk_aligned+0x34>
 8004fb2:	1cc4      	adds	r4, r0, #3
 8004fb4:	f024 0403 	bic.w	r4, r4, #3
 8004fb8:	42a0      	cmp	r0, r4
 8004fba:	d007      	beq.n	8004fcc <sbrk_aligned+0x38>
 8004fbc:	1a21      	subs	r1, r4, r0
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	f000 f87c 	bl	80050bc <_sbrk_r>
 8004fc4:	3001      	adds	r0, #1
 8004fc6:	d101      	bne.n	8004fcc <sbrk_aligned+0x38>
 8004fc8:	f04f 34ff 	mov.w	r4, #4294967295
 8004fcc:	4620      	mov	r0, r4
 8004fce:	bd70      	pop	{r4, r5, r6, pc}
 8004fd0:	200005a4 	.word	0x200005a4

08004fd4 <_malloc_r>:
 8004fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fd8:	1ccd      	adds	r5, r1, #3
 8004fda:	f025 0503 	bic.w	r5, r5, #3
 8004fde:	3508      	adds	r5, #8
 8004fe0:	2d0c      	cmp	r5, #12
 8004fe2:	bf38      	it	cc
 8004fe4:	250c      	movcc	r5, #12
 8004fe6:	2d00      	cmp	r5, #0
 8004fe8:	4607      	mov	r7, r0
 8004fea:	db01      	blt.n	8004ff0 <_malloc_r+0x1c>
 8004fec:	42a9      	cmp	r1, r5
 8004fee:	d905      	bls.n	8004ffc <_malloc_r+0x28>
 8004ff0:	230c      	movs	r3, #12
 8004ff2:	603b      	str	r3, [r7, #0]
 8004ff4:	2600      	movs	r6, #0
 8004ff6:	4630      	mov	r0, r6
 8004ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ffc:	4e2e      	ldr	r6, [pc, #184]	; (80050b8 <_malloc_r+0xe4>)
 8004ffe:	f000 fbe7 	bl	80057d0 <__malloc_lock>
 8005002:	6833      	ldr	r3, [r6, #0]
 8005004:	461c      	mov	r4, r3
 8005006:	bb34      	cbnz	r4, 8005056 <_malloc_r+0x82>
 8005008:	4629      	mov	r1, r5
 800500a:	4638      	mov	r0, r7
 800500c:	f7ff ffc2 	bl	8004f94 <sbrk_aligned>
 8005010:	1c43      	adds	r3, r0, #1
 8005012:	4604      	mov	r4, r0
 8005014:	d14d      	bne.n	80050b2 <_malloc_r+0xde>
 8005016:	6834      	ldr	r4, [r6, #0]
 8005018:	4626      	mov	r6, r4
 800501a:	2e00      	cmp	r6, #0
 800501c:	d140      	bne.n	80050a0 <_malloc_r+0xcc>
 800501e:	6823      	ldr	r3, [r4, #0]
 8005020:	4631      	mov	r1, r6
 8005022:	4638      	mov	r0, r7
 8005024:	eb04 0803 	add.w	r8, r4, r3
 8005028:	f000 f848 	bl	80050bc <_sbrk_r>
 800502c:	4580      	cmp	r8, r0
 800502e:	d13a      	bne.n	80050a6 <_malloc_r+0xd2>
 8005030:	6821      	ldr	r1, [r4, #0]
 8005032:	3503      	adds	r5, #3
 8005034:	1a6d      	subs	r5, r5, r1
 8005036:	f025 0503 	bic.w	r5, r5, #3
 800503a:	3508      	adds	r5, #8
 800503c:	2d0c      	cmp	r5, #12
 800503e:	bf38      	it	cc
 8005040:	250c      	movcc	r5, #12
 8005042:	4629      	mov	r1, r5
 8005044:	4638      	mov	r0, r7
 8005046:	f7ff ffa5 	bl	8004f94 <sbrk_aligned>
 800504a:	3001      	adds	r0, #1
 800504c:	d02b      	beq.n	80050a6 <_malloc_r+0xd2>
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	442b      	add	r3, r5
 8005052:	6023      	str	r3, [r4, #0]
 8005054:	e00e      	b.n	8005074 <_malloc_r+0xa0>
 8005056:	6822      	ldr	r2, [r4, #0]
 8005058:	1b52      	subs	r2, r2, r5
 800505a:	d41e      	bmi.n	800509a <_malloc_r+0xc6>
 800505c:	2a0b      	cmp	r2, #11
 800505e:	d916      	bls.n	800508e <_malloc_r+0xba>
 8005060:	1961      	adds	r1, r4, r5
 8005062:	42a3      	cmp	r3, r4
 8005064:	6025      	str	r5, [r4, #0]
 8005066:	bf18      	it	ne
 8005068:	6059      	strne	r1, [r3, #4]
 800506a:	6863      	ldr	r3, [r4, #4]
 800506c:	bf08      	it	eq
 800506e:	6031      	streq	r1, [r6, #0]
 8005070:	5162      	str	r2, [r4, r5]
 8005072:	604b      	str	r3, [r1, #4]
 8005074:	4638      	mov	r0, r7
 8005076:	f104 060b 	add.w	r6, r4, #11
 800507a:	f000 fbaf 	bl	80057dc <__malloc_unlock>
 800507e:	f026 0607 	bic.w	r6, r6, #7
 8005082:	1d23      	adds	r3, r4, #4
 8005084:	1af2      	subs	r2, r6, r3
 8005086:	d0b6      	beq.n	8004ff6 <_malloc_r+0x22>
 8005088:	1b9b      	subs	r3, r3, r6
 800508a:	50a3      	str	r3, [r4, r2]
 800508c:	e7b3      	b.n	8004ff6 <_malloc_r+0x22>
 800508e:	6862      	ldr	r2, [r4, #4]
 8005090:	42a3      	cmp	r3, r4
 8005092:	bf0c      	ite	eq
 8005094:	6032      	streq	r2, [r6, #0]
 8005096:	605a      	strne	r2, [r3, #4]
 8005098:	e7ec      	b.n	8005074 <_malloc_r+0xa0>
 800509a:	4623      	mov	r3, r4
 800509c:	6864      	ldr	r4, [r4, #4]
 800509e:	e7b2      	b.n	8005006 <_malloc_r+0x32>
 80050a0:	4634      	mov	r4, r6
 80050a2:	6876      	ldr	r6, [r6, #4]
 80050a4:	e7b9      	b.n	800501a <_malloc_r+0x46>
 80050a6:	230c      	movs	r3, #12
 80050a8:	603b      	str	r3, [r7, #0]
 80050aa:	4638      	mov	r0, r7
 80050ac:	f000 fb96 	bl	80057dc <__malloc_unlock>
 80050b0:	e7a1      	b.n	8004ff6 <_malloc_r+0x22>
 80050b2:	6025      	str	r5, [r4, #0]
 80050b4:	e7de      	b.n	8005074 <_malloc_r+0xa0>
 80050b6:	bf00      	nop
 80050b8:	200005a0 	.word	0x200005a0

080050bc <_sbrk_r>:
 80050bc:	b538      	push	{r3, r4, r5, lr}
 80050be:	4d06      	ldr	r5, [pc, #24]	; (80050d8 <_sbrk_r+0x1c>)
 80050c0:	2300      	movs	r3, #0
 80050c2:	4604      	mov	r4, r0
 80050c4:	4608      	mov	r0, r1
 80050c6:	602b      	str	r3, [r5, #0]
 80050c8:	f7fb fec0 	bl	8000e4c <_sbrk>
 80050cc:	1c43      	adds	r3, r0, #1
 80050ce:	d102      	bne.n	80050d6 <_sbrk_r+0x1a>
 80050d0:	682b      	ldr	r3, [r5, #0]
 80050d2:	b103      	cbz	r3, 80050d6 <_sbrk_r+0x1a>
 80050d4:	6023      	str	r3, [r4, #0]
 80050d6:	bd38      	pop	{r3, r4, r5, pc}
 80050d8:	200005ac 	.word	0x200005ac

080050dc <setvbuf>:
 80050dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80050e0:	461d      	mov	r5, r3
 80050e2:	4b5d      	ldr	r3, [pc, #372]	; (8005258 <setvbuf+0x17c>)
 80050e4:	681f      	ldr	r7, [r3, #0]
 80050e6:	4604      	mov	r4, r0
 80050e8:	460e      	mov	r6, r1
 80050ea:	4690      	mov	r8, r2
 80050ec:	b127      	cbz	r7, 80050f8 <setvbuf+0x1c>
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	b913      	cbnz	r3, 80050f8 <setvbuf+0x1c>
 80050f2:	4638      	mov	r0, r7
 80050f4:	f000 fa54 	bl	80055a0 <__sinit>
 80050f8:	4b58      	ldr	r3, [pc, #352]	; (800525c <setvbuf+0x180>)
 80050fa:	429c      	cmp	r4, r3
 80050fc:	d167      	bne.n	80051ce <setvbuf+0xf2>
 80050fe:	687c      	ldr	r4, [r7, #4]
 8005100:	f1b8 0f02 	cmp.w	r8, #2
 8005104:	d006      	beq.n	8005114 <setvbuf+0x38>
 8005106:	f1b8 0f01 	cmp.w	r8, #1
 800510a:	f200 809f 	bhi.w	800524c <setvbuf+0x170>
 800510e:	2d00      	cmp	r5, #0
 8005110:	f2c0 809c 	blt.w	800524c <setvbuf+0x170>
 8005114:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005116:	07db      	lsls	r3, r3, #31
 8005118:	d405      	bmi.n	8005126 <setvbuf+0x4a>
 800511a:	89a3      	ldrh	r3, [r4, #12]
 800511c:	0598      	lsls	r0, r3, #22
 800511e:	d402      	bmi.n	8005126 <setvbuf+0x4a>
 8005120:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005122:	f000 faed 	bl	8005700 <__retarget_lock_acquire_recursive>
 8005126:	4621      	mov	r1, r4
 8005128:	4638      	mov	r0, r7
 800512a:	f000 f9a5 	bl	8005478 <_fflush_r>
 800512e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005130:	b141      	cbz	r1, 8005144 <setvbuf+0x68>
 8005132:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005136:	4299      	cmp	r1, r3
 8005138:	d002      	beq.n	8005140 <setvbuf+0x64>
 800513a:	4638      	mov	r0, r7
 800513c:	f7ff fede 	bl	8004efc <_free_r>
 8005140:	2300      	movs	r3, #0
 8005142:	6363      	str	r3, [r4, #52]	; 0x34
 8005144:	2300      	movs	r3, #0
 8005146:	61a3      	str	r3, [r4, #24]
 8005148:	6063      	str	r3, [r4, #4]
 800514a:	89a3      	ldrh	r3, [r4, #12]
 800514c:	0619      	lsls	r1, r3, #24
 800514e:	d503      	bpl.n	8005158 <setvbuf+0x7c>
 8005150:	6921      	ldr	r1, [r4, #16]
 8005152:	4638      	mov	r0, r7
 8005154:	f7ff fed2 	bl	8004efc <_free_r>
 8005158:	89a3      	ldrh	r3, [r4, #12]
 800515a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800515e:	f023 0303 	bic.w	r3, r3, #3
 8005162:	f1b8 0f02 	cmp.w	r8, #2
 8005166:	81a3      	strh	r3, [r4, #12]
 8005168:	d06c      	beq.n	8005244 <setvbuf+0x168>
 800516a:	ab01      	add	r3, sp, #4
 800516c:	466a      	mov	r2, sp
 800516e:	4621      	mov	r1, r4
 8005170:	4638      	mov	r0, r7
 8005172:	f000 fac7 	bl	8005704 <__swhatbuf_r>
 8005176:	89a3      	ldrh	r3, [r4, #12]
 8005178:	4318      	orrs	r0, r3
 800517a:	81a0      	strh	r0, [r4, #12]
 800517c:	2d00      	cmp	r5, #0
 800517e:	d130      	bne.n	80051e2 <setvbuf+0x106>
 8005180:	9d00      	ldr	r5, [sp, #0]
 8005182:	4628      	mov	r0, r5
 8005184:	f7ff feaa 	bl	8004edc <malloc>
 8005188:	4606      	mov	r6, r0
 800518a:	2800      	cmp	r0, #0
 800518c:	d155      	bne.n	800523a <setvbuf+0x15e>
 800518e:	f8dd 9000 	ldr.w	r9, [sp]
 8005192:	45a9      	cmp	r9, r5
 8005194:	d14a      	bne.n	800522c <setvbuf+0x150>
 8005196:	f04f 35ff 	mov.w	r5, #4294967295
 800519a:	2200      	movs	r2, #0
 800519c:	60a2      	str	r2, [r4, #8]
 800519e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80051a2:	6022      	str	r2, [r4, #0]
 80051a4:	6122      	str	r2, [r4, #16]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051ac:	6162      	str	r2, [r4, #20]
 80051ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80051b0:	f043 0302 	orr.w	r3, r3, #2
 80051b4:	07d2      	lsls	r2, r2, #31
 80051b6:	81a3      	strh	r3, [r4, #12]
 80051b8:	d405      	bmi.n	80051c6 <setvbuf+0xea>
 80051ba:	f413 7f00 	tst.w	r3, #512	; 0x200
 80051be:	d102      	bne.n	80051c6 <setvbuf+0xea>
 80051c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051c2:	f000 fa9e 	bl	8005702 <__retarget_lock_release_recursive>
 80051c6:	4628      	mov	r0, r5
 80051c8:	b003      	add	sp, #12
 80051ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80051ce:	4b24      	ldr	r3, [pc, #144]	; (8005260 <setvbuf+0x184>)
 80051d0:	429c      	cmp	r4, r3
 80051d2:	d101      	bne.n	80051d8 <setvbuf+0xfc>
 80051d4:	68bc      	ldr	r4, [r7, #8]
 80051d6:	e793      	b.n	8005100 <setvbuf+0x24>
 80051d8:	4b22      	ldr	r3, [pc, #136]	; (8005264 <setvbuf+0x188>)
 80051da:	429c      	cmp	r4, r3
 80051dc:	bf08      	it	eq
 80051de:	68fc      	ldreq	r4, [r7, #12]
 80051e0:	e78e      	b.n	8005100 <setvbuf+0x24>
 80051e2:	2e00      	cmp	r6, #0
 80051e4:	d0cd      	beq.n	8005182 <setvbuf+0xa6>
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	b913      	cbnz	r3, 80051f0 <setvbuf+0x114>
 80051ea:	4638      	mov	r0, r7
 80051ec:	f000 f9d8 	bl	80055a0 <__sinit>
 80051f0:	f1b8 0f01 	cmp.w	r8, #1
 80051f4:	bf08      	it	eq
 80051f6:	89a3      	ldrheq	r3, [r4, #12]
 80051f8:	6026      	str	r6, [r4, #0]
 80051fa:	bf04      	itt	eq
 80051fc:	f043 0301 	orreq.w	r3, r3, #1
 8005200:	81a3      	strheq	r3, [r4, #12]
 8005202:	89a2      	ldrh	r2, [r4, #12]
 8005204:	f012 0308 	ands.w	r3, r2, #8
 8005208:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800520c:	d01c      	beq.n	8005248 <setvbuf+0x16c>
 800520e:	07d3      	lsls	r3, r2, #31
 8005210:	bf41      	itttt	mi
 8005212:	2300      	movmi	r3, #0
 8005214:	426d      	negmi	r5, r5
 8005216:	60a3      	strmi	r3, [r4, #8]
 8005218:	61a5      	strmi	r5, [r4, #24]
 800521a:	bf58      	it	pl
 800521c:	60a5      	strpl	r5, [r4, #8]
 800521e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005220:	f015 0501 	ands.w	r5, r5, #1
 8005224:	d115      	bne.n	8005252 <setvbuf+0x176>
 8005226:	f412 7f00 	tst.w	r2, #512	; 0x200
 800522a:	e7c8      	b.n	80051be <setvbuf+0xe2>
 800522c:	4648      	mov	r0, r9
 800522e:	f7ff fe55 	bl	8004edc <malloc>
 8005232:	4606      	mov	r6, r0
 8005234:	2800      	cmp	r0, #0
 8005236:	d0ae      	beq.n	8005196 <setvbuf+0xba>
 8005238:	464d      	mov	r5, r9
 800523a:	89a3      	ldrh	r3, [r4, #12]
 800523c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005240:	81a3      	strh	r3, [r4, #12]
 8005242:	e7d0      	b.n	80051e6 <setvbuf+0x10a>
 8005244:	2500      	movs	r5, #0
 8005246:	e7a8      	b.n	800519a <setvbuf+0xbe>
 8005248:	60a3      	str	r3, [r4, #8]
 800524a:	e7e8      	b.n	800521e <setvbuf+0x142>
 800524c:	f04f 35ff 	mov.w	r5, #4294967295
 8005250:	e7b9      	b.n	80051c6 <setvbuf+0xea>
 8005252:	2500      	movs	r5, #0
 8005254:	e7b7      	b.n	80051c6 <setvbuf+0xea>
 8005256:	bf00      	nop
 8005258:	20000010 	.word	0x20000010
 800525c:	08006270 	.word	0x08006270
 8005260:	08006290 	.word	0x08006290
 8005264:	08006250 	.word	0x08006250

08005268 <strcpy>:
 8005268:	4603      	mov	r3, r0
 800526a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800526e:	f803 2b01 	strb.w	r2, [r3], #1
 8005272:	2a00      	cmp	r2, #0
 8005274:	d1f9      	bne.n	800526a <strcpy+0x2>
 8005276:	4770      	bx	lr

08005278 <strtok>:
 8005278:	4b16      	ldr	r3, [pc, #88]	; (80052d4 <strtok+0x5c>)
 800527a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800527c:	681e      	ldr	r6, [r3, #0]
 800527e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8005280:	4605      	mov	r5, r0
 8005282:	b9fc      	cbnz	r4, 80052c4 <strtok+0x4c>
 8005284:	2050      	movs	r0, #80	; 0x50
 8005286:	9101      	str	r1, [sp, #4]
 8005288:	f7ff fe28 	bl	8004edc <malloc>
 800528c:	9901      	ldr	r1, [sp, #4]
 800528e:	65b0      	str	r0, [r6, #88]	; 0x58
 8005290:	4602      	mov	r2, r0
 8005292:	b920      	cbnz	r0, 800529e <strtok+0x26>
 8005294:	4b10      	ldr	r3, [pc, #64]	; (80052d8 <strtok+0x60>)
 8005296:	4811      	ldr	r0, [pc, #68]	; (80052dc <strtok+0x64>)
 8005298:	2157      	movs	r1, #87	; 0x57
 800529a:	f000 f849 	bl	8005330 <__assert_func>
 800529e:	e9c0 4400 	strd	r4, r4, [r0]
 80052a2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80052a6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80052aa:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80052ae:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80052b2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80052b6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80052ba:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80052be:	6184      	str	r4, [r0, #24]
 80052c0:	7704      	strb	r4, [r0, #28]
 80052c2:	6244      	str	r4, [r0, #36]	; 0x24
 80052c4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80052c6:	2301      	movs	r3, #1
 80052c8:	4628      	mov	r0, r5
 80052ca:	b002      	add	sp, #8
 80052cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80052d0:	f000 b806 	b.w	80052e0 <__strtok_r>
 80052d4:	20000010 	.word	0x20000010
 80052d8:	080061a0 	.word	0x080061a0
 80052dc:	080061b7 	.word	0x080061b7

080052e0 <__strtok_r>:
 80052e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052e2:	b908      	cbnz	r0, 80052e8 <__strtok_r+0x8>
 80052e4:	6810      	ldr	r0, [r2, #0]
 80052e6:	b188      	cbz	r0, 800530c <__strtok_r+0x2c>
 80052e8:	4604      	mov	r4, r0
 80052ea:	4620      	mov	r0, r4
 80052ec:	f814 5b01 	ldrb.w	r5, [r4], #1
 80052f0:	460f      	mov	r7, r1
 80052f2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80052f6:	b91e      	cbnz	r6, 8005300 <__strtok_r+0x20>
 80052f8:	b965      	cbnz	r5, 8005314 <__strtok_r+0x34>
 80052fa:	6015      	str	r5, [r2, #0]
 80052fc:	4628      	mov	r0, r5
 80052fe:	e005      	b.n	800530c <__strtok_r+0x2c>
 8005300:	42b5      	cmp	r5, r6
 8005302:	d1f6      	bne.n	80052f2 <__strtok_r+0x12>
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1f0      	bne.n	80052ea <__strtok_r+0xa>
 8005308:	6014      	str	r4, [r2, #0]
 800530a:	7003      	strb	r3, [r0, #0]
 800530c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800530e:	461c      	mov	r4, r3
 8005310:	e00c      	b.n	800532c <__strtok_r+0x4c>
 8005312:	b915      	cbnz	r5, 800531a <__strtok_r+0x3a>
 8005314:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005318:	460e      	mov	r6, r1
 800531a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800531e:	42ab      	cmp	r3, r5
 8005320:	d1f7      	bne.n	8005312 <__strtok_r+0x32>
 8005322:	2b00      	cmp	r3, #0
 8005324:	d0f3      	beq.n	800530e <__strtok_r+0x2e>
 8005326:	2300      	movs	r3, #0
 8005328:	f804 3c01 	strb.w	r3, [r4, #-1]
 800532c:	6014      	str	r4, [r2, #0]
 800532e:	e7ed      	b.n	800530c <__strtok_r+0x2c>

08005330 <__assert_func>:
 8005330:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005332:	4614      	mov	r4, r2
 8005334:	461a      	mov	r2, r3
 8005336:	4b09      	ldr	r3, [pc, #36]	; (800535c <__assert_func+0x2c>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4605      	mov	r5, r0
 800533c:	68d8      	ldr	r0, [r3, #12]
 800533e:	b14c      	cbz	r4, 8005354 <__assert_func+0x24>
 8005340:	4b07      	ldr	r3, [pc, #28]	; (8005360 <__assert_func+0x30>)
 8005342:	9100      	str	r1, [sp, #0]
 8005344:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005348:	4906      	ldr	r1, [pc, #24]	; (8005364 <__assert_func+0x34>)
 800534a:	462b      	mov	r3, r5
 800534c:	f000 f9a6 	bl	800569c <fiprintf>
 8005350:	f000 fe4e 	bl	8005ff0 <abort>
 8005354:	4b04      	ldr	r3, [pc, #16]	; (8005368 <__assert_func+0x38>)
 8005356:	461c      	mov	r4, r3
 8005358:	e7f3      	b.n	8005342 <__assert_func+0x12>
 800535a:	bf00      	nop
 800535c:	20000010 	.word	0x20000010
 8005360:	08006214 	.word	0x08006214
 8005364:	08006221 	.word	0x08006221
 8005368:	0800624f 	.word	0x0800624f

0800536c <__sflush_r>:
 800536c:	898a      	ldrh	r2, [r1, #12]
 800536e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005372:	4605      	mov	r5, r0
 8005374:	0710      	lsls	r0, r2, #28
 8005376:	460c      	mov	r4, r1
 8005378:	d458      	bmi.n	800542c <__sflush_r+0xc0>
 800537a:	684b      	ldr	r3, [r1, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	dc05      	bgt.n	800538c <__sflush_r+0x20>
 8005380:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005382:	2b00      	cmp	r3, #0
 8005384:	dc02      	bgt.n	800538c <__sflush_r+0x20>
 8005386:	2000      	movs	r0, #0
 8005388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800538c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800538e:	2e00      	cmp	r6, #0
 8005390:	d0f9      	beq.n	8005386 <__sflush_r+0x1a>
 8005392:	2300      	movs	r3, #0
 8005394:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005398:	682f      	ldr	r7, [r5, #0]
 800539a:	602b      	str	r3, [r5, #0]
 800539c:	d032      	beq.n	8005404 <__sflush_r+0x98>
 800539e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80053a0:	89a3      	ldrh	r3, [r4, #12]
 80053a2:	075a      	lsls	r2, r3, #29
 80053a4:	d505      	bpl.n	80053b2 <__sflush_r+0x46>
 80053a6:	6863      	ldr	r3, [r4, #4]
 80053a8:	1ac0      	subs	r0, r0, r3
 80053aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80053ac:	b10b      	cbz	r3, 80053b2 <__sflush_r+0x46>
 80053ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053b0:	1ac0      	subs	r0, r0, r3
 80053b2:	2300      	movs	r3, #0
 80053b4:	4602      	mov	r2, r0
 80053b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053b8:	6a21      	ldr	r1, [r4, #32]
 80053ba:	4628      	mov	r0, r5
 80053bc:	47b0      	blx	r6
 80053be:	1c43      	adds	r3, r0, #1
 80053c0:	89a3      	ldrh	r3, [r4, #12]
 80053c2:	d106      	bne.n	80053d2 <__sflush_r+0x66>
 80053c4:	6829      	ldr	r1, [r5, #0]
 80053c6:	291d      	cmp	r1, #29
 80053c8:	d82c      	bhi.n	8005424 <__sflush_r+0xb8>
 80053ca:	4a2a      	ldr	r2, [pc, #168]	; (8005474 <__sflush_r+0x108>)
 80053cc:	40ca      	lsrs	r2, r1
 80053ce:	07d6      	lsls	r6, r2, #31
 80053d0:	d528      	bpl.n	8005424 <__sflush_r+0xb8>
 80053d2:	2200      	movs	r2, #0
 80053d4:	6062      	str	r2, [r4, #4]
 80053d6:	04d9      	lsls	r1, r3, #19
 80053d8:	6922      	ldr	r2, [r4, #16]
 80053da:	6022      	str	r2, [r4, #0]
 80053dc:	d504      	bpl.n	80053e8 <__sflush_r+0x7c>
 80053de:	1c42      	adds	r2, r0, #1
 80053e0:	d101      	bne.n	80053e6 <__sflush_r+0x7a>
 80053e2:	682b      	ldr	r3, [r5, #0]
 80053e4:	b903      	cbnz	r3, 80053e8 <__sflush_r+0x7c>
 80053e6:	6560      	str	r0, [r4, #84]	; 0x54
 80053e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053ea:	602f      	str	r7, [r5, #0]
 80053ec:	2900      	cmp	r1, #0
 80053ee:	d0ca      	beq.n	8005386 <__sflush_r+0x1a>
 80053f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053f4:	4299      	cmp	r1, r3
 80053f6:	d002      	beq.n	80053fe <__sflush_r+0x92>
 80053f8:	4628      	mov	r0, r5
 80053fa:	f7ff fd7f 	bl	8004efc <_free_r>
 80053fe:	2000      	movs	r0, #0
 8005400:	6360      	str	r0, [r4, #52]	; 0x34
 8005402:	e7c1      	b.n	8005388 <__sflush_r+0x1c>
 8005404:	6a21      	ldr	r1, [r4, #32]
 8005406:	2301      	movs	r3, #1
 8005408:	4628      	mov	r0, r5
 800540a:	47b0      	blx	r6
 800540c:	1c41      	adds	r1, r0, #1
 800540e:	d1c7      	bne.n	80053a0 <__sflush_r+0x34>
 8005410:	682b      	ldr	r3, [r5, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d0c4      	beq.n	80053a0 <__sflush_r+0x34>
 8005416:	2b1d      	cmp	r3, #29
 8005418:	d001      	beq.n	800541e <__sflush_r+0xb2>
 800541a:	2b16      	cmp	r3, #22
 800541c:	d101      	bne.n	8005422 <__sflush_r+0xb6>
 800541e:	602f      	str	r7, [r5, #0]
 8005420:	e7b1      	b.n	8005386 <__sflush_r+0x1a>
 8005422:	89a3      	ldrh	r3, [r4, #12]
 8005424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005428:	81a3      	strh	r3, [r4, #12]
 800542a:	e7ad      	b.n	8005388 <__sflush_r+0x1c>
 800542c:	690f      	ldr	r7, [r1, #16]
 800542e:	2f00      	cmp	r7, #0
 8005430:	d0a9      	beq.n	8005386 <__sflush_r+0x1a>
 8005432:	0793      	lsls	r3, r2, #30
 8005434:	680e      	ldr	r6, [r1, #0]
 8005436:	bf08      	it	eq
 8005438:	694b      	ldreq	r3, [r1, #20]
 800543a:	600f      	str	r7, [r1, #0]
 800543c:	bf18      	it	ne
 800543e:	2300      	movne	r3, #0
 8005440:	eba6 0807 	sub.w	r8, r6, r7
 8005444:	608b      	str	r3, [r1, #8]
 8005446:	f1b8 0f00 	cmp.w	r8, #0
 800544a:	dd9c      	ble.n	8005386 <__sflush_r+0x1a>
 800544c:	6a21      	ldr	r1, [r4, #32]
 800544e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005450:	4643      	mov	r3, r8
 8005452:	463a      	mov	r2, r7
 8005454:	4628      	mov	r0, r5
 8005456:	47b0      	blx	r6
 8005458:	2800      	cmp	r0, #0
 800545a:	dc06      	bgt.n	800546a <__sflush_r+0xfe>
 800545c:	89a3      	ldrh	r3, [r4, #12]
 800545e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005462:	81a3      	strh	r3, [r4, #12]
 8005464:	f04f 30ff 	mov.w	r0, #4294967295
 8005468:	e78e      	b.n	8005388 <__sflush_r+0x1c>
 800546a:	4407      	add	r7, r0
 800546c:	eba8 0800 	sub.w	r8, r8, r0
 8005470:	e7e9      	b.n	8005446 <__sflush_r+0xda>
 8005472:	bf00      	nop
 8005474:	20400001 	.word	0x20400001

08005478 <_fflush_r>:
 8005478:	b538      	push	{r3, r4, r5, lr}
 800547a:	690b      	ldr	r3, [r1, #16]
 800547c:	4605      	mov	r5, r0
 800547e:	460c      	mov	r4, r1
 8005480:	b913      	cbnz	r3, 8005488 <_fflush_r+0x10>
 8005482:	2500      	movs	r5, #0
 8005484:	4628      	mov	r0, r5
 8005486:	bd38      	pop	{r3, r4, r5, pc}
 8005488:	b118      	cbz	r0, 8005492 <_fflush_r+0x1a>
 800548a:	6983      	ldr	r3, [r0, #24]
 800548c:	b90b      	cbnz	r3, 8005492 <_fflush_r+0x1a>
 800548e:	f000 f887 	bl	80055a0 <__sinit>
 8005492:	4b14      	ldr	r3, [pc, #80]	; (80054e4 <_fflush_r+0x6c>)
 8005494:	429c      	cmp	r4, r3
 8005496:	d11b      	bne.n	80054d0 <_fflush_r+0x58>
 8005498:	686c      	ldr	r4, [r5, #4]
 800549a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d0ef      	beq.n	8005482 <_fflush_r+0xa>
 80054a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80054a4:	07d0      	lsls	r0, r2, #31
 80054a6:	d404      	bmi.n	80054b2 <_fflush_r+0x3a>
 80054a8:	0599      	lsls	r1, r3, #22
 80054aa:	d402      	bmi.n	80054b2 <_fflush_r+0x3a>
 80054ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054ae:	f000 f927 	bl	8005700 <__retarget_lock_acquire_recursive>
 80054b2:	4628      	mov	r0, r5
 80054b4:	4621      	mov	r1, r4
 80054b6:	f7ff ff59 	bl	800536c <__sflush_r>
 80054ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054bc:	07da      	lsls	r2, r3, #31
 80054be:	4605      	mov	r5, r0
 80054c0:	d4e0      	bmi.n	8005484 <_fflush_r+0xc>
 80054c2:	89a3      	ldrh	r3, [r4, #12]
 80054c4:	059b      	lsls	r3, r3, #22
 80054c6:	d4dd      	bmi.n	8005484 <_fflush_r+0xc>
 80054c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054ca:	f000 f91a 	bl	8005702 <__retarget_lock_release_recursive>
 80054ce:	e7d9      	b.n	8005484 <_fflush_r+0xc>
 80054d0:	4b05      	ldr	r3, [pc, #20]	; (80054e8 <_fflush_r+0x70>)
 80054d2:	429c      	cmp	r4, r3
 80054d4:	d101      	bne.n	80054da <_fflush_r+0x62>
 80054d6:	68ac      	ldr	r4, [r5, #8]
 80054d8:	e7df      	b.n	800549a <_fflush_r+0x22>
 80054da:	4b04      	ldr	r3, [pc, #16]	; (80054ec <_fflush_r+0x74>)
 80054dc:	429c      	cmp	r4, r3
 80054de:	bf08      	it	eq
 80054e0:	68ec      	ldreq	r4, [r5, #12]
 80054e2:	e7da      	b.n	800549a <_fflush_r+0x22>
 80054e4:	08006270 	.word	0x08006270
 80054e8:	08006290 	.word	0x08006290
 80054ec:	08006250 	.word	0x08006250

080054f0 <std>:
 80054f0:	2300      	movs	r3, #0
 80054f2:	b510      	push	{r4, lr}
 80054f4:	4604      	mov	r4, r0
 80054f6:	e9c0 3300 	strd	r3, r3, [r0]
 80054fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054fe:	6083      	str	r3, [r0, #8]
 8005500:	8181      	strh	r1, [r0, #12]
 8005502:	6643      	str	r3, [r0, #100]	; 0x64
 8005504:	81c2      	strh	r2, [r0, #14]
 8005506:	6183      	str	r3, [r0, #24]
 8005508:	4619      	mov	r1, r3
 800550a:	2208      	movs	r2, #8
 800550c:	305c      	adds	r0, #92	; 0x5c
 800550e:	f7ff fced 	bl	8004eec <memset>
 8005512:	4b05      	ldr	r3, [pc, #20]	; (8005528 <std+0x38>)
 8005514:	6263      	str	r3, [r4, #36]	; 0x24
 8005516:	4b05      	ldr	r3, [pc, #20]	; (800552c <std+0x3c>)
 8005518:	62a3      	str	r3, [r4, #40]	; 0x28
 800551a:	4b05      	ldr	r3, [pc, #20]	; (8005530 <std+0x40>)
 800551c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800551e:	4b05      	ldr	r3, [pc, #20]	; (8005534 <std+0x44>)
 8005520:	6224      	str	r4, [r4, #32]
 8005522:	6323      	str	r3, [r4, #48]	; 0x30
 8005524:	bd10      	pop	{r4, pc}
 8005526:	bf00      	nop
 8005528:	08005dc5 	.word	0x08005dc5
 800552c:	08005de7 	.word	0x08005de7
 8005530:	08005e1f 	.word	0x08005e1f
 8005534:	08005e43 	.word	0x08005e43

08005538 <_cleanup_r>:
 8005538:	4901      	ldr	r1, [pc, #4]	; (8005540 <_cleanup_r+0x8>)
 800553a:	f000 b8c1 	b.w	80056c0 <_fwalk_reent>
 800553e:	bf00      	nop
 8005540:	08005479 	.word	0x08005479

08005544 <__sfmoreglue>:
 8005544:	b570      	push	{r4, r5, r6, lr}
 8005546:	2268      	movs	r2, #104	; 0x68
 8005548:	1e4d      	subs	r5, r1, #1
 800554a:	4355      	muls	r5, r2
 800554c:	460e      	mov	r6, r1
 800554e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005552:	f7ff fd3f 	bl	8004fd4 <_malloc_r>
 8005556:	4604      	mov	r4, r0
 8005558:	b140      	cbz	r0, 800556c <__sfmoreglue+0x28>
 800555a:	2100      	movs	r1, #0
 800555c:	e9c0 1600 	strd	r1, r6, [r0]
 8005560:	300c      	adds	r0, #12
 8005562:	60a0      	str	r0, [r4, #8]
 8005564:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005568:	f7ff fcc0 	bl	8004eec <memset>
 800556c:	4620      	mov	r0, r4
 800556e:	bd70      	pop	{r4, r5, r6, pc}

08005570 <__sfp_lock_acquire>:
 8005570:	4801      	ldr	r0, [pc, #4]	; (8005578 <__sfp_lock_acquire+0x8>)
 8005572:	f000 b8c5 	b.w	8005700 <__retarget_lock_acquire_recursive>
 8005576:	bf00      	nop
 8005578:	200005a9 	.word	0x200005a9

0800557c <__sfp_lock_release>:
 800557c:	4801      	ldr	r0, [pc, #4]	; (8005584 <__sfp_lock_release+0x8>)
 800557e:	f000 b8c0 	b.w	8005702 <__retarget_lock_release_recursive>
 8005582:	bf00      	nop
 8005584:	200005a9 	.word	0x200005a9

08005588 <__sinit_lock_acquire>:
 8005588:	4801      	ldr	r0, [pc, #4]	; (8005590 <__sinit_lock_acquire+0x8>)
 800558a:	f000 b8b9 	b.w	8005700 <__retarget_lock_acquire_recursive>
 800558e:	bf00      	nop
 8005590:	200005aa 	.word	0x200005aa

08005594 <__sinit_lock_release>:
 8005594:	4801      	ldr	r0, [pc, #4]	; (800559c <__sinit_lock_release+0x8>)
 8005596:	f000 b8b4 	b.w	8005702 <__retarget_lock_release_recursive>
 800559a:	bf00      	nop
 800559c:	200005aa 	.word	0x200005aa

080055a0 <__sinit>:
 80055a0:	b510      	push	{r4, lr}
 80055a2:	4604      	mov	r4, r0
 80055a4:	f7ff fff0 	bl	8005588 <__sinit_lock_acquire>
 80055a8:	69a3      	ldr	r3, [r4, #24]
 80055aa:	b11b      	cbz	r3, 80055b4 <__sinit+0x14>
 80055ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055b0:	f7ff bff0 	b.w	8005594 <__sinit_lock_release>
 80055b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80055b8:	6523      	str	r3, [r4, #80]	; 0x50
 80055ba:	4b13      	ldr	r3, [pc, #76]	; (8005608 <__sinit+0x68>)
 80055bc:	4a13      	ldr	r2, [pc, #76]	; (800560c <__sinit+0x6c>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80055c2:	42a3      	cmp	r3, r4
 80055c4:	bf04      	itt	eq
 80055c6:	2301      	moveq	r3, #1
 80055c8:	61a3      	streq	r3, [r4, #24]
 80055ca:	4620      	mov	r0, r4
 80055cc:	f000 f820 	bl	8005610 <__sfp>
 80055d0:	6060      	str	r0, [r4, #4]
 80055d2:	4620      	mov	r0, r4
 80055d4:	f000 f81c 	bl	8005610 <__sfp>
 80055d8:	60a0      	str	r0, [r4, #8]
 80055da:	4620      	mov	r0, r4
 80055dc:	f000 f818 	bl	8005610 <__sfp>
 80055e0:	2200      	movs	r2, #0
 80055e2:	60e0      	str	r0, [r4, #12]
 80055e4:	2104      	movs	r1, #4
 80055e6:	6860      	ldr	r0, [r4, #4]
 80055e8:	f7ff ff82 	bl	80054f0 <std>
 80055ec:	68a0      	ldr	r0, [r4, #8]
 80055ee:	2201      	movs	r2, #1
 80055f0:	2109      	movs	r1, #9
 80055f2:	f7ff ff7d 	bl	80054f0 <std>
 80055f6:	68e0      	ldr	r0, [r4, #12]
 80055f8:	2202      	movs	r2, #2
 80055fa:	2112      	movs	r1, #18
 80055fc:	f7ff ff78 	bl	80054f0 <std>
 8005600:	2301      	movs	r3, #1
 8005602:	61a3      	str	r3, [r4, #24]
 8005604:	e7d2      	b.n	80055ac <__sinit+0xc>
 8005606:	bf00      	nop
 8005608:	0800619c 	.word	0x0800619c
 800560c:	08005539 	.word	0x08005539

08005610 <__sfp>:
 8005610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005612:	4607      	mov	r7, r0
 8005614:	f7ff ffac 	bl	8005570 <__sfp_lock_acquire>
 8005618:	4b1e      	ldr	r3, [pc, #120]	; (8005694 <__sfp+0x84>)
 800561a:	681e      	ldr	r6, [r3, #0]
 800561c:	69b3      	ldr	r3, [r6, #24]
 800561e:	b913      	cbnz	r3, 8005626 <__sfp+0x16>
 8005620:	4630      	mov	r0, r6
 8005622:	f7ff ffbd 	bl	80055a0 <__sinit>
 8005626:	3648      	adds	r6, #72	; 0x48
 8005628:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800562c:	3b01      	subs	r3, #1
 800562e:	d503      	bpl.n	8005638 <__sfp+0x28>
 8005630:	6833      	ldr	r3, [r6, #0]
 8005632:	b30b      	cbz	r3, 8005678 <__sfp+0x68>
 8005634:	6836      	ldr	r6, [r6, #0]
 8005636:	e7f7      	b.n	8005628 <__sfp+0x18>
 8005638:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800563c:	b9d5      	cbnz	r5, 8005674 <__sfp+0x64>
 800563e:	4b16      	ldr	r3, [pc, #88]	; (8005698 <__sfp+0x88>)
 8005640:	60e3      	str	r3, [r4, #12]
 8005642:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005646:	6665      	str	r5, [r4, #100]	; 0x64
 8005648:	f000 f859 	bl	80056fe <__retarget_lock_init_recursive>
 800564c:	f7ff ff96 	bl	800557c <__sfp_lock_release>
 8005650:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005654:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005658:	6025      	str	r5, [r4, #0]
 800565a:	61a5      	str	r5, [r4, #24]
 800565c:	2208      	movs	r2, #8
 800565e:	4629      	mov	r1, r5
 8005660:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005664:	f7ff fc42 	bl	8004eec <memset>
 8005668:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800566c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005670:	4620      	mov	r0, r4
 8005672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005674:	3468      	adds	r4, #104	; 0x68
 8005676:	e7d9      	b.n	800562c <__sfp+0x1c>
 8005678:	2104      	movs	r1, #4
 800567a:	4638      	mov	r0, r7
 800567c:	f7ff ff62 	bl	8005544 <__sfmoreglue>
 8005680:	4604      	mov	r4, r0
 8005682:	6030      	str	r0, [r6, #0]
 8005684:	2800      	cmp	r0, #0
 8005686:	d1d5      	bne.n	8005634 <__sfp+0x24>
 8005688:	f7ff ff78 	bl	800557c <__sfp_lock_release>
 800568c:	230c      	movs	r3, #12
 800568e:	603b      	str	r3, [r7, #0]
 8005690:	e7ee      	b.n	8005670 <__sfp+0x60>
 8005692:	bf00      	nop
 8005694:	0800619c 	.word	0x0800619c
 8005698:	ffff0001 	.word	0xffff0001

0800569c <fiprintf>:
 800569c:	b40e      	push	{r1, r2, r3}
 800569e:	b503      	push	{r0, r1, lr}
 80056a0:	4601      	mov	r1, r0
 80056a2:	ab03      	add	r3, sp, #12
 80056a4:	4805      	ldr	r0, [pc, #20]	; (80056bc <fiprintf+0x20>)
 80056a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80056aa:	6800      	ldr	r0, [r0, #0]
 80056ac:	9301      	str	r3, [sp, #4]
 80056ae:	f000 f8c5 	bl	800583c <_vfiprintf_r>
 80056b2:	b002      	add	sp, #8
 80056b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80056b8:	b003      	add	sp, #12
 80056ba:	4770      	bx	lr
 80056bc:	20000010 	.word	0x20000010

080056c0 <_fwalk_reent>:
 80056c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056c4:	4606      	mov	r6, r0
 80056c6:	4688      	mov	r8, r1
 80056c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80056cc:	2700      	movs	r7, #0
 80056ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80056d2:	f1b9 0901 	subs.w	r9, r9, #1
 80056d6:	d505      	bpl.n	80056e4 <_fwalk_reent+0x24>
 80056d8:	6824      	ldr	r4, [r4, #0]
 80056da:	2c00      	cmp	r4, #0
 80056dc:	d1f7      	bne.n	80056ce <_fwalk_reent+0xe>
 80056de:	4638      	mov	r0, r7
 80056e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056e4:	89ab      	ldrh	r3, [r5, #12]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d907      	bls.n	80056fa <_fwalk_reent+0x3a>
 80056ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80056ee:	3301      	adds	r3, #1
 80056f0:	d003      	beq.n	80056fa <_fwalk_reent+0x3a>
 80056f2:	4629      	mov	r1, r5
 80056f4:	4630      	mov	r0, r6
 80056f6:	47c0      	blx	r8
 80056f8:	4307      	orrs	r7, r0
 80056fa:	3568      	adds	r5, #104	; 0x68
 80056fc:	e7e9      	b.n	80056d2 <_fwalk_reent+0x12>

080056fe <__retarget_lock_init_recursive>:
 80056fe:	4770      	bx	lr

08005700 <__retarget_lock_acquire_recursive>:
 8005700:	4770      	bx	lr

08005702 <__retarget_lock_release_recursive>:
 8005702:	4770      	bx	lr

08005704 <__swhatbuf_r>:
 8005704:	b570      	push	{r4, r5, r6, lr}
 8005706:	460e      	mov	r6, r1
 8005708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800570c:	2900      	cmp	r1, #0
 800570e:	b096      	sub	sp, #88	; 0x58
 8005710:	4614      	mov	r4, r2
 8005712:	461d      	mov	r5, r3
 8005714:	da08      	bge.n	8005728 <__swhatbuf_r+0x24>
 8005716:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	602a      	str	r2, [r5, #0]
 800571e:	061a      	lsls	r2, r3, #24
 8005720:	d410      	bmi.n	8005744 <__swhatbuf_r+0x40>
 8005722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005726:	e00e      	b.n	8005746 <__swhatbuf_r+0x42>
 8005728:	466a      	mov	r2, sp
 800572a:	f000 fc79 	bl	8006020 <_fstat_r>
 800572e:	2800      	cmp	r0, #0
 8005730:	dbf1      	blt.n	8005716 <__swhatbuf_r+0x12>
 8005732:	9a01      	ldr	r2, [sp, #4]
 8005734:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005738:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800573c:	425a      	negs	r2, r3
 800573e:	415a      	adcs	r2, r3
 8005740:	602a      	str	r2, [r5, #0]
 8005742:	e7ee      	b.n	8005722 <__swhatbuf_r+0x1e>
 8005744:	2340      	movs	r3, #64	; 0x40
 8005746:	2000      	movs	r0, #0
 8005748:	6023      	str	r3, [r4, #0]
 800574a:	b016      	add	sp, #88	; 0x58
 800574c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005750 <__smakebuf_r>:
 8005750:	898b      	ldrh	r3, [r1, #12]
 8005752:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005754:	079d      	lsls	r5, r3, #30
 8005756:	4606      	mov	r6, r0
 8005758:	460c      	mov	r4, r1
 800575a:	d507      	bpl.n	800576c <__smakebuf_r+0x1c>
 800575c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005760:	6023      	str	r3, [r4, #0]
 8005762:	6123      	str	r3, [r4, #16]
 8005764:	2301      	movs	r3, #1
 8005766:	6163      	str	r3, [r4, #20]
 8005768:	b002      	add	sp, #8
 800576a:	bd70      	pop	{r4, r5, r6, pc}
 800576c:	ab01      	add	r3, sp, #4
 800576e:	466a      	mov	r2, sp
 8005770:	f7ff ffc8 	bl	8005704 <__swhatbuf_r>
 8005774:	9900      	ldr	r1, [sp, #0]
 8005776:	4605      	mov	r5, r0
 8005778:	4630      	mov	r0, r6
 800577a:	f7ff fc2b 	bl	8004fd4 <_malloc_r>
 800577e:	b948      	cbnz	r0, 8005794 <__smakebuf_r+0x44>
 8005780:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005784:	059a      	lsls	r2, r3, #22
 8005786:	d4ef      	bmi.n	8005768 <__smakebuf_r+0x18>
 8005788:	f023 0303 	bic.w	r3, r3, #3
 800578c:	f043 0302 	orr.w	r3, r3, #2
 8005790:	81a3      	strh	r3, [r4, #12]
 8005792:	e7e3      	b.n	800575c <__smakebuf_r+0xc>
 8005794:	4b0d      	ldr	r3, [pc, #52]	; (80057cc <__smakebuf_r+0x7c>)
 8005796:	62b3      	str	r3, [r6, #40]	; 0x28
 8005798:	89a3      	ldrh	r3, [r4, #12]
 800579a:	6020      	str	r0, [r4, #0]
 800579c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057a0:	81a3      	strh	r3, [r4, #12]
 80057a2:	9b00      	ldr	r3, [sp, #0]
 80057a4:	6163      	str	r3, [r4, #20]
 80057a6:	9b01      	ldr	r3, [sp, #4]
 80057a8:	6120      	str	r0, [r4, #16]
 80057aa:	b15b      	cbz	r3, 80057c4 <__smakebuf_r+0x74>
 80057ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057b0:	4630      	mov	r0, r6
 80057b2:	f000 fc47 	bl	8006044 <_isatty_r>
 80057b6:	b128      	cbz	r0, 80057c4 <__smakebuf_r+0x74>
 80057b8:	89a3      	ldrh	r3, [r4, #12]
 80057ba:	f023 0303 	bic.w	r3, r3, #3
 80057be:	f043 0301 	orr.w	r3, r3, #1
 80057c2:	81a3      	strh	r3, [r4, #12]
 80057c4:	89a0      	ldrh	r0, [r4, #12]
 80057c6:	4305      	orrs	r5, r0
 80057c8:	81a5      	strh	r5, [r4, #12]
 80057ca:	e7cd      	b.n	8005768 <__smakebuf_r+0x18>
 80057cc:	08005539 	.word	0x08005539

080057d0 <__malloc_lock>:
 80057d0:	4801      	ldr	r0, [pc, #4]	; (80057d8 <__malloc_lock+0x8>)
 80057d2:	f7ff bf95 	b.w	8005700 <__retarget_lock_acquire_recursive>
 80057d6:	bf00      	nop
 80057d8:	200005a8 	.word	0x200005a8

080057dc <__malloc_unlock>:
 80057dc:	4801      	ldr	r0, [pc, #4]	; (80057e4 <__malloc_unlock+0x8>)
 80057de:	f7ff bf90 	b.w	8005702 <__retarget_lock_release_recursive>
 80057e2:	bf00      	nop
 80057e4:	200005a8 	.word	0x200005a8

080057e8 <__sfputc_r>:
 80057e8:	6893      	ldr	r3, [r2, #8]
 80057ea:	3b01      	subs	r3, #1
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	b410      	push	{r4}
 80057f0:	6093      	str	r3, [r2, #8]
 80057f2:	da08      	bge.n	8005806 <__sfputc_r+0x1e>
 80057f4:	6994      	ldr	r4, [r2, #24]
 80057f6:	42a3      	cmp	r3, r4
 80057f8:	db01      	blt.n	80057fe <__sfputc_r+0x16>
 80057fa:	290a      	cmp	r1, #10
 80057fc:	d103      	bne.n	8005806 <__sfputc_r+0x1e>
 80057fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005802:	f000 bb23 	b.w	8005e4c <__swbuf_r>
 8005806:	6813      	ldr	r3, [r2, #0]
 8005808:	1c58      	adds	r0, r3, #1
 800580a:	6010      	str	r0, [r2, #0]
 800580c:	7019      	strb	r1, [r3, #0]
 800580e:	4608      	mov	r0, r1
 8005810:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005814:	4770      	bx	lr

08005816 <__sfputs_r>:
 8005816:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005818:	4606      	mov	r6, r0
 800581a:	460f      	mov	r7, r1
 800581c:	4614      	mov	r4, r2
 800581e:	18d5      	adds	r5, r2, r3
 8005820:	42ac      	cmp	r4, r5
 8005822:	d101      	bne.n	8005828 <__sfputs_r+0x12>
 8005824:	2000      	movs	r0, #0
 8005826:	e007      	b.n	8005838 <__sfputs_r+0x22>
 8005828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800582c:	463a      	mov	r2, r7
 800582e:	4630      	mov	r0, r6
 8005830:	f7ff ffda 	bl	80057e8 <__sfputc_r>
 8005834:	1c43      	adds	r3, r0, #1
 8005836:	d1f3      	bne.n	8005820 <__sfputs_r+0xa>
 8005838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800583c <_vfiprintf_r>:
 800583c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005840:	460d      	mov	r5, r1
 8005842:	b09d      	sub	sp, #116	; 0x74
 8005844:	4614      	mov	r4, r2
 8005846:	4698      	mov	r8, r3
 8005848:	4606      	mov	r6, r0
 800584a:	b118      	cbz	r0, 8005854 <_vfiprintf_r+0x18>
 800584c:	6983      	ldr	r3, [r0, #24]
 800584e:	b90b      	cbnz	r3, 8005854 <_vfiprintf_r+0x18>
 8005850:	f7ff fea6 	bl	80055a0 <__sinit>
 8005854:	4b89      	ldr	r3, [pc, #548]	; (8005a7c <_vfiprintf_r+0x240>)
 8005856:	429d      	cmp	r5, r3
 8005858:	d11b      	bne.n	8005892 <_vfiprintf_r+0x56>
 800585a:	6875      	ldr	r5, [r6, #4]
 800585c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800585e:	07d9      	lsls	r1, r3, #31
 8005860:	d405      	bmi.n	800586e <_vfiprintf_r+0x32>
 8005862:	89ab      	ldrh	r3, [r5, #12]
 8005864:	059a      	lsls	r2, r3, #22
 8005866:	d402      	bmi.n	800586e <_vfiprintf_r+0x32>
 8005868:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800586a:	f7ff ff49 	bl	8005700 <__retarget_lock_acquire_recursive>
 800586e:	89ab      	ldrh	r3, [r5, #12]
 8005870:	071b      	lsls	r3, r3, #28
 8005872:	d501      	bpl.n	8005878 <_vfiprintf_r+0x3c>
 8005874:	692b      	ldr	r3, [r5, #16]
 8005876:	b9eb      	cbnz	r3, 80058b4 <_vfiprintf_r+0x78>
 8005878:	4629      	mov	r1, r5
 800587a:	4630      	mov	r0, r6
 800587c:	f000 fb4a 	bl	8005f14 <__swsetup_r>
 8005880:	b1c0      	cbz	r0, 80058b4 <_vfiprintf_r+0x78>
 8005882:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005884:	07dc      	lsls	r4, r3, #31
 8005886:	d50e      	bpl.n	80058a6 <_vfiprintf_r+0x6a>
 8005888:	f04f 30ff 	mov.w	r0, #4294967295
 800588c:	b01d      	add	sp, #116	; 0x74
 800588e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005892:	4b7b      	ldr	r3, [pc, #492]	; (8005a80 <_vfiprintf_r+0x244>)
 8005894:	429d      	cmp	r5, r3
 8005896:	d101      	bne.n	800589c <_vfiprintf_r+0x60>
 8005898:	68b5      	ldr	r5, [r6, #8]
 800589a:	e7df      	b.n	800585c <_vfiprintf_r+0x20>
 800589c:	4b79      	ldr	r3, [pc, #484]	; (8005a84 <_vfiprintf_r+0x248>)
 800589e:	429d      	cmp	r5, r3
 80058a0:	bf08      	it	eq
 80058a2:	68f5      	ldreq	r5, [r6, #12]
 80058a4:	e7da      	b.n	800585c <_vfiprintf_r+0x20>
 80058a6:	89ab      	ldrh	r3, [r5, #12]
 80058a8:	0598      	lsls	r0, r3, #22
 80058aa:	d4ed      	bmi.n	8005888 <_vfiprintf_r+0x4c>
 80058ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058ae:	f7ff ff28 	bl	8005702 <__retarget_lock_release_recursive>
 80058b2:	e7e9      	b.n	8005888 <_vfiprintf_r+0x4c>
 80058b4:	2300      	movs	r3, #0
 80058b6:	9309      	str	r3, [sp, #36]	; 0x24
 80058b8:	2320      	movs	r3, #32
 80058ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058be:	f8cd 800c 	str.w	r8, [sp, #12]
 80058c2:	2330      	movs	r3, #48	; 0x30
 80058c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005a88 <_vfiprintf_r+0x24c>
 80058c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058cc:	f04f 0901 	mov.w	r9, #1
 80058d0:	4623      	mov	r3, r4
 80058d2:	469a      	mov	sl, r3
 80058d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058d8:	b10a      	cbz	r2, 80058de <_vfiprintf_r+0xa2>
 80058da:	2a25      	cmp	r2, #37	; 0x25
 80058dc:	d1f9      	bne.n	80058d2 <_vfiprintf_r+0x96>
 80058de:	ebba 0b04 	subs.w	fp, sl, r4
 80058e2:	d00b      	beq.n	80058fc <_vfiprintf_r+0xc0>
 80058e4:	465b      	mov	r3, fp
 80058e6:	4622      	mov	r2, r4
 80058e8:	4629      	mov	r1, r5
 80058ea:	4630      	mov	r0, r6
 80058ec:	f7ff ff93 	bl	8005816 <__sfputs_r>
 80058f0:	3001      	adds	r0, #1
 80058f2:	f000 80aa 	beq.w	8005a4a <_vfiprintf_r+0x20e>
 80058f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058f8:	445a      	add	r2, fp
 80058fa:	9209      	str	r2, [sp, #36]	; 0x24
 80058fc:	f89a 3000 	ldrb.w	r3, [sl]
 8005900:	2b00      	cmp	r3, #0
 8005902:	f000 80a2 	beq.w	8005a4a <_vfiprintf_r+0x20e>
 8005906:	2300      	movs	r3, #0
 8005908:	f04f 32ff 	mov.w	r2, #4294967295
 800590c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005910:	f10a 0a01 	add.w	sl, sl, #1
 8005914:	9304      	str	r3, [sp, #16]
 8005916:	9307      	str	r3, [sp, #28]
 8005918:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800591c:	931a      	str	r3, [sp, #104]	; 0x68
 800591e:	4654      	mov	r4, sl
 8005920:	2205      	movs	r2, #5
 8005922:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005926:	4858      	ldr	r0, [pc, #352]	; (8005a88 <_vfiprintf_r+0x24c>)
 8005928:	f7fa fca2 	bl	8000270 <memchr>
 800592c:	9a04      	ldr	r2, [sp, #16]
 800592e:	b9d8      	cbnz	r0, 8005968 <_vfiprintf_r+0x12c>
 8005930:	06d1      	lsls	r1, r2, #27
 8005932:	bf44      	itt	mi
 8005934:	2320      	movmi	r3, #32
 8005936:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800593a:	0713      	lsls	r3, r2, #28
 800593c:	bf44      	itt	mi
 800593e:	232b      	movmi	r3, #43	; 0x2b
 8005940:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005944:	f89a 3000 	ldrb.w	r3, [sl]
 8005948:	2b2a      	cmp	r3, #42	; 0x2a
 800594a:	d015      	beq.n	8005978 <_vfiprintf_r+0x13c>
 800594c:	9a07      	ldr	r2, [sp, #28]
 800594e:	4654      	mov	r4, sl
 8005950:	2000      	movs	r0, #0
 8005952:	f04f 0c0a 	mov.w	ip, #10
 8005956:	4621      	mov	r1, r4
 8005958:	f811 3b01 	ldrb.w	r3, [r1], #1
 800595c:	3b30      	subs	r3, #48	; 0x30
 800595e:	2b09      	cmp	r3, #9
 8005960:	d94e      	bls.n	8005a00 <_vfiprintf_r+0x1c4>
 8005962:	b1b0      	cbz	r0, 8005992 <_vfiprintf_r+0x156>
 8005964:	9207      	str	r2, [sp, #28]
 8005966:	e014      	b.n	8005992 <_vfiprintf_r+0x156>
 8005968:	eba0 0308 	sub.w	r3, r0, r8
 800596c:	fa09 f303 	lsl.w	r3, r9, r3
 8005970:	4313      	orrs	r3, r2
 8005972:	9304      	str	r3, [sp, #16]
 8005974:	46a2      	mov	sl, r4
 8005976:	e7d2      	b.n	800591e <_vfiprintf_r+0xe2>
 8005978:	9b03      	ldr	r3, [sp, #12]
 800597a:	1d19      	adds	r1, r3, #4
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	9103      	str	r1, [sp, #12]
 8005980:	2b00      	cmp	r3, #0
 8005982:	bfbb      	ittet	lt
 8005984:	425b      	neglt	r3, r3
 8005986:	f042 0202 	orrlt.w	r2, r2, #2
 800598a:	9307      	strge	r3, [sp, #28]
 800598c:	9307      	strlt	r3, [sp, #28]
 800598e:	bfb8      	it	lt
 8005990:	9204      	strlt	r2, [sp, #16]
 8005992:	7823      	ldrb	r3, [r4, #0]
 8005994:	2b2e      	cmp	r3, #46	; 0x2e
 8005996:	d10c      	bne.n	80059b2 <_vfiprintf_r+0x176>
 8005998:	7863      	ldrb	r3, [r4, #1]
 800599a:	2b2a      	cmp	r3, #42	; 0x2a
 800599c:	d135      	bne.n	8005a0a <_vfiprintf_r+0x1ce>
 800599e:	9b03      	ldr	r3, [sp, #12]
 80059a0:	1d1a      	adds	r2, r3, #4
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	9203      	str	r2, [sp, #12]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	bfb8      	it	lt
 80059aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80059ae:	3402      	adds	r4, #2
 80059b0:	9305      	str	r3, [sp, #20]
 80059b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005a98 <_vfiprintf_r+0x25c>
 80059b6:	7821      	ldrb	r1, [r4, #0]
 80059b8:	2203      	movs	r2, #3
 80059ba:	4650      	mov	r0, sl
 80059bc:	f7fa fc58 	bl	8000270 <memchr>
 80059c0:	b140      	cbz	r0, 80059d4 <_vfiprintf_r+0x198>
 80059c2:	2340      	movs	r3, #64	; 0x40
 80059c4:	eba0 000a 	sub.w	r0, r0, sl
 80059c8:	fa03 f000 	lsl.w	r0, r3, r0
 80059cc:	9b04      	ldr	r3, [sp, #16]
 80059ce:	4303      	orrs	r3, r0
 80059d0:	3401      	adds	r4, #1
 80059d2:	9304      	str	r3, [sp, #16]
 80059d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059d8:	482c      	ldr	r0, [pc, #176]	; (8005a8c <_vfiprintf_r+0x250>)
 80059da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059de:	2206      	movs	r2, #6
 80059e0:	f7fa fc46 	bl	8000270 <memchr>
 80059e4:	2800      	cmp	r0, #0
 80059e6:	d03f      	beq.n	8005a68 <_vfiprintf_r+0x22c>
 80059e8:	4b29      	ldr	r3, [pc, #164]	; (8005a90 <_vfiprintf_r+0x254>)
 80059ea:	bb1b      	cbnz	r3, 8005a34 <_vfiprintf_r+0x1f8>
 80059ec:	9b03      	ldr	r3, [sp, #12]
 80059ee:	3307      	adds	r3, #7
 80059f0:	f023 0307 	bic.w	r3, r3, #7
 80059f4:	3308      	adds	r3, #8
 80059f6:	9303      	str	r3, [sp, #12]
 80059f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059fa:	443b      	add	r3, r7
 80059fc:	9309      	str	r3, [sp, #36]	; 0x24
 80059fe:	e767      	b.n	80058d0 <_vfiprintf_r+0x94>
 8005a00:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a04:	460c      	mov	r4, r1
 8005a06:	2001      	movs	r0, #1
 8005a08:	e7a5      	b.n	8005956 <_vfiprintf_r+0x11a>
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	3401      	adds	r4, #1
 8005a0e:	9305      	str	r3, [sp, #20]
 8005a10:	4619      	mov	r1, r3
 8005a12:	f04f 0c0a 	mov.w	ip, #10
 8005a16:	4620      	mov	r0, r4
 8005a18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a1c:	3a30      	subs	r2, #48	; 0x30
 8005a1e:	2a09      	cmp	r2, #9
 8005a20:	d903      	bls.n	8005a2a <_vfiprintf_r+0x1ee>
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d0c5      	beq.n	80059b2 <_vfiprintf_r+0x176>
 8005a26:	9105      	str	r1, [sp, #20]
 8005a28:	e7c3      	b.n	80059b2 <_vfiprintf_r+0x176>
 8005a2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a2e:	4604      	mov	r4, r0
 8005a30:	2301      	movs	r3, #1
 8005a32:	e7f0      	b.n	8005a16 <_vfiprintf_r+0x1da>
 8005a34:	ab03      	add	r3, sp, #12
 8005a36:	9300      	str	r3, [sp, #0]
 8005a38:	462a      	mov	r2, r5
 8005a3a:	4b16      	ldr	r3, [pc, #88]	; (8005a94 <_vfiprintf_r+0x258>)
 8005a3c:	a904      	add	r1, sp, #16
 8005a3e:	4630      	mov	r0, r6
 8005a40:	f3af 8000 	nop.w
 8005a44:	4607      	mov	r7, r0
 8005a46:	1c78      	adds	r0, r7, #1
 8005a48:	d1d6      	bne.n	80059f8 <_vfiprintf_r+0x1bc>
 8005a4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a4c:	07d9      	lsls	r1, r3, #31
 8005a4e:	d405      	bmi.n	8005a5c <_vfiprintf_r+0x220>
 8005a50:	89ab      	ldrh	r3, [r5, #12]
 8005a52:	059a      	lsls	r2, r3, #22
 8005a54:	d402      	bmi.n	8005a5c <_vfiprintf_r+0x220>
 8005a56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a58:	f7ff fe53 	bl	8005702 <__retarget_lock_release_recursive>
 8005a5c:	89ab      	ldrh	r3, [r5, #12]
 8005a5e:	065b      	lsls	r3, r3, #25
 8005a60:	f53f af12 	bmi.w	8005888 <_vfiprintf_r+0x4c>
 8005a64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a66:	e711      	b.n	800588c <_vfiprintf_r+0x50>
 8005a68:	ab03      	add	r3, sp, #12
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	462a      	mov	r2, r5
 8005a6e:	4b09      	ldr	r3, [pc, #36]	; (8005a94 <_vfiprintf_r+0x258>)
 8005a70:	a904      	add	r1, sp, #16
 8005a72:	4630      	mov	r0, r6
 8005a74:	f000 f880 	bl	8005b78 <_printf_i>
 8005a78:	e7e4      	b.n	8005a44 <_vfiprintf_r+0x208>
 8005a7a:	bf00      	nop
 8005a7c:	08006270 	.word	0x08006270
 8005a80:	08006290 	.word	0x08006290
 8005a84:	08006250 	.word	0x08006250
 8005a88:	080062b0 	.word	0x080062b0
 8005a8c:	080062ba 	.word	0x080062ba
 8005a90:	00000000 	.word	0x00000000
 8005a94:	08005817 	.word	0x08005817
 8005a98:	080062b6 	.word	0x080062b6

08005a9c <_printf_common>:
 8005a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005aa0:	4616      	mov	r6, r2
 8005aa2:	4699      	mov	r9, r3
 8005aa4:	688a      	ldr	r2, [r1, #8]
 8005aa6:	690b      	ldr	r3, [r1, #16]
 8005aa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005aac:	4293      	cmp	r3, r2
 8005aae:	bfb8      	it	lt
 8005ab0:	4613      	movlt	r3, r2
 8005ab2:	6033      	str	r3, [r6, #0]
 8005ab4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ab8:	4607      	mov	r7, r0
 8005aba:	460c      	mov	r4, r1
 8005abc:	b10a      	cbz	r2, 8005ac2 <_printf_common+0x26>
 8005abe:	3301      	adds	r3, #1
 8005ac0:	6033      	str	r3, [r6, #0]
 8005ac2:	6823      	ldr	r3, [r4, #0]
 8005ac4:	0699      	lsls	r1, r3, #26
 8005ac6:	bf42      	ittt	mi
 8005ac8:	6833      	ldrmi	r3, [r6, #0]
 8005aca:	3302      	addmi	r3, #2
 8005acc:	6033      	strmi	r3, [r6, #0]
 8005ace:	6825      	ldr	r5, [r4, #0]
 8005ad0:	f015 0506 	ands.w	r5, r5, #6
 8005ad4:	d106      	bne.n	8005ae4 <_printf_common+0x48>
 8005ad6:	f104 0a19 	add.w	sl, r4, #25
 8005ada:	68e3      	ldr	r3, [r4, #12]
 8005adc:	6832      	ldr	r2, [r6, #0]
 8005ade:	1a9b      	subs	r3, r3, r2
 8005ae0:	42ab      	cmp	r3, r5
 8005ae2:	dc26      	bgt.n	8005b32 <_printf_common+0x96>
 8005ae4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ae8:	1e13      	subs	r3, r2, #0
 8005aea:	6822      	ldr	r2, [r4, #0]
 8005aec:	bf18      	it	ne
 8005aee:	2301      	movne	r3, #1
 8005af0:	0692      	lsls	r2, r2, #26
 8005af2:	d42b      	bmi.n	8005b4c <_printf_common+0xb0>
 8005af4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005af8:	4649      	mov	r1, r9
 8005afa:	4638      	mov	r0, r7
 8005afc:	47c0      	blx	r8
 8005afe:	3001      	adds	r0, #1
 8005b00:	d01e      	beq.n	8005b40 <_printf_common+0xa4>
 8005b02:	6823      	ldr	r3, [r4, #0]
 8005b04:	68e5      	ldr	r5, [r4, #12]
 8005b06:	6832      	ldr	r2, [r6, #0]
 8005b08:	f003 0306 	and.w	r3, r3, #6
 8005b0c:	2b04      	cmp	r3, #4
 8005b0e:	bf08      	it	eq
 8005b10:	1aad      	subeq	r5, r5, r2
 8005b12:	68a3      	ldr	r3, [r4, #8]
 8005b14:	6922      	ldr	r2, [r4, #16]
 8005b16:	bf0c      	ite	eq
 8005b18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b1c:	2500      	movne	r5, #0
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	bfc4      	itt	gt
 8005b22:	1a9b      	subgt	r3, r3, r2
 8005b24:	18ed      	addgt	r5, r5, r3
 8005b26:	2600      	movs	r6, #0
 8005b28:	341a      	adds	r4, #26
 8005b2a:	42b5      	cmp	r5, r6
 8005b2c:	d11a      	bne.n	8005b64 <_printf_common+0xc8>
 8005b2e:	2000      	movs	r0, #0
 8005b30:	e008      	b.n	8005b44 <_printf_common+0xa8>
 8005b32:	2301      	movs	r3, #1
 8005b34:	4652      	mov	r2, sl
 8005b36:	4649      	mov	r1, r9
 8005b38:	4638      	mov	r0, r7
 8005b3a:	47c0      	blx	r8
 8005b3c:	3001      	adds	r0, #1
 8005b3e:	d103      	bne.n	8005b48 <_printf_common+0xac>
 8005b40:	f04f 30ff 	mov.w	r0, #4294967295
 8005b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b48:	3501      	adds	r5, #1
 8005b4a:	e7c6      	b.n	8005ada <_printf_common+0x3e>
 8005b4c:	18e1      	adds	r1, r4, r3
 8005b4e:	1c5a      	adds	r2, r3, #1
 8005b50:	2030      	movs	r0, #48	; 0x30
 8005b52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b56:	4422      	add	r2, r4
 8005b58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b60:	3302      	adds	r3, #2
 8005b62:	e7c7      	b.n	8005af4 <_printf_common+0x58>
 8005b64:	2301      	movs	r3, #1
 8005b66:	4622      	mov	r2, r4
 8005b68:	4649      	mov	r1, r9
 8005b6a:	4638      	mov	r0, r7
 8005b6c:	47c0      	blx	r8
 8005b6e:	3001      	adds	r0, #1
 8005b70:	d0e6      	beq.n	8005b40 <_printf_common+0xa4>
 8005b72:	3601      	adds	r6, #1
 8005b74:	e7d9      	b.n	8005b2a <_printf_common+0x8e>
	...

08005b78 <_printf_i>:
 8005b78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b7c:	7e0f      	ldrb	r7, [r1, #24]
 8005b7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b80:	2f78      	cmp	r7, #120	; 0x78
 8005b82:	4691      	mov	r9, r2
 8005b84:	4680      	mov	r8, r0
 8005b86:	460c      	mov	r4, r1
 8005b88:	469a      	mov	sl, r3
 8005b8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b8e:	d807      	bhi.n	8005ba0 <_printf_i+0x28>
 8005b90:	2f62      	cmp	r7, #98	; 0x62
 8005b92:	d80a      	bhi.n	8005baa <_printf_i+0x32>
 8005b94:	2f00      	cmp	r7, #0
 8005b96:	f000 80d8 	beq.w	8005d4a <_printf_i+0x1d2>
 8005b9a:	2f58      	cmp	r7, #88	; 0x58
 8005b9c:	f000 80a3 	beq.w	8005ce6 <_printf_i+0x16e>
 8005ba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ba4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ba8:	e03a      	b.n	8005c20 <_printf_i+0xa8>
 8005baa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005bae:	2b15      	cmp	r3, #21
 8005bb0:	d8f6      	bhi.n	8005ba0 <_printf_i+0x28>
 8005bb2:	a101      	add	r1, pc, #4	; (adr r1, 8005bb8 <_printf_i+0x40>)
 8005bb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bb8:	08005c11 	.word	0x08005c11
 8005bbc:	08005c25 	.word	0x08005c25
 8005bc0:	08005ba1 	.word	0x08005ba1
 8005bc4:	08005ba1 	.word	0x08005ba1
 8005bc8:	08005ba1 	.word	0x08005ba1
 8005bcc:	08005ba1 	.word	0x08005ba1
 8005bd0:	08005c25 	.word	0x08005c25
 8005bd4:	08005ba1 	.word	0x08005ba1
 8005bd8:	08005ba1 	.word	0x08005ba1
 8005bdc:	08005ba1 	.word	0x08005ba1
 8005be0:	08005ba1 	.word	0x08005ba1
 8005be4:	08005d31 	.word	0x08005d31
 8005be8:	08005c55 	.word	0x08005c55
 8005bec:	08005d13 	.word	0x08005d13
 8005bf0:	08005ba1 	.word	0x08005ba1
 8005bf4:	08005ba1 	.word	0x08005ba1
 8005bf8:	08005d53 	.word	0x08005d53
 8005bfc:	08005ba1 	.word	0x08005ba1
 8005c00:	08005c55 	.word	0x08005c55
 8005c04:	08005ba1 	.word	0x08005ba1
 8005c08:	08005ba1 	.word	0x08005ba1
 8005c0c:	08005d1b 	.word	0x08005d1b
 8005c10:	682b      	ldr	r3, [r5, #0]
 8005c12:	1d1a      	adds	r2, r3, #4
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	602a      	str	r2, [r5, #0]
 8005c18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c20:	2301      	movs	r3, #1
 8005c22:	e0a3      	b.n	8005d6c <_printf_i+0x1f4>
 8005c24:	6820      	ldr	r0, [r4, #0]
 8005c26:	6829      	ldr	r1, [r5, #0]
 8005c28:	0606      	lsls	r6, r0, #24
 8005c2a:	f101 0304 	add.w	r3, r1, #4
 8005c2e:	d50a      	bpl.n	8005c46 <_printf_i+0xce>
 8005c30:	680e      	ldr	r6, [r1, #0]
 8005c32:	602b      	str	r3, [r5, #0]
 8005c34:	2e00      	cmp	r6, #0
 8005c36:	da03      	bge.n	8005c40 <_printf_i+0xc8>
 8005c38:	232d      	movs	r3, #45	; 0x2d
 8005c3a:	4276      	negs	r6, r6
 8005c3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c40:	485e      	ldr	r0, [pc, #376]	; (8005dbc <_printf_i+0x244>)
 8005c42:	230a      	movs	r3, #10
 8005c44:	e019      	b.n	8005c7a <_printf_i+0x102>
 8005c46:	680e      	ldr	r6, [r1, #0]
 8005c48:	602b      	str	r3, [r5, #0]
 8005c4a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c4e:	bf18      	it	ne
 8005c50:	b236      	sxthne	r6, r6
 8005c52:	e7ef      	b.n	8005c34 <_printf_i+0xbc>
 8005c54:	682b      	ldr	r3, [r5, #0]
 8005c56:	6820      	ldr	r0, [r4, #0]
 8005c58:	1d19      	adds	r1, r3, #4
 8005c5a:	6029      	str	r1, [r5, #0]
 8005c5c:	0601      	lsls	r1, r0, #24
 8005c5e:	d501      	bpl.n	8005c64 <_printf_i+0xec>
 8005c60:	681e      	ldr	r6, [r3, #0]
 8005c62:	e002      	b.n	8005c6a <_printf_i+0xf2>
 8005c64:	0646      	lsls	r6, r0, #25
 8005c66:	d5fb      	bpl.n	8005c60 <_printf_i+0xe8>
 8005c68:	881e      	ldrh	r6, [r3, #0]
 8005c6a:	4854      	ldr	r0, [pc, #336]	; (8005dbc <_printf_i+0x244>)
 8005c6c:	2f6f      	cmp	r7, #111	; 0x6f
 8005c6e:	bf0c      	ite	eq
 8005c70:	2308      	moveq	r3, #8
 8005c72:	230a      	movne	r3, #10
 8005c74:	2100      	movs	r1, #0
 8005c76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c7a:	6865      	ldr	r5, [r4, #4]
 8005c7c:	60a5      	str	r5, [r4, #8]
 8005c7e:	2d00      	cmp	r5, #0
 8005c80:	bfa2      	ittt	ge
 8005c82:	6821      	ldrge	r1, [r4, #0]
 8005c84:	f021 0104 	bicge.w	r1, r1, #4
 8005c88:	6021      	strge	r1, [r4, #0]
 8005c8a:	b90e      	cbnz	r6, 8005c90 <_printf_i+0x118>
 8005c8c:	2d00      	cmp	r5, #0
 8005c8e:	d04d      	beq.n	8005d2c <_printf_i+0x1b4>
 8005c90:	4615      	mov	r5, r2
 8005c92:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c96:	fb03 6711 	mls	r7, r3, r1, r6
 8005c9a:	5dc7      	ldrb	r7, [r0, r7]
 8005c9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ca0:	4637      	mov	r7, r6
 8005ca2:	42bb      	cmp	r3, r7
 8005ca4:	460e      	mov	r6, r1
 8005ca6:	d9f4      	bls.n	8005c92 <_printf_i+0x11a>
 8005ca8:	2b08      	cmp	r3, #8
 8005caa:	d10b      	bne.n	8005cc4 <_printf_i+0x14c>
 8005cac:	6823      	ldr	r3, [r4, #0]
 8005cae:	07de      	lsls	r6, r3, #31
 8005cb0:	d508      	bpl.n	8005cc4 <_printf_i+0x14c>
 8005cb2:	6923      	ldr	r3, [r4, #16]
 8005cb4:	6861      	ldr	r1, [r4, #4]
 8005cb6:	4299      	cmp	r1, r3
 8005cb8:	bfde      	ittt	le
 8005cba:	2330      	movle	r3, #48	; 0x30
 8005cbc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005cc0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005cc4:	1b52      	subs	r2, r2, r5
 8005cc6:	6122      	str	r2, [r4, #16]
 8005cc8:	f8cd a000 	str.w	sl, [sp]
 8005ccc:	464b      	mov	r3, r9
 8005cce:	aa03      	add	r2, sp, #12
 8005cd0:	4621      	mov	r1, r4
 8005cd2:	4640      	mov	r0, r8
 8005cd4:	f7ff fee2 	bl	8005a9c <_printf_common>
 8005cd8:	3001      	adds	r0, #1
 8005cda:	d14c      	bne.n	8005d76 <_printf_i+0x1fe>
 8005cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ce0:	b004      	add	sp, #16
 8005ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ce6:	4835      	ldr	r0, [pc, #212]	; (8005dbc <_printf_i+0x244>)
 8005ce8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005cec:	6829      	ldr	r1, [r5, #0]
 8005cee:	6823      	ldr	r3, [r4, #0]
 8005cf0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005cf4:	6029      	str	r1, [r5, #0]
 8005cf6:	061d      	lsls	r5, r3, #24
 8005cf8:	d514      	bpl.n	8005d24 <_printf_i+0x1ac>
 8005cfa:	07df      	lsls	r7, r3, #31
 8005cfc:	bf44      	itt	mi
 8005cfe:	f043 0320 	orrmi.w	r3, r3, #32
 8005d02:	6023      	strmi	r3, [r4, #0]
 8005d04:	b91e      	cbnz	r6, 8005d0e <_printf_i+0x196>
 8005d06:	6823      	ldr	r3, [r4, #0]
 8005d08:	f023 0320 	bic.w	r3, r3, #32
 8005d0c:	6023      	str	r3, [r4, #0]
 8005d0e:	2310      	movs	r3, #16
 8005d10:	e7b0      	b.n	8005c74 <_printf_i+0xfc>
 8005d12:	6823      	ldr	r3, [r4, #0]
 8005d14:	f043 0320 	orr.w	r3, r3, #32
 8005d18:	6023      	str	r3, [r4, #0]
 8005d1a:	2378      	movs	r3, #120	; 0x78
 8005d1c:	4828      	ldr	r0, [pc, #160]	; (8005dc0 <_printf_i+0x248>)
 8005d1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d22:	e7e3      	b.n	8005cec <_printf_i+0x174>
 8005d24:	0659      	lsls	r1, r3, #25
 8005d26:	bf48      	it	mi
 8005d28:	b2b6      	uxthmi	r6, r6
 8005d2a:	e7e6      	b.n	8005cfa <_printf_i+0x182>
 8005d2c:	4615      	mov	r5, r2
 8005d2e:	e7bb      	b.n	8005ca8 <_printf_i+0x130>
 8005d30:	682b      	ldr	r3, [r5, #0]
 8005d32:	6826      	ldr	r6, [r4, #0]
 8005d34:	6961      	ldr	r1, [r4, #20]
 8005d36:	1d18      	adds	r0, r3, #4
 8005d38:	6028      	str	r0, [r5, #0]
 8005d3a:	0635      	lsls	r5, r6, #24
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	d501      	bpl.n	8005d44 <_printf_i+0x1cc>
 8005d40:	6019      	str	r1, [r3, #0]
 8005d42:	e002      	b.n	8005d4a <_printf_i+0x1d2>
 8005d44:	0670      	lsls	r0, r6, #25
 8005d46:	d5fb      	bpl.n	8005d40 <_printf_i+0x1c8>
 8005d48:	8019      	strh	r1, [r3, #0]
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	6123      	str	r3, [r4, #16]
 8005d4e:	4615      	mov	r5, r2
 8005d50:	e7ba      	b.n	8005cc8 <_printf_i+0x150>
 8005d52:	682b      	ldr	r3, [r5, #0]
 8005d54:	1d1a      	adds	r2, r3, #4
 8005d56:	602a      	str	r2, [r5, #0]
 8005d58:	681d      	ldr	r5, [r3, #0]
 8005d5a:	6862      	ldr	r2, [r4, #4]
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	4628      	mov	r0, r5
 8005d60:	f7fa fa86 	bl	8000270 <memchr>
 8005d64:	b108      	cbz	r0, 8005d6a <_printf_i+0x1f2>
 8005d66:	1b40      	subs	r0, r0, r5
 8005d68:	6060      	str	r0, [r4, #4]
 8005d6a:	6863      	ldr	r3, [r4, #4]
 8005d6c:	6123      	str	r3, [r4, #16]
 8005d6e:	2300      	movs	r3, #0
 8005d70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d74:	e7a8      	b.n	8005cc8 <_printf_i+0x150>
 8005d76:	6923      	ldr	r3, [r4, #16]
 8005d78:	462a      	mov	r2, r5
 8005d7a:	4649      	mov	r1, r9
 8005d7c:	4640      	mov	r0, r8
 8005d7e:	47d0      	blx	sl
 8005d80:	3001      	adds	r0, #1
 8005d82:	d0ab      	beq.n	8005cdc <_printf_i+0x164>
 8005d84:	6823      	ldr	r3, [r4, #0]
 8005d86:	079b      	lsls	r3, r3, #30
 8005d88:	d413      	bmi.n	8005db2 <_printf_i+0x23a>
 8005d8a:	68e0      	ldr	r0, [r4, #12]
 8005d8c:	9b03      	ldr	r3, [sp, #12]
 8005d8e:	4298      	cmp	r0, r3
 8005d90:	bfb8      	it	lt
 8005d92:	4618      	movlt	r0, r3
 8005d94:	e7a4      	b.n	8005ce0 <_printf_i+0x168>
 8005d96:	2301      	movs	r3, #1
 8005d98:	4632      	mov	r2, r6
 8005d9a:	4649      	mov	r1, r9
 8005d9c:	4640      	mov	r0, r8
 8005d9e:	47d0      	blx	sl
 8005da0:	3001      	adds	r0, #1
 8005da2:	d09b      	beq.n	8005cdc <_printf_i+0x164>
 8005da4:	3501      	adds	r5, #1
 8005da6:	68e3      	ldr	r3, [r4, #12]
 8005da8:	9903      	ldr	r1, [sp, #12]
 8005daa:	1a5b      	subs	r3, r3, r1
 8005dac:	42ab      	cmp	r3, r5
 8005dae:	dcf2      	bgt.n	8005d96 <_printf_i+0x21e>
 8005db0:	e7eb      	b.n	8005d8a <_printf_i+0x212>
 8005db2:	2500      	movs	r5, #0
 8005db4:	f104 0619 	add.w	r6, r4, #25
 8005db8:	e7f5      	b.n	8005da6 <_printf_i+0x22e>
 8005dba:	bf00      	nop
 8005dbc:	080062c1 	.word	0x080062c1
 8005dc0:	080062d2 	.word	0x080062d2

08005dc4 <__sread>:
 8005dc4:	b510      	push	{r4, lr}
 8005dc6:	460c      	mov	r4, r1
 8005dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dcc:	f000 f95c 	bl	8006088 <_read_r>
 8005dd0:	2800      	cmp	r0, #0
 8005dd2:	bfab      	itete	ge
 8005dd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005dd6:	89a3      	ldrhlt	r3, [r4, #12]
 8005dd8:	181b      	addge	r3, r3, r0
 8005dda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005dde:	bfac      	ite	ge
 8005de0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005de2:	81a3      	strhlt	r3, [r4, #12]
 8005de4:	bd10      	pop	{r4, pc}

08005de6 <__swrite>:
 8005de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dea:	461f      	mov	r7, r3
 8005dec:	898b      	ldrh	r3, [r1, #12]
 8005dee:	05db      	lsls	r3, r3, #23
 8005df0:	4605      	mov	r5, r0
 8005df2:	460c      	mov	r4, r1
 8005df4:	4616      	mov	r6, r2
 8005df6:	d505      	bpl.n	8005e04 <__swrite+0x1e>
 8005df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f000 f930 	bl	8006064 <_lseek_r>
 8005e04:	89a3      	ldrh	r3, [r4, #12]
 8005e06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e0e:	81a3      	strh	r3, [r4, #12]
 8005e10:	4632      	mov	r2, r6
 8005e12:	463b      	mov	r3, r7
 8005e14:	4628      	mov	r0, r5
 8005e16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e1a:	f000 b869 	b.w	8005ef0 <_write_r>

08005e1e <__sseek>:
 8005e1e:	b510      	push	{r4, lr}
 8005e20:	460c      	mov	r4, r1
 8005e22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e26:	f000 f91d 	bl	8006064 <_lseek_r>
 8005e2a:	1c43      	adds	r3, r0, #1
 8005e2c:	89a3      	ldrh	r3, [r4, #12]
 8005e2e:	bf15      	itete	ne
 8005e30:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e3a:	81a3      	strheq	r3, [r4, #12]
 8005e3c:	bf18      	it	ne
 8005e3e:	81a3      	strhne	r3, [r4, #12]
 8005e40:	bd10      	pop	{r4, pc}

08005e42 <__sclose>:
 8005e42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e46:	f000 b8db 	b.w	8006000 <_close_r>
	...

08005e4c <__swbuf_r>:
 8005e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e4e:	460e      	mov	r6, r1
 8005e50:	4614      	mov	r4, r2
 8005e52:	4605      	mov	r5, r0
 8005e54:	b118      	cbz	r0, 8005e5e <__swbuf_r+0x12>
 8005e56:	6983      	ldr	r3, [r0, #24]
 8005e58:	b90b      	cbnz	r3, 8005e5e <__swbuf_r+0x12>
 8005e5a:	f7ff fba1 	bl	80055a0 <__sinit>
 8005e5e:	4b21      	ldr	r3, [pc, #132]	; (8005ee4 <__swbuf_r+0x98>)
 8005e60:	429c      	cmp	r4, r3
 8005e62:	d12b      	bne.n	8005ebc <__swbuf_r+0x70>
 8005e64:	686c      	ldr	r4, [r5, #4]
 8005e66:	69a3      	ldr	r3, [r4, #24]
 8005e68:	60a3      	str	r3, [r4, #8]
 8005e6a:	89a3      	ldrh	r3, [r4, #12]
 8005e6c:	071a      	lsls	r2, r3, #28
 8005e6e:	d52f      	bpl.n	8005ed0 <__swbuf_r+0x84>
 8005e70:	6923      	ldr	r3, [r4, #16]
 8005e72:	b36b      	cbz	r3, 8005ed0 <__swbuf_r+0x84>
 8005e74:	6923      	ldr	r3, [r4, #16]
 8005e76:	6820      	ldr	r0, [r4, #0]
 8005e78:	1ac0      	subs	r0, r0, r3
 8005e7a:	6963      	ldr	r3, [r4, #20]
 8005e7c:	b2f6      	uxtb	r6, r6
 8005e7e:	4283      	cmp	r3, r0
 8005e80:	4637      	mov	r7, r6
 8005e82:	dc04      	bgt.n	8005e8e <__swbuf_r+0x42>
 8005e84:	4621      	mov	r1, r4
 8005e86:	4628      	mov	r0, r5
 8005e88:	f7ff faf6 	bl	8005478 <_fflush_r>
 8005e8c:	bb30      	cbnz	r0, 8005edc <__swbuf_r+0x90>
 8005e8e:	68a3      	ldr	r3, [r4, #8]
 8005e90:	3b01      	subs	r3, #1
 8005e92:	60a3      	str	r3, [r4, #8]
 8005e94:	6823      	ldr	r3, [r4, #0]
 8005e96:	1c5a      	adds	r2, r3, #1
 8005e98:	6022      	str	r2, [r4, #0]
 8005e9a:	701e      	strb	r6, [r3, #0]
 8005e9c:	6963      	ldr	r3, [r4, #20]
 8005e9e:	3001      	adds	r0, #1
 8005ea0:	4283      	cmp	r3, r0
 8005ea2:	d004      	beq.n	8005eae <__swbuf_r+0x62>
 8005ea4:	89a3      	ldrh	r3, [r4, #12]
 8005ea6:	07db      	lsls	r3, r3, #31
 8005ea8:	d506      	bpl.n	8005eb8 <__swbuf_r+0x6c>
 8005eaa:	2e0a      	cmp	r6, #10
 8005eac:	d104      	bne.n	8005eb8 <__swbuf_r+0x6c>
 8005eae:	4621      	mov	r1, r4
 8005eb0:	4628      	mov	r0, r5
 8005eb2:	f7ff fae1 	bl	8005478 <_fflush_r>
 8005eb6:	b988      	cbnz	r0, 8005edc <__swbuf_r+0x90>
 8005eb8:	4638      	mov	r0, r7
 8005eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ebc:	4b0a      	ldr	r3, [pc, #40]	; (8005ee8 <__swbuf_r+0x9c>)
 8005ebe:	429c      	cmp	r4, r3
 8005ec0:	d101      	bne.n	8005ec6 <__swbuf_r+0x7a>
 8005ec2:	68ac      	ldr	r4, [r5, #8]
 8005ec4:	e7cf      	b.n	8005e66 <__swbuf_r+0x1a>
 8005ec6:	4b09      	ldr	r3, [pc, #36]	; (8005eec <__swbuf_r+0xa0>)
 8005ec8:	429c      	cmp	r4, r3
 8005eca:	bf08      	it	eq
 8005ecc:	68ec      	ldreq	r4, [r5, #12]
 8005ece:	e7ca      	b.n	8005e66 <__swbuf_r+0x1a>
 8005ed0:	4621      	mov	r1, r4
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	f000 f81e 	bl	8005f14 <__swsetup_r>
 8005ed8:	2800      	cmp	r0, #0
 8005eda:	d0cb      	beq.n	8005e74 <__swbuf_r+0x28>
 8005edc:	f04f 37ff 	mov.w	r7, #4294967295
 8005ee0:	e7ea      	b.n	8005eb8 <__swbuf_r+0x6c>
 8005ee2:	bf00      	nop
 8005ee4:	08006270 	.word	0x08006270
 8005ee8:	08006290 	.word	0x08006290
 8005eec:	08006250 	.word	0x08006250

08005ef0 <_write_r>:
 8005ef0:	b538      	push	{r3, r4, r5, lr}
 8005ef2:	4d07      	ldr	r5, [pc, #28]	; (8005f10 <_write_r+0x20>)
 8005ef4:	4604      	mov	r4, r0
 8005ef6:	4608      	mov	r0, r1
 8005ef8:	4611      	mov	r1, r2
 8005efa:	2200      	movs	r2, #0
 8005efc:	602a      	str	r2, [r5, #0]
 8005efe:	461a      	mov	r2, r3
 8005f00:	f7fa ff53 	bl	8000daa <_write>
 8005f04:	1c43      	adds	r3, r0, #1
 8005f06:	d102      	bne.n	8005f0e <_write_r+0x1e>
 8005f08:	682b      	ldr	r3, [r5, #0]
 8005f0a:	b103      	cbz	r3, 8005f0e <_write_r+0x1e>
 8005f0c:	6023      	str	r3, [r4, #0]
 8005f0e:	bd38      	pop	{r3, r4, r5, pc}
 8005f10:	200005ac 	.word	0x200005ac

08005f14 <__swsetup_r>:
 8005f14:	4b32      	ldr	r3, [pc, #200]	; (8005fe0 <__swsetup_r+0xcc>)
 8005f16:	b570      	push	{r4, r5, r6, lr}
 8005f18:	681d      	ldr	r5, [r3, #0]
 8005f1a:	4606      	mov	r6, r0
 8005f1c:	460c      	mov	r4, r1
 8005f1e:	b125      	cbz	r5, 8005f2a <__swsetup_r+0x16>
 8005f20:	69ab      	ldr	r3, [r5, #24]
 8005f22:	b913      	cbnz	r3, 8005f2a <__swsetup_r+0x16>
 8005f24:	4628      	mov	r0, r5
 8005f26:	f7ff fb3b 	bl	80055a0 <__sinit>
 8005f2a:	4b2e      	ldr	r3, [pc, #184]	; (8005fe4 <__swsetup_r+0xd0>)
 8005f2c:	429c      	cmp	r4, r3
 8005f2e:	d10f      	bne.n	8005f50 <__swsetup_r+0x3c>
 8005f30:	686c      	ldr	r4, [r5, #4]
 8005f32:	89a3      	ldrh	r3, [r4, #12]
 8005f34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f38:	0719      	lsls	r1, r3, #28
 8005f3a:	d42c      	bmi.n	8005f96 <__swsetup_r+0x82>
 8005f3c:	06dd      	lsls	r5, r3, #27
 8005f3e:	d411      	bmi.n	8005f64 <__swsetup_r+0x50>
 8005f40:	2309      	movs	r3, #9
 8005f42:	6033      	str	r3, [r6, #0]
 8005f44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f48:	81a3      	strh	r3, [r4, #12]
 8005f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f4e:	e03e      	b.n	8005fce <__swsetup_r+0xba>
 8005f50:	4b25      	ldr	r3, [pc, #148]	; (8005fe8 <__swsetup_r+0xd4>)
 8005f52:	429c      	cmp	r4, r3
 8005f54:	d101      	bne.n	8005f5a <__swsetup_r+0x46>
 8005f56:	68ac      	ldr	r4, [r5, #8]
 8005f58:	e7eb      	b.n	8005f32 <__swsetup_r+0x1e>
 8005f5a:	4b24      	ldr	r3, [pc, #144]	; (8005fec <__swsetup_r+0xd8>)
 8005f5c:	429c      	cmp	r4, r3
 8005f5e:	bf08      	it	eq
 8005f60:	68ec      	ldreq	r4, [r5, #12]
 8005f62:	e7e6      	b.n	8005f32 <__swsetup_r+0x1e>
 8005f64:	0758      	lsls	r0, r3, #29
 8005f66:	d512      	bpl.n	8005f8e <__swsetup_r+0x7a>
 8005f68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f6a:	b141      	cbz	r1, 8005f7e <__swsetup_r+0x6a>
 8005f6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f70:	4299      	cmp	r1, r3
 8005f72:	d002      	beq.n	8005f7a <__swsetup_r+0x66>
 8005f74:	4630      	mov	r0, r6
 8005f76:	f7fe ffc1 	bl	8004efc <_free_r>
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	6363      	str	r3, [r4, #52]	; 0x34
 8005f7e:	89a3      	ldrh	r3, [r4, #12]
 8005f80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005f84:	81a3      	strh	r3, [r4, #12]
 8005f86:	2300      	movs	r3, #0
 8005f88:	6063      	str	r3, [r4, #4]
 8005f8a:	6923      	ldr	r3, [r4, #16]
 8005f8c:	6023      	str	r3, [r4, #0]
 8005f8e:	89a3      	ldrh	r3, [r4, #12]
 8005f90:	f043 0308 	orr.w	r3, r3, #8
 8005f94:	81a3      	strh	r3, [r4, #12]
 8005f96:	6923      	ldr	r3, [r4, #16]
 8005f98:	b94b      	cbnz	r3, 8005fae <__swsetup_r+0x9a>
 8005f9a:	89a3      	ldrh	r3, [r4, #12]
 8005f9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005fa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fa4:	d003      	beq.n	8005fae <__swsetup_r+0x9a>
 8005fa6:	4621      	mov	r1, r4
 8005fa8:	4630      	mov	r0, r6
 8005faa:	f7ff fbd1 	bl	8005750 <__smakebuf_r>
 8005fae:	89a0      	ldrh	r0, [r4, #12]
 8005fb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005fb4:	f010 0301 	ands.w	r3, r0, #1
 8005fb8:	d00a      	beq.n	8005fd0 <__swsetup_r+0xbc>
 8005fba:	2300      	movs	r3, #0
 8005fbc:	60a3      	str	r3, [r4, #8]
 8005fbe:	6963      	ldr	r3, [r4, #20]
 8005fc0:	425b      	negs	r3, r3
 8005fc2:	61a3      	str	r3, [r4, #24]
 8005fc4:	6923      	ldr	r3, [r4, #16]
 8005fc6:	b943      	cbnz	r3, 8005fda <__swsetup_r+0xc6>
 8005fc8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005fcc:	d1ba      	bne.n	8005f44 <__swsetup_r+0x30>
 8005fce:	bd70      	pop	{r4, r5, r6, pc}
 8005fd0:	0781      	lsls	r1, r0, #30
 8005fd2:	bf58      	it	pl
 8005fd4:	6963      	ldrpl	r3, [r4, #20]
 8005fd6:	60a3      	str	r3, [r4, #8]
 8005fd8:	e7f4      	b.n	8005fc4 <__swsetup_r+0xb0>
 8005fda:	2000      	movs	r0, #0
 8005fdc:	e7f7      	b.n	8005fce <__swsetup_r+0xba>
 8005fde:	bf00      	nop
 8005fe0:	20000010 	.word	0x20000010
 8005fe4:	08006270 	.word	0x08006270
 8005fe8:	08006290 	.word	0x08006290
 8005fec:	08006250 	.word	0x08006250

08005ff0 <abort>:
 8005ff0:	b508      	push	{r3, lr}
 8005ff2:	2006      	movs	r0, #6
 8005ff4:	f000 f882 	bl	80060fc <raise>
 8005ff8:	2001      	movs	r0, #1
 8005ffa:	f7fa feaf 	bl	8000d5c <_exit>
	...

08006000 <_close_r>:
 8006000:	b538      	push	{r3, r4, r5, lr}
 8006002:	4d06      	ldr	r5, [pc, #24]	; (800601c <_close_r+0x1c>)
 8006004:	2300      	movs	r3, #0
 8006006:	4604      	mov	r4, r0
 8006008:	4608      	mov	r0, r1
 800600a:	602b      	str	r3, [r5, #0]
 800600c:	f7fa fee9 	bl	8000de2 <_close>
 8006010:	1c43      	adds	r3, r0, #1
 8006012:	d102      	bne.n	800601a <_close_r+0x1a>
 8006014:	682b      	ldr	r3, [r5, #0]
 8006016:	b103      	cbz	r3, 800601a <_close_r+0x1a>
 8006018:	6023      	str	r3, [r4, #0]
 800601a:	bd38      	pop	{r3, r4, r5, pc}
 800601c:	200005ac 	.word	0x200005ac

08006020 <_fstat_r>:
 8006020:	b538      	push	{r3, r4, r5, lr}
 8006022:	4d07      	ldr	r5, [pc, #28]	; (8006040 <_fstat_r+0x20>)
 8006024:	2300      	movs	r3, #0
 8006026:	4604      	mov	r4, r0
 8006028:	4608      	mov	r0, r1
 800602a:	4611      	mov	r1, r2
 800602c:	602b      	str	r3, [r5, #0]
 800602e:	f7fa fee4 	bl	8000dfa <_fstat>
 8006032:	1c43      	adds	r3, r0, #1
 8006034:	d102      	bne.n	800603c <_fstat_r+0x1c>
 8006036:	682b      	ldr	r3, [r5, #0]
 8006038:	b103      	cbz	r3, 800603c <_fstat_r+0x1c>
 800603a:	6023      	str	r3, [r4, #0]
 800603c:	bd38      	pop	{r3, r4, r5, pc}
 800603e:	bf00      	nop
 8006040:	200005ac 	.word	0x200005ac

08006044 <_isatty_r>:
 8006044:	b538      	push	{r3, r4, r5, lr}
 8006046:	4d06      	ldr	r5, [pc, #24]	; (8006060 <_isatty_r+0x1c>)
 8006048:	2300      	movs	r3, #0
 800604a:	4604      	mov	r4, r0
 800604c:	4608      	mov	r0, r1
 800604e:	602b      	str	r3, [r5, #0]
 8006050:	f7fa fee3 	bl	8000e1a <_isatty>
 8006054:	1c43      	adds	r3, r0, #1
 8006056:	d102      	bne.n	800605e <_isatty_r+0x1a>
 8006058:	682b      	ldr	r3, [r5, #0]
 800605a:	b103      	cbz	r3, 800605e <_isatty_r+0x1a>
 800605c:	6023      	str	r3, [r4, #0]
 800605e:	bd38      	pop	{r3, r4, r5, pc}
 8006060:	200005ac 	.word	0x200005ac

08006064 <_lseek_r>:
 8006064:	b538      	push	{r3, r4, r5, lr}
 8006066:	4d07      	ldr	r5, [pc, #28]	; (8006084 <_lseek_r+0x20>)
 8006068:	4604      	mov	r4, r0
 800606a:	4608      	mov	r0, r1
 800606c:	4611      	mov	r1, r2
 800606e:	2200      	movs	r2, #0
 8006070:	602a      	str	r2, [r5, #0]
 8006072:	461a      	mov	r2, r3
 8006074:	f7fa fedc 	bl	8000e30 <_lseek>
 8006078:	1c43      	adds	r3, r0, #1
 800607a:	d102      	bne.n	8006082 <_lseek_r+0x1e>
 800607c:	682b      	ldr	r3, [r5, #0]
 800607e:	b103      	cbz	r3, 8006082 <_lseek_r+0x1e>
 8006080:	6023      	str	r3, [r4, #0]
 8006082:	bd38      	pop	{r3, r4, r5, pc}
 8006084:	200005ac 	.word	0x200005ac

08006088 <_read_r>:
 8006088:	b538      	push	{r3, r4, r5, lr}
 800608a:	4d07      	ldr	r5, [pc, #28]	; (80060a8 <_read_r+0x20>)
 800608c:	4604      	mov	r4, r0
 800608e:	4608      	mov	r0, r1
 8006090:	4611      	mov	r1, r2
 8006092:	2200      	movs	r2, #0
 8006094:	602a      	str	r2, [r5, #0]
 8006096:	461a      	mov	r2, r3
 8006098:	f7fa fe6a 	bl	8000d70 <_read>
 800609c:	1c43      	adds	r3, r0, #1
 800609e:	d102      	bne.n	80060a6 <_read_r+0x1e>
 80060a0:	682b      	ldr	r3, [r5, #0]
 80060a2:	b103      	cbz	r3, 80060a6 <_read_r+0x1e>
 80060a4:	6023      	str	r3, [r4, #0]
 80060a6:	bd38      	pop	{r3, r4, r5, pc}
 80060a8:	200005ac 	.word	0x200005ac

080060ac <_raise_r>:
 80060ac:	291f      	cmp	r1, #31
 80060ae:	b538      	push	{r3, r4, r5, lr}
 80060b0:	4604      	mov	r4, r0
 80060b2:	460d      	mov	r5, r1
 80060b4:	d904      	bls.n	80060c0 <_raise_r+0x14>
 80060b6:	2316      	movs	r3, #22
 80060b8:	6003      	str	r3, [r0, #0]
 80060ba:	f04f 30ff 	mov.w	r0, #4294967295
 80060be:	bd38      	pop	{r3, r4, r5, pc}
 80060c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80060c2:	b112      	cbz	r2, 80060ca <_raise_r+0x1e>
 80060c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80060c8:	b94b      	cbnz	r3, 80060de <_raise_r+0x32>
 80060ca:	4620      	mov	r0, r4
 80060cc:	f000 f830 	bl	8006130 <_getpid_r>
 80060d0:	462a      	mov	r2, r5
 80060d2:	4601      	mov	r1, r0
 80060d4:	4620      	mov	r0, r4
 80060d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060da:	f000 b817 	b.w	800610c <_kill_r>
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d00a      	beq.n	80060f8 <_raise_r+0x4c>
 80060e2:	1c59      	adds	r1, r3, #1
 80060e4:	d103      	bne.n	80060ee <_raise_r+0x42>
 80060e6:	2316      	movs	r3, #22
 80060e8:	6003      	str	r3, [r0, #0]
 80060ea:	2001      	movs	r0, #1
 80060ec:	e7e7      	b.n	80060be <_raise_r+0x12>
 80060ee:	2400      	movs	r4, #0
 80060f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80060f4:	4628      	mov	r0, r5
 80060f6:	4798      	blx	r3
 80060f8:	2000      	movs	r0, #0
 80060fa:	e7e0      	b.n	80060be <_raise_r+0x12>

080060fc <raise>:
 80060fc:	4b02      	ldr	r3, [pc, #8]	; (8006108 <raise+0xc>)
 80060fe:	4601      	mov	r1, r0
 8006100:	6818      	ldr	r0, [r3, #0]
 8006102:	f7ff bfd3 	b.w	80060ac <_raise_r>
 8006106:	bf00      	nop
 8006108:	20000010 	.word	0x20000010

0800610c <_kill_r>:
 800610c:	b538      	push	{r3, r4, r5, lr}
 800610e:	4d07      	ldr	r5, [pc, #28]	; (800612c <_kill_r+0x20>)
 8006110:	2300      	movs	r3, #0
 8006112:	4604      	mov	r4, r0
 8006114:	4608      	mov	r0, r1
 8006116:	4611      	mov	r1, r2
 8006118:	602b      	str	r3, [r5, #0]
 800611a:	f7fa fe0f 	bl	8000d3c <_kill>
 800611e:	1c43      	adds	r3, r0, #1
 8006120:	d102      	bne.n	8006128 <_kill_r+0x1c>
 8006122:	682b      	ldr	r3, [r5, #0]
 8006124:	b103      	cbz	r3, 8006128 <_kill_r+0x1c>
 8006126:	6023      	str	r3, [r4, #0]
 8006128:	bd38      	pop	{r3, r4, r5, pc}
 800612a:	bf00      	nop
 800612c:	200005ac 	.word	0x200005ac

08006130 <_getpid_r>:
 8006130:	f7fa bdfc 	b.w	8000d2c <_getpid>

08006134 <_init>:
 8006134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006136:	bf00      	nop
 8006138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800613a:	bc08      	pop	{r3}
 800613c:	469e      	mov	lr, r3
 800613e:	4770      	bx	lr

08006140 <_fini>:
 8006140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006142:	bf00      	nop
 8006144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006146:	bc08      	pop	{r3}
 8006148:	469e      	mov	lr, r3
 800614a:	4770      	bx	lr
