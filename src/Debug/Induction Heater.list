
Induction Heater.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fa4  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800619c  0800619c  0001619c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006234  08006234  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006234  08006234  00016234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800623c  0800623c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800623c  0800623c  0001623c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006240  08006240  00016240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000564  20000070  080062b4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005d4  080062b4  000205d4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013999  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b08  00000000  00000000  00033a37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  00036540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df8  00000000  00000000  00037460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029c46  00000000  00000000  00038258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d86  00000000  00000000  00061e9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd498  00000000  00000000  00075c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001730bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043cc  00000000  00000000  0017310c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000070 	.word	0x20000070
 8000214:	00000000 	.word	0x00000000
 8000218:	08006184 	.word	0x08006184

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000074 	.word	0x20000074
 8000234:	08006184 	.word	0x08006184

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b974 	b.w	8000548 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468e      	mov	lr, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14d      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000286:	428a      	cmp	r2, r1
 8000288:	4694      	mov	ip, r2
 800028a:	d969      	bls.n	8000360 <__udivmoddi4+0xe8>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b152      	cbz	r2, 80002a8 <__udivmoddi4+0x30>
 8000292:	fa01 f302 	lsl.w	r3, r1, r2
 8000296:	f1c2 0120 	rsb	r1, r2, #32
 800029a:	fa20 f101 	lsr.w	r1, r0, r1
 800029e:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a2:	ea41 0e03 	orr.w	lr, r1, r3
 80002a6:	4094      	lsls	r4, r2
 80002a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ac:	0c21      	lsrs	r1, r4, #16
 80002ae:	fbbe f6f8 	udiv	r6, lr, r8
 80002b2:	fa1f f78c 	uxth.w	r7, ip
 80002b6:	fb08 e316 	mls	r3, r8, r6, lr
 80002ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002be:	fb06 f107 	mul.w	r1, r6, r7
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ce:	f080 811f 	bcs.w	8000510 <__udivmoddi4+0x298>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 811c 	bls.w	8000510 <__udivmoddi4+0x298>
 80002d8:	3e02      	subs	r6, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a5b      	subs	r3, r3, r1
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e4:	fb08 3310 	mls	r3, r8, r0, r3
 80002e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ec:	fb00 f707 	mul.w	r7, r0, r7
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	d90a      	bls.n	800030a <__udivmoddi4+0x92>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fc:	f080 810a 	bcs.w	8000514 <__udivmoddi4+0x29c>
 8000300:	42a7      	cmp	r7, r4
 8000302:	f240 8107 	bls.w	8000514 <__udivmoddi4+0x29c>
 8000306:	4464      	add	r4, ip
 8000308:	3802      	subs	r0, #2
 800030a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030e:	1be4      	subs	r4, r4, r7
 8000310:	2600      	movs	r6, #0
 8000312:	b11d      	cbz	r5, 800031c <__udivmoddi4+0xa4>
 8000314:	40d4      	lsrs	r4, r2
 8000316:	2300      	movs	r3, #0
 8000318:	e9c5 4300 	strd	r4, r3, [r5]
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0xc2>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80ef 	beq.w	800050a <__udivmoddi4+0x292>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x160>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xd4>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80f9 	bhi.w	800053e <__udivmoddi4+0x2c6>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0303 	sbc.w	r3, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	469e      	mov	lr, r3
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0e0      	beq.n	800031c <__udivmoddi4+0xa4>
 800035a:	e9c5 4e00 	strd	r4, lr, [r5]
 800035e:	e7dd      	b.n	800031c <__udivmoddi4+0xa4>
 8000360:	b902      	cbnz	r2, 8000364 <__udivmoddi4+0xec>
 8000362:	deff      	udf	#255	; 0xff
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	2a00      	cmp	r2, #0
 800036a:	f040 8092 	bne.w	8000492 <__udivmoddi4+0x21a>
 800036e:	eba1 010c 	sub.w	r1, r1, ip
 8000372:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	2601      	movs	r6, #1
 800037c:	0c20      	lsrs	r0, r4, #16
 800037e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000382:	fb07 1113 	mls	r1, r7, r3, r1
 8000386:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038a:	fb0e f003 	mul.w	r0, lr, r3
 800038e:	4288      	cmp	r0, r1
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x12c>
 8000392:	eb1c 0101 	adds.w	r1, ip, r1
 8000396:	f103 38ff 	add.w	r8, r3, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x12a>
 800039c:	4288      	cmp	r0, r1
 800039e:	f200 80cb 	bhi.w	8000538 <__udivmoddi4+0x2c0>
 80003a2:	4643      	mov	r3, r8
 80003a4:	1a09      	subs	r1, r1, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ac:	fb07 1110 	mls	r1, r7, r0, r1
 80003b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003b4:	fb0e fe00 	mul.w	lr, lr, r0
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x156>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x154>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2ca>
 80003cc:	4608      	mov	r0, r1
 80003ce:	eba4 040e 	sub.w	r4, r4, lr
 80003d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d6:	e79c      	b.n	8000312 <__udivmoddi4+0x9a>
 80003d8:	f1c6 0720 	rsb	r7, r6, #32
 80003dc:	40b3      	lsls	r3, r6
 80003de:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	431c      	orrs	r4, r3
 80003f0:	40f9      	lsrs	r1, r7
 80003f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f6:	fa00 f306 	lsl.w	r3, r0, r6
 80003fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80003fe:	0c20      	lsrs	r0, r4, #16
 8000400:	fa1f fe8c 	uxth.w	lr, ip
 8000404:	fb09 1118 	mls	r1, r9, r8, r1
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	fb08 f00e 	mul.w	r0, r8, lr
 8000410:	4288      	cmp	r0, r1
 8000412:	fa02 f206 	lsl.w	r2, r2, r6
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b8>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000420:	f080 8088 	bcs.w	8000534 <__udivmoddi4+0x2bc>
 8000424:	4288      	cmp	r0, r1
 8000426:	f240 8085 	bls.w	8000534 <__udivmoddi4+0x2bc>
 800042a:	f1a8 0802 	sub.w	r8, r8, #2
 800042e:	4461      	add	r1, ip
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f9 	udiv	r0, r1, r9
 8000438:	fb09 1110 	mls	r1, r9, r0, r1
 800043c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	458e      	cmp	lr, r1
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1e2>
 8000448:	eb1c 0101 	adds.w	r1, ip, r1
 800044c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000450:	d26c      	bcs.n	800052c <__udivmoddi4+0x2b4>
 8000452:	458e      	cmp	lr, r1
 8000454:	d96a      	bls.n	800052c <__udivmoddi4+0x2b4>
 8000456:	3802      	subs	r0, #2
 8000458:	4461      	add	r1, ip
 800045a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800045e:	fba0 9402 	umull	r9, r4, r0, r2
 8000462:	eba1 010e 	sub.w	r1, r1, lr
 8000466:	42a1      	cmp	r1, r4
 8000468:	46c8      	mov	r8, r9
 800046a:	46a6      	mov	lr, r4
 800046c:	d356      	bcc.n	800051c <__udivmoddi4+0x2a4>
 800046e:	d053      	beq.n	8000518 <__udivmoddi4+0x2a0>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x212>
 8000472:	ebb3 0208 	subs.w	r2, r3, r8
 8000476:	eb61 010e 	sbc.w	r1, r1, lr
 800047a:	fa01 f707 	lsl.w	r7, r1, r7
 800047e:	fa22 f306 	lsr.w	r3, r2, r6
 8000482:	40f1      	lsrs	r1, r6
 8000484:	431f      	orrs	r7, r3
 8000486:	e9c5 7100 	strd	r7, r1, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	f1c2 0320 	rsb	r3, r2, #32
 8000496:	40d8      	lsrs	r0, r3
 8000498:	fa0c fc02 	lsl.w	ip, ip, r2
 800049c:	fa21 f303 	lsr.w	r3, r1, r3
 80004a0:	4091      	lsls	r1, r2
 80004a2:	4301      	orrs	r1, r0
 80004a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b0:	fb07 3610 	mls	r6, r7, r0, r3
 80004b4:	0c0b      	lsrs	r3, r1, #16
 80004b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ba:	fb00 f60e 	mul.w	r6, r0, lr
 80004be:	429e      	cmp	r6, r3
 80004c0:	fa04 f402 	lsl.w	r4, r4, r2
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x260>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	d22f      	bcs.n	8000530 <__udivmoddi4+0x2b8>
 80004d0:	429e      	cmp	r6, r3
 80004d2:	d92d      	bls.n	8000530 <__udivmoddi4+0x2b8>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	1b9b      	subs	r3, r3, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e0:	fb07 3316 	mls	r3, r7, r6, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x28a>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d216      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d914      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004fe:	3e02      	subs	r6, #2
 8000500:	4461      	add	r1, ip
 8000502:	1ac9      	subs	r1, r1, r3
 8000504:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000508:	e738      	b.n	800037c <__udivmoddi4+0x104>
 800050a:	462e      	mov	r6, r5
 800050c:	4628      	mov	r0, r5
 800050e:	e705      	b.n	800031c <__udivmoddi4+0xa4>
 8000510:	4606      	mov	r6, r0
 8000512:	e6e3      	b.n	80002dc <__udivmoddi4+0x64>
 8000514:	4618      	mov	r0, r3
 8000516:	e6f8      	b.n	800030a <__udivmoddi4+0x92>
 8000518:	454b      	cmp	r3, r9
 800051a:	d2a9      	bcs.n	8000470 <__udivmoddi4+0x1f8>
 800051c:	ebb9 0802 	subs.w	r8, r9, r2
 8000520:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000524:	3801      	subs	r0, #1
 8000526:	e7a3      	b.n	8000470 <__udivmoddi4+0x1f8>
 8000528:	4646      	mov	r6, r8
 800052a:	e7ea      	b.n	8000502 <__udivmoddi4+0x28a>
 800052c:	4620      	mov	r0, r4
 800052e:	e794      	b.n	800045a <__udivmoddi4+0x1e2>
 8000530:	4640      	mov	r0, r8
 8000532:	e7d1      	b.n	80004d8 <__udivmoddi4+0x260>
 8000534:	46d0      	mov	r8, sl
 8000536:	e77b      	b.n	8000430 <__udivmoddi4+0x1b8>
 8000538:	3b02      	subs	r3, #2
 800053a:	4461      	add	r1, ip
 800053c:	e732      	b.n	80003a4 <__udivmoddi4+0x12c>
 800053e:	4630      	mov	r0, r6
 8000540:	e709      	b.n	8000356 <__udivmoddi4+0xde>
 8000542:	4464      	add	r4, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x156>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <_push_message>:
 	if(tx_flag){
 		start_tx();
 		tx_flag = FALSE;
 	}
}
void _push_message(char *message){
 800054c:	b590      	push	{r4, r7, lr}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]

	char *aux_ptr;
	uint8_t i = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	72fb      	strb	r3, [r7, #11]
	aux_ptr = message;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	60fb      	str	r3, [r7, #12]

	for (i=0; i<strlen(message); i++){
 800055c:	2300      	movs	r3, #0
 800055e:	72fb      	strb	r3, [r7, #11]
 8000560:	e015      	b.n	800058e <_push_message+0x42>

		 tx_buffer[w_tx_bindex&(FIFO_LEN-1)] = *aux_ptr;
 8000562:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <_push_message+0x5c>)
 8000564:	881b      	ldrh	r3, [r3, #0]
 8000566:	b29b      	uxth	r3, r3
 8000568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800056c:	68fa      	ldr	r2, [r7, #12]
 800056e:	7811      	ldrb	r1, [r2, #0]
 8000570:	4a0e      	ldr	r2, [pc, #56]	; (80005ac <_push_message+0x60>)
 8000572:	54d1      	strb	r1, [r2, r3]
		  aux_ptr++;
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	3301      	adds	r3, #1
 8000578:	60fb      	str	r3, [r7, #12]
		  w_tx_bindex++;
 800057a:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <_push_message+0x5c>)
 800057c:	881b      	ldrh	r3, [r3, #0]
 800057e:	b29b      	uxth	r3, r3
 8000580:	3301      	adds	r3, #1
 8000582:	b29a      	uxth	r2, r3
 8000584:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <_push_message+0x5c>)
 8000586:	801a      	strh	r2, [r3, #0]
	for (i=0; i<strlen(message); i++){
 8000588:	7afb      	ldrb	r3, [r7, #11]
 800058a:	3301      	adds	r3, #1
 800058c:	72fb      	strb	r3, [r7, #11]
 800058e:	7afc      	ldrb	r4, [r7, #11]
 8000590:	6878      	ldr	r0, [r7, #4]
 8000592:	f7ff fe51 	bl	8000238 <strlen>
 8000596:	4603      	mov	r3, r0
 8000598:	429c      	cmp	r4, r3
 800059a:	d3e2      	bcc.n	8000562 <_push_message+0x16>
	}
}
 800059c:	bf00      	nop
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd90      	pop	{r4, r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000498 	.word	0x20000498
 80005ac:	20000290 	.word	0x20000290

080005b0 <append_char>:
void append_char(char caract){ // ACRESCENTA UM CARRIAGE RETURN NO TERMINAL
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]

	tx_buffer[w_tx_bindex&(FIFO_LEN-1)] = caract;
 80005ba:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <append_char+0x34>)
 80005bc:	881b      	ldrh	r3, [r3, #0]
 80005be:	b29b      	uxth	r3, r3
 80005c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80005c4:	4908      	ldr	r1, [pc, #32]	; (80005e8 <append_char+0x38>)
 80005c6:	79fa      	ldrb	r2, [r7, #7]
 80005c8:	54ca      	strb	r2, [r1, r3]
	w_tx_bindex++;
 80005ca:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <append_char+0x34>)
 80005cc:	881b      	ldrh	r3, [r3, #0]
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	3301      	adds	r3, #1
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <append_char+0x34>)
 80005d6:	801a      	strh	r2, [r3, #0]
}
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	20000498 	.word	0x20000498
 80005e8:	20000290 	.word	0x20000290

080005ec <start_tx>:
void start_tx(){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0

	if (USART3->ISR & USART_ISR_TC){// Transmission Complete (TC) É ATIVADA QUANDO A TRANSMISSÃO É CONCLUIDA - CASO NAO ESTEJA CONCLUIDA NAO SE DEVE INVOCAR NOVAMENTE HAL_UART_Transmit_IT()
 80005f0:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <start_tx+0x3c>)
 80005f2:	69db      	ldr	r3, [r3, #28]
 80005f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d012      	beq.n	8000622 <start_tx+0x36>
		HAL_UART_Transmit_IT(&huart3, (uint8_t *)&tx_buffer[r_tx_bindex&(FIFO_LEN-1)],1);
 80005fc:	4b0b      	ldr	r3, [pc, #44]	; (800062c <start_tx+0x40>)
 80005fe:	881b      	ldrh	r3, [r3, #0]
 8000600:	b29b      	uxth	r3, r3
 8000602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000606:	4a0a      	ldr	r2, [pc, #40]	; (8000630 <start_tx+0x44>)
 8000608:	4413      	add	r3, r2
 800060a:	2201      	movs	r2, #1
 800060c:	4619      	mov	r1, r3
 800060e:	4809      	ldr	r0, [pc, #36]	; (8000634 <start_tx+0x48>)
 8000610:	f003 fdf0 	bl	80041f4 <HAL_UART_Transmit_IT>
		r_tx_bindex++;
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <start_tx+0x40>)
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	b29b      	uxth	r3, r3
 800061a:	3301      	adds	r3, #1
 800061c:	b29a      	uxth	r2, r3
 800061e:	4b03      	ldr	r3, [pc, #12]	; (800062c <start_tx+0x40>)
 8000620:	801a      	strh	r2, [r3, #0]

	}
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40004800 	.word	0x40004800
 800062c:	20000494 	.word	0x20000494
 8000630:	20000290 	.word	0x20000290
 8000634:	20000538 	.word	0x20000538

08000638 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b088      	sub	sp, #32
 800063c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063e:	f107 030c 	add.w	r3, r7, #12
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064e:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <MX_GPIO_Init+0x94>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a1e      	ldr	r2, [pc, #120]	; (80006cc <MX_GPIO_Init+0x94>)
 8000654:	f043 0304 	orr.w	r3, r3, #4
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b1c      	ldr	r3, [pc, #112]	; (80006cc <MX_GPIO_Init+0x94>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0304 	and.w	r3, r3, #4
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	4b19      	ldr	r3, [pc, #100]	; (80006cc <MX_GPIO_Init+0x94>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a18      	ldr	r2, [pc, #96]	; (80006cc <MX_GPIO_Init+0x94>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b16      	ldr	r3, [pc, #88]	; (80006cc <MX_GPIO_Init+0x94>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800067e:	4b13      	ldr	r3, [pc, #76]	; (80006cc <MX_GPIO_Init+0x94>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a12      	ldr	r2, [pc, #72]	; (80006cc <MX_GPIO_Init+0x94>)
 8000684:	f043 0308 	orr.w	r3, r3, #8
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <MX_GPIO_Init+0x94>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0308 	and.w	r3, r3, #8
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Start_Btn_Pin;
 8000696:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800069a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800069c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Start_Btn_GPIO_Port, &GPIO_InitStruct);
 80006a6:	f107 030c 	add.w	r3, r7, #12
 80006aa:	4619      	mov	r1, r3
 80006ac:	4808      	ldr	r0, [pc, #32]	; (80006d0 <MX_GPIO_Init+0x98>)
 80006ae:	f000 ffb9 	bl	8001624 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2100      	movs	r1, #0
 80006b6:	2028      	movs	r0, #40	; 0x28
 80006b8:	f000 feeb 	bl	8001492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006bc:	2028      	movs	r0, #40	; 0x28
 80006be:	f000 ff04 	bl	80014ca <HAL_NVIC_EnableIRQ>

}
 80006c2:	bf00      	nop
 80006c4:	3720      	adds	r7, #32
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40020800 	.word	0x40020800

080006d4 <stand_by_mode>:
#include <stdlib.h>
#include "heater.h"

uint8_t flag_Start_Btn = 0;

void stand_by_mode(void){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	_push_message("RESET");
 80006d8:	4805      	ldr	r0, [pc, #20]	; (80006f0 <stand_by_mode+0x1c>)
 80006da:	f7ff ff37 	bl	800054c <_push_message>
	if (flag_Start_Btn == 1){
 80006de:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <stand_by_mode+0x20>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d101      	bne.n	80006ea <stand_by_mode+0x16>
		turn_on_heater();
 80006e6:	f000 f829 	bl	800073c <turn_on_heater>
	}
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	0800619c 	.word	0x0800619c
 80006f4:	2000049a 	.word	0x2000049a

080006f8 <main_function>:
void main_function(){			//só esta função é que precisa de saber o estado
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	static machine_state state = state_stand_by;
	static uint8_t duty_cycle = 0;
	if (flag_Start_Btn == 1)
 80006fc:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <main_function+0x3c>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b01      	cmp	r3, #1
 8000702:	d102      	bne.n	800070a <main_function+0x12>
		state = state_green;
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <main_function+0x40>)
 8000706:	2201      	movs	r2, #1
 8000708:	701a      	strb	r2, [r3, #0]

	switch (state){
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <main_function+0x40>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b03      	cmp	r3, #3
 8000710:	d80e      	bhi.n	8000730 <main_function+0x38>
 8000712:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <main_function+0x20>)
 8000714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000718:	08000729 	.word	0x08000729
 800071c:	0800072f 	.word	0x0800072f
 8000720:	0800072f 	.word	0x0800072f
 8000724:	0800072f 	.word	0x0800072f
		case state_stand_by: 	//stand_by
			stand_by_mode();
 8000728:	f7ff ffd4 	bl	80006d4 <stand_by_mode>
			break;
 800072c:	e000      	b.n	8000730 <main_function+0x38>
		case state_green:		//state_green

			break;
 800072e:	bf00      	nop
			break;
		case state_red: 	//state_red

			break;
	}
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	2000049a 	.word	0x2000049a
 8000738:	2000049b 	.word	0x2000049b

0800073c <turn_on_heater>:
void turn_on_heater(){
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000740:	2100      	movs	r1, #0
 8000742:	4802      	ldr	r0, [pc, #8]	; (800074c <turn_on_heater+0x10>)
 8000744:	f002 fb36 	bl	8002db4 <HAL_TIM_PWM_Start>
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	200004a0 	.word	0x200004a0

08000750 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000758:	1d39      	adds	r1, r7, #4
 800075a:	f04f 33ff 	mov.w	r3, #4294967295
 800075e:	2201      	movs	r2, #1
 8000760:	4803      	ldr	r0, [pc, #12]	; (8000770 <__io_putchar+0x20>)
 8000762:	f003 fbff 	bl	8003f64 <HAL_UART_Transmit>
	return ch;
 8000766:	687b      	ldr	r3, [r7, #4]
}
 8000768:	4618      	mov	r0, r3
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000538 	.word	0x20000538

08000774 <__io_getchar>:
int __io_getchar(void){
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	71fb      	strb	r3, [r7, #7]
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <__io_getchar+0x38>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	2208      	movs	r2, #8
 8000784:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000786:	1df9      	adds	r1, r7, #7
 8000788:	f04f 33ff 	mov.w	r3, #4294967295
 800078c:	2201      	movs	r2, #1
 800078e:	4807      	ldr	r0, [pc, #28]	; (80007ac <__io_getchar+0x38>)
 8000790:	f003 fc6b 	bl	800406a <HAL_UART_Receive>
	HAL_UART_Transmit(&huart3,(uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000794:	1df9      	adds	r1, r7, #7
 8000796:	f04f 33ff 	mov.w	r3, #4294967295
 800079a:	2201      	movs	r2, #1
 800079c:	4803      	ldr	r0, [pc, #12]	; (80007ac <__io_getchar+0x38>)
 800079e:	f003 fbe1 	bl	8003f64 <HAL_UART_Transmit>
	return ch;
 80007a2:	79fb      	ldrb	r3, [r7, #7]

}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000538 	.word	0x20000538

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b4:	f000 fd35 	bl	8001222 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b8:	f000 f824 	bl	8000804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007bc:	f7ff ff3c 	bl	8000638 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80007c0:	f000 fc02 	bl	8000fc8 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80007c4:	f000 fa7c 	bl	8000cc0 <MX_TIM2_Init>
  MX_TIM4_Init();
 80007c8:	f000 faf2 	bl	8000db0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  setvbuf(stdin, NULL, _IONBF, 0);
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <main+0x48>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	6858      	ldr	r0, [r3, #4]
 80007d2:	2300      	movs	r3, #0
 80007d4:	2202      	movs	r2, #2
 80007d6:	2100      	movs	r1, #0
 80007d8:	f005 f986 	bl	8005ae8 <setvbuf>
  HAL_UART_Receive_IT(&huart3, (uint8_t *)&rx_data, 1);
 80007dc:	2201      	movs	r2, #1
 80007de:	4907      	ldr	r1, [pc, #28]	; (80007fc <main+0x4c>)
 80007e0:	4807      	ldr	r0, [pc, #28]	; (8000800 <main+0x50>)
 80007e2:	f003 fd65 	bl	80042b0 <HAL_UART_Receive_IT>
  append_char('>');
 80007e6:	203e      	movs	r0, #62	; 0x3e
 80007e8:	f7ff fee2 	bl	80005b0 <append_char>
  start_tx();
 80007ec:	f7ff fefe 	bl	80005ec <start_tx>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  main_function();
 80007f0:	f7ff ff82 	bl	80006f8 <main_function>
 80007f4:	e7fc      	b.n	80007f0 <main+0x40>
 80007f6:	bf00      	nop
 80007f8:	2000000c 	.word	0x2000000c
 80007fc:	2000008d 	.word	0x2000008d
 8000800:	20000538 	.word	0x20000538

08000804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b094      	sub	sp, #80	; 0x50
 8000808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	2234      	movs	r2, #52	; 0x34
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f005 f870 	bl	80058f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000818:	f107 0308 	add.w	r3, r7, #8
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000828:	4b2b      	ldr	r3, [pc, #172]	; (80008d8 <SystemClock_Config+0xd4>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	4a2a      	ldr	r2, [pc, #168]	; (80008d8 <SystemClock_Config+0xd4>)
 800082e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000832:	6413      	str	r3, [r2, #64]	; 0x40
 8000834:	4b28      	ldr	r3, [pc, #160]	; (80008d8 <SystemClock_Config+0xd4>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000840:	4b26      	ldr	r3, [pc, #152]	; (80008dc <SystemClock_Config+0xd8>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a25      	ldr	r2, [pc, #148]	; (80008dc <SystemClock_Config+0xd8>)
 8000846:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800084a:	6013      	str	r3, [r2, #0]
 800084c:	4b23      	ldr	r3, [pc, #140]	; (80008dc <SystemClock_Config+0xd8>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000858:	2302      	movs	r3, #2
 800085a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800085c:	2301      	movs	r3, #1
 800085e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000860:	2310      	movs	r3, #16
 8000862:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000864:	2302      	movs	r3, #2
 8000866:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000868:	2300      	movs	r3, #0
 800086a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800086c:	2308      	movs	r3, #8
 800086e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000870:	23d8      	movs	r3, #216	; 0xd8
 8000872:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000874:	2302      	movs	r3, #2
 8000876:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000878:	2304      	movs	r3, #4
 800087a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800087c:	2302      	movs	r3, #2
 800087e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4618      	mov	r0, r3
 8000886:	f001 f8e1 	bl	8001a4c <HAL_RCC_OscConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000890:	f000 f826 	bl	80008e0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000894:	f001 f88a 	bl	80019ac <HAL_PWREx_EnableOverDrive>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800089e:	f000 f81f 	bl	80008e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a2:	230f      	movs	r3, #15
 80008a4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a6:	2302      	movs	r3, #2
 80008a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80008ba:	f107 0308 	add.w	r3, r7, #8
 80008be:	2107      	movs	r1, #7
 80008c0:	4618      	mov	r0, r3
 80008c2:	f001 fb71 	bl	8001fa8 <HAL_RCC_ClockConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80008cc:	f000 f808 	bl	80008e0 <Error_Handler>
  }
}
 80008d0:	bf00      	nop
 80008d2:	3750      	adds	r7, #80	; 0x50
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40007000 	.word	0x40007000

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <Error_Handler+0x8>
	...

080008ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <HAL_MspInit+0x44>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <HAL_MspInit+0x44>)
 80008f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fc:	6413      	str	r3, [r2, #64]	; 0x40
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <HAL_MspInit+0x44>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <HAL_MspInit+0x44>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090e:	4a08      	ldr	r2, [pc, #32]	; (8000930 <HAL_MspInit+0x44>)
 8000910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000914:	6453      	str	r3, [r2, #68]	; 0x44
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_MspInit+0x44>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800

08000934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <NMI_Handler+0x4>

0800093a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093e:	e7fe      	b.n	800093e <HardFault_Handler+0x4>

08000940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <MemManage_Handler+0x4>

08000946 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094a:	e7fe      	b.n	800094a <BusFault_Handler+0x4>

0800094c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <UsageFault_Handler+0x4>

08000952 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000980:	f000 fc8c 	bl	800129c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}

08000988 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800098c:	4802      	ldr	r0, [pc, #8]	; (8000998 <TIM2_IRQHandler+0x10>)
 800098e:	f002 fb0b 	bl	8002fa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	200004a0 	.word	0x200004a0

0800099c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80009a0:	4802      	ldr	r0, [pc, #8]	; (80009ac <USART3_IRQHandler+0x10>)
 80009a2:	f003 fcc9 	bl	8004338 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000538 	.word	0x20000538

080009b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Start_Btn_Pin);
 80009b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009b8:	f000 ffe0 	bl	800197c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}

080009c0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]

	uint32_t i = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60fb      	str	r3, [r7, #12]

	if(huart == &huart3){
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4a35      	ldr	r2, [pc, #212]	; (8000aa4 <HAL_UART_RxCpltCallback+0xe4>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d163      	bne.n	8000a9c <HAL_UART_RxCpltCallback+0xdc>

		HAL_UART_Receive_IT(&huart3, (uint8_t *)&rx_data, 1);
 80009d4:	2201      	movs	r2, #1
 80009d6:	4934      	ldr	r1, [pc, #208]	; (8000aa8 <HAL_UART_RxCpltCallback+0xe8>)
 80009d8:	4832      	ldr	r0, [pc, #200]	; (8000aa4 <HAL_UART_RxCpltCallback+0xe4>)
 80009da:	f003 fc69 	bl	80042b0 <HAL_UART_Receive_IT>
		rx_buffer[w_rx_bindex&(FIFO_LEN-1)] = rx_data;
 80009de:	4b33      	ldr	r3, [pc, #204]	; (8000aac <HAL_UART_RxCpltCallback+0xec>)
 80009e0:	881b      	ldrh	r3, [r3, #0]
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80009e8:	4a2f      	ldr	r2, [pc, #188]	; (8000aa8 <HAL_UART_RxCpltCallback+0xe8>)
 80009ea:	7811      	ldrb	r1, [r2, #0]
 80009ec:	4a30      	ldr	r2, [pc, #192]	; (8000ab0 <HAL_UART_RxCpltCallback+0xf0>)
 80009ee:	54d1      	strb	r1, [r2, r3]
		w_rx_bindex++;
 80009f0:	4b2e      	ldr	r3, [pc, #184]	; (8000aac <HAL_UART_RxCpltCallback+0xec>)
 80009f2:	881b      	ldrh	r3, [r3, #0]
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	3301      	adds	r3, #1
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	4b2c      	ldr	r3, [pc, #176]	; (8000aac <HAL_UART_RxCpltCallback+0xec>)
 80009fc:	801a      	strh	r2, [r3, #0]

		if((rx_data == '\n') || (rx_data == '\r'))
 80009fe:	4b2a      	ldr	r3, [pc, #168]	; (8000aa8 <HAL_UART_RxCpltCallback+0xe8>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b0a      	cmp	r3, #10
 8000a04:	d003      	beq.n	8000a0e <HAL_UART_RxCpltCallback+0x4e>
 8000a06:	4b28      	ldr	r3, [pc, #160]	; (8000aa8 <HAL_UART_RxCpltCallback+0xe8>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b0d      	cmp	r3, #13
 8000a0c:	d10a      	bne.n	8000a24 <HAL_UART_RxCpltCallback+0x64>
		{
			new_com++;
 8000a0e:	4b29      	ldr	r3, [pc, #164]	; (8000ab4 <HAL_UART_RxCpltCallback+0xf4>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	3301      	adds	r3, #1
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	4b27      	ldr	r3, [pc, #156]	; (8000ab4 <HAL_UART_RxCpltCallback+0xf4>)
 8000a18:	701a      	strb	r2, [r3, #0]
			delim_1[0] = rx_data;// dependendo de terminal pode estar configurado para carriage return ou new line
 8000a1a:	4b23      	ldr	r3, [pc, #140]	; (8000aa8 <HAL_UART_RxCpltCallback+0xe8>)
 8000a1c:	781a      	ldrb	r2, [r3, #0]
 8000a1e:	4b26      	ldr	r3, [pc, #152]	; (8000ab8 <HAL_UART_RxCpltCallback+0xf8>)
 8000a20:	701a      	strb	r2, [r3, #0]
			w_rx_bindex-=2;
			rx_buffer[w_rx_bindex&(FIFO_LEN-1)] = 0;
			rx_buffer[(w_rx_bindex+1)&(FIFO_LEN-1)] = 0;
		}
	}
}
 8000a22:	e03b      	b.n	8000a9c <HAL_UART_RxCpltCallback+0xdc>
		}else if(rx_data == '\e')
 8000a24:	4b20      	ldr	r3, [pc, #128]	; (8000aa8 <HAL_UART_RxCpltCallback+0xe8>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b1b      	cmp	r3, #27
 8000a2a:	d11b      	bne.n	8000a64 <HAL_UART_RxCpltCallback+0xa4>
		 for(i = 0; i< FIFO_LEN; i++) // Limpa o array
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	e007      	b.n	8000a42 <HAL_UART_RxCpltCallback+0x82>
			  rx_buffer[i] = 0;
 8000a32:	4a1f      	ldr	r2, [pc, #124]	; (8000ab0 <HAL_UART_RxCpltCallback+0xf0>)
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	4413      	add	r3, r2
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
		 for(i = 0; i< FIFO_LEN; i++) // Limpa o array
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a48:	d3f3      	bcc.n	8000a32 <HAL_UART_RxCpltCallback+0x72>
		  w_rx_bindex = 0;
 8000a4a:	4b18      	ldr	r3, [pc, #96]	; (8000aac <HAL_UART_RxCpltCallback+0xec>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	801a      	strh	r2, [r3, #0]
		  r_rx_bindex = 0;
 8000a50:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <HAL_UART_RxCpltCallback+0xfc>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	801a      	strh	r2, [r3, #0]
		  _push_message("ESC\rALL CLEAR\r\r>");
 8000a56:	481a      	ldr	r0, [pc, #104]	; (8000ac0 <HAL_UART_RxCpltCallback+0x100>)
 8000a58:	f7ff fd78 	bl	800054c <_push_message>
		  tx_flag = TRUE; // EXSTE ALGO PARA TRANSMITIR
 8000a5c:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <HAL_UART_RxCpltCallback+0x104>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	701a      	strb	r2, [r3, #0]
}
 8000a62:	e01b      	b.n	8000a9c <HAL_UART_RxCpltCallback+0xdc>
		else if(rx_data == '\b')
 8000a64:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <HAL_UART_RxCpltCallback+0xe8>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b08      	cmp	r3, #8
 8000a6a:	d117      	bne.n	8000a9c <HAL_UART_RxCpltCallback+0xdc>
			w_rx_bindex-=2;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <HAL_UART_RxCpltCallback+0xec>)
 8000a6e:	881b      	ldrh	r3, [r3, #0]
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	3b02      	subs	r3, #2
 8000a74:	b29a      	uxth	r2, r3
 8000a76:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <HAL_UART_RxCpltCallback+0xec>)
 8000a78:	801a      	strh	r2, [r3, #0]
			rx_buffer[w_rx_bindex&(FIFO_LEN-1)] = 0;
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <HAL_UART_RxCpltCallback+0xec>)
 8000a7c:	881b      	ldrh	r3, [r3, #0]
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000a84:	4a0a      	ldr	r2, [pc, #40]	; (8000ab0 <HAL_UART_RxCpltCallback+0xf0>)
 8000a86:	2100      	movs	r1, #0
 8000a88:	54d1      	strb	r1, [r2, r3]
			rx_buffer[(w_rx_bindex+1)&(FIFO_LEN-1)] = 0;
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <HAL_UART_RxCpltCallback+0xec>)
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	3301      	adds	r3, #1
 8000a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000a96:	4a06      	ldr	r2, [pc, #24]	; (8000ab0 <HAL_UART_RxCpltCallback+0xf0>)
 8000a98:	2100      	movs	r1, #0
 8000a9a:	54d1      	strb	r1, [r2, r3]
}
 8000a9c:	bf00      	nop
 8000a9e:	3710      	adds	r7, #16
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000538 	.word	0x20000538
 8000aa8:	2000008d 	.word	0x2000008d
 8000aac:	20000492 	.word	0x20000492
 8000ab0:	20000090 	.word	0x20000090
 8000ab4:	2000008f 	.word	0x2000008f
 8000ab8:	2000008c 	.word	0x2000008c
 8000abc:	20000496 	.word	0x20000496
 8000ac0:	080061a4 	.word	0x080061a4
 8000ac4:	20000490 	.word	0x20000490

08000ac8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]

	if(huart == &huart3){
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4a12      	ldr	r2, [pc, #72]	; (8000b1c <HAL_UART_TxCpltCallback+0x54>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d11c      	bne.n	8000b12 <HAL_UART_TxCpltCallback+0x4a>

		if((w_tx_bindex-r_tx_bindex) != 0)
 8000ad8:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <HAL_UART_TxCpltCallback+0x58>)
 8000ada:	881b      	ldrh	r3, [r3, #0]
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <HAL_UART_TxCpltCallback+0x5c>)
 8000ae0:	881b      	ldrh	r3, [r3, #0]
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d014      	beq.n	8000b12 <HAL_UART_TxCpltCallback+0x4a>
		{
			tx_data = tx_buffer[r_tx_bindex&(FIFO_LEN-1)];
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <HAL_UART_TxCpltCallback+0x5c>)
 8000aea:	881b      	ldrh	r3, [r3, #0]
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000af2:	4a0d      	ldr	r2, [pc, #52]	; (8000b28 <HAL_UART_TxCpltCallback+0x60>)
 8000af4:	5cd2      	ldrb	r2, [r2, r3]
 8000af6:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <HAL_UART_TxCpltCallback+0x64>)
 8000af8:	701a      	strb	r2, [r3, #0]
			r_tx_bindex++;
 8000afa:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <HAL_UART_TxCpltCallback+0x5c>)
 8000afc:	881b      	ldrh	r3, [r3, #0]
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	3301      	adds	r3, #1
 8000b02:	b29a      	uxth	r2, r3
 8000b04:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <HAL_UART_TxCpltCallback+0x5c>)
 8000b06:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart3, (uint8_t *)&tx_data,1);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	4908      	ldr	r1, [pc, #32]	; (8000b2c <HAL_UART_TxCpltCallback+0x64>)
 8000b0c:	4803      	ldr	r0, [pc, #12]	; (8000b1c <HAL_UART_TxCpltCallback+0x54>)
 8000b0e:	f003 fb71 	bl	80041f4 <HAL_UART_Transmit_IT>

		}
	}
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000538 	.word	0x20000538
 8000b20:	20000498 	.word	0x20000498
 8000b24:	20000494 	.word	0x20000494
 8000b28:	20000290 	.word	0x20000290
 8000b2c:	2000008e 	.word	0x2000008e

08000b30 <HAL_TIM_PeriodElapsedCallback>:
		flag_Start_Btn = 1;
		//START PWM no main do codigo
	  }
}
*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
//	if(htim == &htim2)
//		tim2_int_flag = 1;

}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == Start_Btn_Pin){
 8000b4e:	88fb      	ldrh	r3, [r7, #6]
 8000b50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b54:	d102      	bne.n	8000b5c <HAL_GPIO_EXTI_Callback+0x18>
		flag_Start_Btn = 1;
 8000b56:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <HAL_GPIO_EXTI_Callback+0x24>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	701a      	strb	r2, [r3, #0]
	}

}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	2000049a 	.word	0x2000049a

08000b6c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
 8000b7c:	e00a      	b.n	8000b94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b7e:	f7ff fdf9 	bl	8000774 <__io_getchar>
 8000b82:	4601      	mov	r1, r0
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	1c5a      	adds	r2, r3, #1
 8000b88:	60ba      	str	r2, [r7, #8]
 8000b8a:	b2ca      	uxtb	r2, r1
 8000b8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	3301      	adds	r3, #1
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	697a      	ldr	r2, [r7, #20]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	dbf0      	blt.n	8000b7e <_read+0x12>
  }

  return len;
 8000b9c:	687b      	ldr	r3, [r7, #4]
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3718      	adds	r7, #24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b086      	sub	sp, #24
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	60f8      	str	r0, [r7, #12]
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]
 8000bb6:	e009      	b.n	8000bcc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	1c5a      	adds	r2, r3, #1
 8000bbc:	60ba      	str	r2, [r7, #8]
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fdc5 	bl	8000750 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	617b      	str	r3, [r7, #20]
 8000bcc:	697a      	ldr	r2, [r7, #20]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	dbf1      	blt.n	8000bb8 <_write+0x12>
  }
  return len;
 8000bd4:	687b      	ldr	r3, [r7, #4]
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3718      	adds	r7, #24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <_close>:

int _close(int file)
{
 8000bde:	b480      	push	{r7}
 8000be0:	b083      	sub	sp, #12
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	b083      	sub	sp, #12
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
 8000bfe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c06:	605a      	str	r2, [r3, #4]
  return 0;
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <_lseek>:
  (void)file;
  return 1;
}

int _lseek(int file, int ptr, int dir)
{
 8000c16:	b480      	push	{r7}
 8000c18:	b085      	sub	sp, #20
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	60f8      	str	r0, [r7, #12]
 8000c1e:	60b9      	str	r1, [r7, #8]
 8000c20:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c22:	2300      	movs	r3, #0
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c38:	4a14      	ldr	r2, [pc, #80]	; (8000c8c <_sbrk+0x5c>)
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <_sbrk+0x60>)
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <_sbrk+0x64>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d102      	bne.n	8000c52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <_sbrk+0x64>)
 8000c4e:	4a12      	ldr	r2, [pc, #72]	; (8000c98 <_sbrk+0x68>)
 8000c50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <_sbrk+0x64>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d207      	bcs.n	8000c70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c60:	f004 fe18 	bl	8005894 <__errno>
 8000c64:	4603      	mov	r3, r0
 8000c66:	220c      	movs	r2, #12
 8000c68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	e009      	b.n	8000c84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <_sbrk+0x64>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c76:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	4a05      	ldr	r2, [pc, #20]	; (8000c94 <_sbrk+0x64>)
 8000c80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c82:	68fb      	ldr	r3, [r7, #12]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3718      	adds	r7, #24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20080000 	.word	0x20080000
 8000c90:	00000400 	.word	0x00000400
 8000c94:	2000049c 	.word	0x2000049c
 8000c98:	200005d8 	.word	0x200005d8

08000c9c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <SystemInit+0x20>)
 8000ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca6:	4a05      	ldr	r2, [pc, #20]	; (8000cbc <SystemInit+0x20>)
 8000ca8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08e      	sub	sp, #56	; 0x38
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd4:	f107 031c 	add.w	r3, r7, #28
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	611a      	str	r2, [r3, #16]
 8000cee:	615a      	str	r2, [r3, #20]
 8000cf0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cf2:	4b2e      	ldr	r3, [pc, #184]	; (8000dac <MX_TIM2_Init+0xec>)
 8000cf4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cf8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6;
 8000cfa:	4b2c      	ldr	r3, [pc, #176]	; (8000dac <MX_TIM2_Init+0xec>)
 8000cfc:	2206      	movs	r2, #6
 8000cfe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d00:	4b2a      	ldr	r3, [pc, #168]	; (8000dac <MX_TIM2_Init+0xec>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000d06:	4b29      	ldr	r3, [pc, #164]	; (8000dac <MX_TIM2_Init+0xec>)
 8000d08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d0e:	4b27      	ldr	r3, [pc, #156]	; (8000dac <MX_TIM2_Init+0xec>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d14:	4b25      	ldr	r3, [pc, #148]	; (8000dac <MX_TIM2_Init+0xec>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d1a:	4824      	ldr	r0, [pc, #144]	; (8000dac <MX_TIM2_Init+0xec>)
 8000d1c:	f001 ff92 	bl	8002c44 <HAL_TIM_Base_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000d26:	f7ff fddb 	bl	80008e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d34:	4619      	mov	r1, r3
 8000d36:	481d      	ldr	r0, [pc, #116]	; (8000dac <MX_TIM2_Init+0xec>)
 8000d38:	f002 fb6a 	bl	8003410 <HAL_TIM_ConfigClockSource>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000d42:	f7ff fdcd 	bl	80008e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d46:	4819      	ldr	r0, [pc, #100]	; (8000dac <MX_TIM2_Init+0xec>)
 8000d48:	f001 ffd3 	bl	8002cf2 <HAL_TIM_PWM_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000d52:	f7ff fdc5 	bl	80008e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	4619      	mov	r1, r3
 8000d64:	4811      	ldr	r0, [pc, #68]	; (8000dac <MX_TIM2_Init+0xec>)
 8000d66:	f003 f803 	bl	8003d70 <HAL_TIMEx_MasterConfigSynchronization>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000d70:	f7ff fdb6 	bl	80008e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d74:	2360      	movs	r3, #96	; 0x60
 8000d76:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8000d78:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d7c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d86:	463b      	mov	r3, r7
 8000d88:	2200      	movs	r2, #0
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4807      	ldr	r0, [pc, #28]	; (8000dac <MX_TIM2_Init+0xec>)
 8000d8e:	f002 fa2b 	bl	80031e8 <HAL_TIM_PWM_ConfigChannel>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000d98:	f7ff fda2 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d9c:	4803      	ldr	r0, [pc, #12]	; (8000dac <MX_TIM2_Init+0xec>)
 8000d9e:	f000 f8b7 	bl	8000f10 <HAL_TIM_MspPostInit>

}
 8000da2:	bf00      	nop
 8000da4:	3738      	adds	r7, #56	; 0x38
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	200004a0 	.word	0x200004a0

08000db0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08e      	sub	sp, #56	; 0x38
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000db6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc4:	f107 031c 	add.w	r3, r7, #28
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dd0:	463b      	mov	r3, r7
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]
 8000dda:	60da      	str	r2, [r3, #12]
 8000ddc:	611a      	str	r2, [r3, #16]
 8000dde:	615a      	str	r2, [r3, #20]
 8000de0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000de2:	4b2d      	ldr	r3, [pc, #180]	; (8000e98 <MX_TIM4_Init+0xe8>)
 8000de4:	4a2d      	ldr	r2, [pc, #180]	; (8000e9c <MX_TIM4_Init+0xec>)
 8000de6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000de8:	4b2b      	ldr	r3, [pc, #172]	; (8000e98 <MX_TIM4_Init+0xe8>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dee:	4b2a      	ldr	r3, [pc, #168]	; (8000e98 <MX_TIM4_Init+0xe8>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000df4:	4b28      	ldr	r3, [pc, #160]	; (8000e98 <MX_TIM4_Init+0xe8>)
 8000df6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dfa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dfc:	4b26      	ldr	r3, [pc, #152]	; (8000e98 <MX_TIM4_Init+0xe8>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e02:	4b25      	ldr	r3, [pc, #148]	; (8000e98 <MX_TIM4_Init+0xe8>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e08:	4823      	ldr	r0, [pc, #140]	; (8000e98 <MX_TIM4_Init+0xe8>)
 8000e0a:	f001 ff1b 	bl	8002c44 <HAL_TIM_Base_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000e14:	f7ff fd64 	bl	80008e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e22:	4619      	mov	r1, r3
 8000e24:	481c      	ldr	r0, [pc, #112]	; (8000e98 <MX_TIM4_Init+0xe8>)
 8000e26:	f002 faf3 	bl	8003410 <HAL_TIM_ConfigClockSource>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000e30:	f7ff fd56 	bl	80008e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e34:	4818      	ldr	r0, [pc, #96]	; (8000e98 <MX_TIM4_Init+0xe8>)
 8000e36:	f001 ff5c 	bl	8002cf2 <HAL_TIM_PWM_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000e40:	f7ff fd4e 	bl	80008e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e4c:	f107 031c 	add.w	r3, r7, #28
 8000e50:	4619      	mov	r1, r3
 8000e52:	4811      	ldr	r0, [pc, #68]	; (8000e98 <MX_TIM4_Init+0xe8>)
 8000e54:	f002 ff8c 	bl	8003d70 <HAL_TIMEx_MasterConfigSynchronization>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000e5e:	f7ff fd3f 	bl	80008e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e62:	2360      	movs	r3, #96	; 0x60
 8000e64:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e72:	463b      	mov	r3, r7
 8000e74:	2204      	movs	r2, #4
 8000e76:	4619      	mov	r1, r3
 8000e78:	4807      	ldr	r0, [pc, #28]	; (8000e98 <MX_TIM4_Init+0xe8>)
 8000e7a:	f002 f9b5 	bl	80031e8 <HAL_TIM_PWM_ConfigChannel>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000e84:	f7ff fd2c 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e88:	4803      	ldr	r0, [pc, #12]	; (8000e98 <MX_TIM4_Init+0xe8>)
 8000e8a:	f000 f841 	bl	8000f10 <HAL_TIM_MspPostInit>

}
 8000e8e:	bf00      	nop
 8000e90:	3738      	adds	r7, #56	; 0x38
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200004ec 	.word	0x200004ec
 8000e9c:	40000800 	.word	0x40000800

08000ea0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000eb0:	d114      	bne.n	8000edc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <HAL_TIM_Base_MspInit+0x68>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	4a14      	ldr	r2, [pc, #80]	; (8000f08 <HAL_TIM_Base_MspInit+0x68>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ebe:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <HAL_TIM_Base_MspInit+0x68>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2100      	movs	r1, #0
 8000ece:	201c      	movs	r0, #28
 8000ed0:	f000 fadf 	bl	8001492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ed4:	201c      	movs	r0, #28
 8000ed6:	f000 faf8 	bl	80014ca <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000eda:	e010      	b.n	8000efe <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM4)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <HAL_TIM_Base_MspInit+0x6c>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d10b      	bne.n	8000efe <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ee6:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <HAL_TIM_Base_MspInit+0x68>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	4a07      	ldr	r2, [pc, #28]	; (8000f08 <HAL_TIM_Base_MspInit+0x68>)
 8000eec:	f043 0304 	orr.w	r3, r3, #4
 8000ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef2:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <HAL_TIM_Base_MspInit+0x68>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	f003 0304 	and.w	r3, r3, #4
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	68bb      	ldr	r3, [r7, #8]
}
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40000800 	.word	0x40000800

08000f10 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	; 0x28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f30:	d11c      	bne.n	8000f6c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	4b21      	ldr	r3, [pc, #132]	; (8000fb8 <HAL_TIM_MspPostInit+0xa8>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a20      	ldr	r2, [pc, #128]	; (8000fb8 <HAL_TIM_MspPostInit+0xa8>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b1e      	ldr	r3, [pc, #120]	; (8000fb8 <HAL_TIM_MspPostInit+0xa8>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	4815      	ldr	r0, [pc, #84]	; (8000fbc <HAL_TIM_MspPostInit+0xac>)
 8000f66:	f000 fb5d 	bl	8001624 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000f6a:	e021      	b.n	8000fb0 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM4)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a13      	ldr	r2, [pc, #76]	; (8000fc0 <HAL_TIM_MspPostInit+0xb0>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d11c      	bne.n	8000fb0 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f76:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <HAL_TIM_MspPostInit+0xa8>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a0f      	ldr	r2, [pc, #60]	; (8000fb8 <HAL_TIM_MspPostInit+0xa8>)
 8000f7c:	f043 0308 	orr.w	r3, r3, #8
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b0d      	ldr	r3, [pc, #52]	; (8000fb8 <HAL_TIM_MspPostInit+0xa8>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0308 	and.w	r3, r3, #8
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4806      	ldr	r0, [pc, #24]	; (8000fc4 <HAL_TIM_MspPostInit+0xb4>)
 8000fac:	f000 fb3a 	bl	8001624 <HAL_GPIO_Init>
}
 8000fb0:	bf00      	nop
 8000fb2:	3728      	adds	r7, #40	; 0x28
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40020000 	.word	0x40020000
 8000fc0:	40000800 	.word	0x40000800
 8000fc4:	40020c00 	.word	0x40020c00

08000fc8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fcc:	4b14      	ldr	r3, [pc, #80]	; (8001020 <MX_USART3_UART_Init+0x58>)
 8000fce:	4a15      	ldr	r2, [pc, #84]	; (8001024 <MX_USART3_UART_Init+0x5c>)
 8000fd0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fd2:	4b13      	ldr	r3, [pc, #76]	; (8001020 <MX_USART3_UART_Init+0x58>)
 8000fd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fd8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <MX_USART3_UART_Init+0x58>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <MX_USART3_UART_Init+0x58>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <MX_USART3_UART_Init+0x58>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <MX_USART3_UART_Init+0x58>)
 8000fee:	220c      	movs	r2, #12
 8000ff0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <MX_USART3_UART_Init+0x58>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <MX_USART3_UART_Init+0x58>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ffe:	4b08      	ldr	r3, [pc, #32]	; (8001020 <MX_USART3_UART_Init+0x58>)
 8001000:	2200      	movs	r2, #0
 8001002:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <MX_USART3_UART_Init+0x58>)
 8001006:	2200      	movs	r2, #0
 8001008:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <MX_USART3_UART_Init+0x58>)
 800100c:	f002 ff5c 	bl	8003ec8 <HAL_UART_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001016:	f7ff fc63 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000538 	.word	0x20000538
 8001024:	40004800 	.word	0x40004800

08001028 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b0b4      	sub	sp, #208	; 0xd0
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001040:	f107 0318 	add.w	r3, r7, #24
 8001044:	2290      	movs	r2, #144	; 0x90
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f004 fc55 	bl	80058f8 <memset>
  if(uartHandle->Instance==USART3)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a58      	ldr	r2, [pc, #352]	; (80011b4 <HAL_UART_MspInit+0x18c>)
 8001054:	4293      	cmp	r3, r2
 8001056:	f040 80a8 	bne.w	80011aa <HAL_UART_MspInit+0x182>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800105a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800105e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001060:	2300      	movs	r3, #0
 8001062:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001064:	f107 0318 	add.w	r3, r7, #24
 8001068:	4618      	mov	r0, r3
 800106a:	f001 f9c3 	bl	80023f4 <HAL_RCCEx_PeriphCLKConfig>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001074:	f7ff fc34 	bl	80008e0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001078:	4b4f      	ldr	r3, [pc, #316]	; (80011b8 <HAL_UART_MspInit+0x190>)
 800107a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107c:	4a4e      	ldr	r2, [pc, #312]	; (80011b8 <HAL_UART_MspInit+0x190>)
 800107e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001082:	6413      	str	r3, [r2, #64]	; 0x40
 8001084:	4b4c      	ldr	r3, [pc, #304]	; (80011b8 <HAL_UART_MspInit+0x190>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800108c:	617b      	str	r3, [r7, #20]
 800108e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001090:	4b49      	ldr	r3, [pc, #292]	; (80011b8 <HAL_UART_MspInit+0x190>)
 8001092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001094:	4a48      	ldr	r2, [pc, #288]	; (80011b8 <HAL_UART_MspInit+0x190>)
 8001096:	f043 0308 	orr.w	r3, r3, #8
 800109a:	6313      	str	r3, [r2, #48]	; 0x30
 800109c:	4b46      	ldr	r3, [pc, #280]	; (80011b8 <HAL_UART_MspInit+0x190>)
 800109e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a0:	f003 0308 	and.w	r3, r3, #8
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	693b      	ldr	r3, [r7, #16]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	2302      	movs	r3, #2
 80010b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010bc:	2303      	movs	r3, #3
 80010be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010c2:	2307      	movs	r3, #7
 80010c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80010cc:	4619      	mov	r1, r3
 80010ce:	483b      	ldr	r0, [pc, #236]	; (80011bc <HAL_UART_MspInit+0x194>)
 80010d0:	f000 faa8 	bl	8001624 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2100      	movs	r1, #0
 80010d8:	2027      	movs	r0, #39	; 0x27
 80010da:	f000 f9da 	bl	8001492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80010de:	2027      	movs	r0, #39	; 0x27
 80010e0:	f000 f9f3 	bl	80014ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

    uint32_t *ptr_RCC_RCC_APB1ENR = RCC_base + 0x40;
 80010e4:	4b36      	ldr	r3, [pc, #216]	; (80011c0 <HAL_UART_MspInit+0x198>)
 80010e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    uint32_t *ptr_RCC_RCC_DCKCFGR2 = RCC_base + 0x90;
 80010ea:	4b36      	ldr	r3, [pc, #216]	; (80011c4 <HAL_UART_MspInit+0x19c>)
 80010ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    uint32_t *ptr_GPIOD_GPIOx_MODER = GPIOD_base + 0x0;
 80010f0:	4b32      	ldr	r3, [pc, #200]	; (80011bc <HAL_UART_MspInit+0x194>)
 80010f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    uint32_t *ptr_GPIOD_GPIOx_OSPEEDR = GPIOD_base + 0x08;
 80010f6:	4b34      	ldr	r3, [pc, #208]	; (80011c8 <HAL_UART_MspInit+0x1a0>)
 80010f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    uint32_t *ptr_GPIOD_GPIOx_AFRH = GPIOD_base + 0x24;
 80010fc:	4b33      	ldr	r3, [pc, #204]	; (80011cc <HAL_UART_MspInit+0x1a4>)
 80010fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

    *ptr_RCC_RCC_DCKCFGR2 |= (UART3SEL) << UART3SEL_pos;// configurar o clock da USART3
 8001102:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f043 0210 	orr.w	r2, r3, #16
 800110c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001110:	601a      	str	r2, [r3, #0]

    *ptr_RCC_RCC_APB1ENR |= (RCC_USART3EN) << RCC_USART3EN_pos; //enable ao clock da USART3
 8001112:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800111c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001120:	601a      	str	r2, [r3, #0]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001122:	4b25      	ldr	r3, [pc, #148]	; (80011b8 <HAL_UART_MspInit+0x190>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a24      	ldr	r2, [pc, #144]	; (80011b8 <HAL_UART_MspInit+0x190>)
 8001128:	f043 0308 	orr.w	r3, r3, #8
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <HAL_UART_MspInit+0x190>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0308 	and.w	r3, r3, #8
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]

     *ptr_GPIOD_GPIOx_MODER |= (MODER9) << MODER9_pos; // TX & RX
 800113a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001144:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001148:	601a      	str	r2, [r3, #0]
     *ptr_GPIOD_GPIOx_MODER |= (MODER8) << MODER8_pos;
 800114a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001154:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001158:	601a      	str	r2, [r3, #0]

     *ptr_GPIOD_GPIOx_OSPEEDR |= (OSPEEDR9) << OSPEEDR9_pos;// Configurar speed
 800115a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f443 2240 	orr.w	r2, r3, #786432	; 0xc0000
 8001164:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001168:	601a      	str	r2, [r3, #0]
     *ptr_GPIOD_GPIOx_OSPEEDR |= (OSPEEDR8) << OSPEEDR8_pos;
 800116a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f443 3240 	orr.w	r2, r3, #196608	; 0x30000
 8001174:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001178:	601a      	str	r2, [r3, #0]

     *ptr_GPIOD_GPIOx_AFRH |= (AFR9) << AFR9_pos;   // configurar o alternate
 800117a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f043 0270 	orr.w	r2, r3, #112	; 0x70
 8001184:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001188:	601a      	str	r2, [r3, #0]
     *ptr_GPIOD_GPIOx_AFRH |= (AFR8) << AFR8_pos;
 800118a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f043 0207 	orr.w	r2, r3, #7
 8001194:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001198:	601a      	str	r2, [r3, #0]

     HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	2027      	movs	r0, #39	; 0x27
 80011a0:	f000 f977 	bl	8001492 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(USART3_IRQn);
 80011a4:	2027      	movs	r0, #39	; 0x27
 80011a6:	f000 f990 	bl	80014ca <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART3_MspInit 1 */
  }
}
 80011aa:	bf00      	nop
 80011ac:	37d0      	adds	r7, #208	; 0xd0
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40004800 	.word	0x40004800
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40020c00 	.word	0x40020c00
 80011c0:	40023840 	.word	0x40023840
 80011c4:	40023890 	.word	0x40023890
 80011c8:	40020c08 	.word	0x40020c08
 80011cc:	40020c24 	.word	0x40020c24

080011d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001208 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011d4:	480d      	ldr	r0, [pc, #52]	; (800120c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011d6:	490e      	ldr	r1, [pc, #56]	; (8001210 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011d8:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011dc:	e002      	b.n	80011e4 <LoopCopyDataInit>

080011de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e2:	3304      	adds	r3, #4

080011e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e8:	d3f9      	bcc.n	80011de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ea:	4a0b      	ldr	r2, [pc, #44]	; (8001218 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011ec:	4c0b      	ldr	r4, [pc, #44]	; (800121c <LoopFillZerobss+0x26>)
  movs r3, #0
 80011ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f0:	e001      	b.n	80011f6 <LoopFillZerobss>

080011f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f4:	3204      	adds	r2, #4

080011f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f8:	d3fb      	bcc.n	80011f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011fa:	f7ff fd4f 	bl	8000c9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011fe:	f004 fb4f 	bl	80058a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001202:	f7ff fad5 	bl	80007b0 <main>
  bx  lr    
 8001206:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001208:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800120c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001210:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001214:	08006244 	.word	0x08006244
  ldr r2, =_sbss
 8001218:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800121c:	200005d4 	.word	0x200005d4

08001220 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001220:	e7fe      	b.n	8001220 <ADC_IRQHandler>

08001222 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001226:	2003      	movs	r0, #3
 8001228:	f000 f928 	bl	800147c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800122c:	2000      	movs	r0, #0
 800122e:	f000 f805 	bl	800123c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001232:	f7ff fb5b 	bl	80008ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	bd80      	pop	{r7, pc}

0800123c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_InitTick+0x54>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HAL_InitTick+0x58>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	4619      	mov	r1, r3
 800124e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001252:	fbb3 f3f1 	udiv	r3, r3, r1
 8001256:	fbb2 f3f3 	udiv	r3, r2, r3
 800125a:	4618      	mov	r0, r3
 800125c:	f000 f943 	bl	80014e6 <HAL_SYSTICK_Config>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e00e      	b.n	8001288 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2b0f      	cmp	r3, #15
 800126e:	d80a      	bhi.n	8001286 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001270:	2200      	movs	r2, #0
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	f04f 30ff 	mov.w	r0, #4294967295
 8001278:	f000 f90b 	bl	8001492 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800127c:	4a06      	ldr	r2, [pc, #24]	; (8001298 <HAL_InitTick+0x5c>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001282:	2300      	movs	r3, #0
 8001284:	e000      	b.n	8001288 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
}
 8001288:	4618      	mov	r0, r3
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000000 	.word	0x20000000
 8001294:	20000008 	.word	0x20000008
 8001298:	20000004 	.word	0x20000004

0800129c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_IncTick+0x20>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <HAL_IncTick+0x24>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4413      	add	r3, r2
 80012ac:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <HAL_IncTick+0x24>)
 80012ae:	6013      	str	r3, [r2, #0]
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	20000008 	.word	0x20000008
 80012c0:	200005c0 	.word	0x200005c0

080012c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return uwTick;
 80012c8:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <HAL_GetTick+0x14>)
 80012ca:	681b      	ldr	r3, [r3, #0]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	200005c0 	.word	0x200005c0

080012dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ec:	4b0b      	ldr	r3, [pc, #44]	; (800131c <__NVIC_SetPriorityGrouping+0x40>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f2:	68ba      	ldr	r2, [r7, #8]
 80012f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f8:	4013      	ands	r3, r2
 80012fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <__NVIC_SetPriorityGrouping+0x44>)
 8001306:	4313      	orrs	r3, r2
 8001308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130a:	4a04      	ldr	r2, [pc, #16]	; (800131c <__NVIC_SetPriorityGrouping+0x40>)
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	60d3      	str	r3, [r2, #12]
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00
 8001320:	05fa0000 	.word	0x05fa0000

08001324 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <__NVIC_GetPriorityGrouping+0x18>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	f003 0307 	and.w	r3, r3, #7
}
 8001332:	4618      	mov	r0, r3
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	2b00      	cmp	r3, #0
 8001350:	db0b      	blt.n	800136a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	f003 021f 	and.w	r2, r3, #31
 8001358:	4907      	ldr	r1, [pc, #28]	; (8001378 <__NVIC_EnableIRQ+0x38>)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	095b      	lsrs	r3, r3, #5
 8001360:	2001      	movs	r0, #1
 8001362:	fa00 f202 	lsl.w	r2, r0, r2
 8001366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	e000e100 	.word	0xe000e100

0800137c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	6039      	str	r1, [r7, #0]
 8001386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138c:	2b00      	cmp	r3, #0
 800138e:	db0a      	blt.n	80013a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	b2da      	uxtb	r2, r3
 8001394:	490c      	ldr	r1, [pc, #48]	; (80013c8 <__NVIC_SetPriority+0x4c>)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	0112      	lsls	r2, r2, #4
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	440b      	add	r3, r1
 80013a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a4:	e00a      	b.n	80013bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4908      	ldr	r1, [pc, #32]	; (80013cc <__NVIC_SetPriority+0x50>)
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	f003 030f 	and.w	r3, r3, #15
 80013b2:	3b04      	subs	r3, #4
 80013b4:	0112      	lsls	r2, r2, #4
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	440b      	add	r3, r1
 80013ba:	761a      	strb	r2, [r3, #24]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000e100 	.word	0xe000e100
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b089      	sub	sp, #36	; 0x24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f1c3 0307 	rsb	r3, r3, #7
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	bf28      	it	cs
 80013ee:	2304      	movcs	r3, #4
 80013f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3304      	adds	r3, #4
 80013f6:	2b06      	cmp	r3, #6
 80013f8:	d902      	bls.n	8001400 <NVIC_EncodePriority+0x30>
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3b03      	subs	r3, #3
 80013fe:	e000      	b.n	8001402 <NVIC_EncodePriority+0x32>
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001404:	f04f 32ff 	mov.w	r2, #4294967295
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43da      	mvns	r2, r3
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	401a      	ands	r2, r3
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001418:	f04f 31ff 	mov.w	r1, #4294967295
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	fa01 f303 	lsl.w	r3, r1, r3
 8001422:	43d9      	mvns	r1, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	4313      	orrs	r3, r2
         );
}
 800142a:	4618      	mov	r0, r3
 800142c:	3724      	adds	r7, #36	; 0x24
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3b01      	subs	r3, #1
 8001444:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001448:	d301      	bcc.n	800144e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800144a:	2301      	movs	r3, #1
 800144c:	e00f      	b.n	800146e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800144e:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <SysTick_Config+0x40>)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3b01      	subs	r3, #1
 8001454:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001456:	210f      	movs	r1, #15
 8001458:	f04f 30ff 	mov.w	r0, #4294967295
 800145c:	f7ff ff8e 	bl	800137c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001460:	4b05      	ldr	r3, [pc, #20]	; (8001478 <SysTick_Config+0x40>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001466:	4b04      	ldr	r3, [pc, #16]	; (8001478 <SysTick_Config+0x40>)
 8001468:	2207      	movs	r2, #7
 800146a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	e000e010 	.word	0xe000e010

0800147c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff ff29 	bl	80012dc <__NVIC_SetPriorityGrouping>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001492:	b580      	push	{r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af00      	add	r7, sp, #0
 8001498:	4603      	mov	r3, r0
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
 800149e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014a4:	f7ff ff3e 	bl	8001324 <__NVIC_GetPriorityGrouping>
 80014a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	68b9      	ldr	r1, [r7, #8]
 80014ae:	6978      	ldr	r0, [r7, #20]
 80014b0:	f7ff ff8e 	bl	80013d0 <NVIC_EncodePriority>
 80014b4:	4602      	mov	r2, r0
 80014b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ba:	4611      	mov	r1, r2
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff5d 	bl	800137c <__NVIC_SetPriority>
}
 80014c2:	bf00      	nop
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	4603      	mov	r3, r0
 80014d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ff31 	bl	8001340 <__NVIC_EnableIRQ>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff ffa2 	bl	8001438 <SysTick_Config>
 80014f4:	4603      	mov	r3, r0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b084      	sub	sp, #16
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800150c:	f7ff feda 	bl	80012c4 <HAL_GetTick>
 8001510:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d008      	beq.n	8001530 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2280      	movs	r2, #128	; 0x80
 8001522:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e052      	b.n	80015d6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 0216 	bic.w	r2, r2, #22
 800153e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	695a      	ldr	r2, [r3, #20]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800154e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001554:	2b00      	cmp	r3, #0
 8001556:	d103      	bne.n	8001560 <HAL_DMA_Abort+0x62>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800155c:	2b00      	cmp	r3, #0
 800155e:	d007      	beq.n	8001570 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f022 0208 	bic.w	r2, r2, #8
 800156e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f022 0201 	bic.w	r2, r2, #1
 800157e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001580:	e013      	b.n	80015aa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001582:	f7ff fe9f 	bl	80012c4 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b05      	cmp	r3, #5
 800158e:	d90c      	bls.n	80015aa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2220      	movs	r2, #32
 8001594:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2203      	movs	r2, #3
 800159a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e015      	b.n	80015d6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1e4      	bne.n	8001582 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015bc:	223f      	movs	r2, #63	; 0x3f
 80015be:	409a      	lsls	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d004      	beq.n	80015fc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2280      	movs	r2, #128	; 0x80
 80015f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e00c      	b.n	8001616 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2205      	movs	r2, #5
 8001600:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f022 0201 	bic.w	r2, r2, #1
 8001612:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
	...

08001624 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001624:	b480      	push	{r7}
 8001626:	b089      	sub	sp, #36	; 0x24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800163a:	2300      	movs	r3, #0
 800163c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]
 8001642:	e175      	b.n	8001930 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001644:	2201      	movs	r2, #1
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	4013      	ands	r3, r2
 8001656:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	429a      	cmp	r2, r3
 800165e:	f040 8164 	bne.w	800192a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f003 0303 	and.w	r3, r3, #3
 800166a:	2b01      	cmp	r3, #1
 800166c:	d005      	beq.n	800167a <HAL_GPIO_Init+0x56>
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f003 0303 	and.w	r3, r3, #3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d130      	bne.n	80016dc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	2203      	movs	r2, #3
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43db      	mvns	r3, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4013      	ands	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	68da      	ldr	r2, [r3, #12]
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016b0:	2201      	movs	r2, #1
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4013      	ands	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	091b      	lsrs	r3, r3, #4
 80016c6:	f003 0201 	and.w	r2, r3, #1
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 0303 	and.w	r3, r3, #3
 80016e4:	2b03      	cmp	r3, #3
 80016e6:	d017      	beq.n	8001718 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	2203      	movs	r2, #3
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4013      	ands	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4313      	orrs	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 0303 	and.w	r3, r3, #3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d123      	bne.n	800176c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	08da      	lsrs	r2, r3, #3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3208      	adds	r2, #8
 800172c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	220f      	movs	r2, #15
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	691a      	ldr	r2, [r3, #16]
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4313      	orrs	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	08da      	lsrs	r2, r3, #3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3208      	adds	r2, #8
 8001766:	69b9      	ldr	r1, [r7, #24]
 8001768:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	2203      	movs	r2, #3
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 0203 	and.w	r2, r3, #3
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4313      	orrs	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f000 80be 	beq.w	800192a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ae:	4b66      	ldr	r3, [pc, #408]	; (8001948 <HAL_GPIO_Init+0x324>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	4a65      	ldr	r2, [pc, #404]	; (8001948 <HAL_GPIO_Init+0x324>)
 80017b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ba:	4b63      	ldr	r3, [pc, #396]	; (8001948 <HAL_GPIO_Init+0x324>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80017c6:	4a61      	ldr	r2, [pc, #388]	; (800194c <HAL_GPIO_Init+0x328>)
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	089b      	lsrs	r3, r3, #2
 80017cc:	3302      	adds	r3, #2
 80017ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	220f      	movs	r2, #15
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4013      	ands	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a58      	ldr	r2, [pc, #352]	; (8001950 <HAL_GPIO_Init+0x32c>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d037      	beq.n	8001862 <HAL_GPIO_Init+0x23e>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a57      	ldr	r2, [pc, #348]	; (8001954 <HAL_GPIO_Init+0x330>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d031      	beq.n	800185e <HAL_GPIO_Init+0x23a>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a56      	ldr	r2, [pc, #344]	; (8001958 <HAL_GPIO_Init+0x334>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d02b      	beq.n	800185a <HAL_GPIO_Init+0x236>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a55      	ldr	r2, [pc, #340]	; (800195c <HAL_GPIO_Init+0x338>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d025      	beq.n	8001856 <HAL_GPIO_Init+0x232>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a54      	ldr	r2, [pc, #336]	; (8001960 <HAL_GPIO_Init+0x33c>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d01f      	beq.n	8001852 <HAL_GPIO_Init+0x22e>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a53      	ldr	r2, [pc, #332]	; (8001964 <HAL_GPIO_Init+0x340>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d019      	beq.n	800184e <HAL_GPIO_Init+0x22a>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a52      	ldr	r2, [pc, #328]	; (8001968 <HAL_GPIO_Init+0x344>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d013      	beq.n	800184a <HAL_GPIO_Init+0x226>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a51      	ldr	r2, [pc, #324]	; (800196c <HAL_GPIO_Init+0x348>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d00d      	beq.n	8001846 <HAL_GPIO_Init+0x222>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a50      	ldr	r2, [pc, #320]	; (8001970 <HAL_GPIO_Init+0x34c>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d007      	beq.n	8001842 <HAL_GPIO_Init+0x21e>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a4f      	ldr	r2, [pc, #316]	; (8001974 <HAL_GPIO_Init+0x350>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d101      	bne.n	800183e <HAL_GPIO_Init+0x21a>
 800183a:	2309      	movs	r3, #9
 800183c:	e012      	b.n	8001864 <HAL_GPIO_Init+0x240>
 800183e:	230a      	movs	r3, #10
 8001840:	e010      	b.n	8001864 <HAL_GPIO_Init+0x240>
 8001842:	2308      	movs	r3, #8
 8001844:	e00e      	b.n	8001864 <HAL_GPIO_Init+0x240>
 8001846:	2307      	movs	r3, #7
 8001848:	e00c      	b.n	8001864 <HAL_GPIO_Init+0x240>
 800184a:	2306      	movs	r3, #6
 800184c:	e00a      	b.n	8001864 <HAL_GPIO_Init+0x240>
 800184e:	2305      	movs	r3, #5
 8001850:	e008      	b.n	8001864 <HAL_GPIO_Init+0x240>
 8001852:	2304      	movs	r3, #4
 8001854:	e006      	b.n	8001864 <HAL_GPIO_Init+0x240>
 8001856:	2303      	movs	r3, #3
 8001858:	e004      	b.n	8001864 <HAL_GPIO_Init+0x240>
 800185a:	2302      	movs	r3, #2
 800185c:	e002      	b.n	8001864 <HAL_GPIO_Init+0x240>
 800185e:	2301      	movs	r3, #1
 8001860:	e000      	b.n	8001864 <HAL_GPIO_Init+0x240>
 8001862:	2300      	movs	r3, #0
 8001864:	69fa      	ldr	r2, [r7, #28]
 8001866:	f002 0203 	and.w	r2, r2, #3
 800186a:	0092      	lsls	r2, r2, #2
 800186c:	4093      	lsls	r3, r2
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4313      	orrs	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001874:	4935      	ldr	r1, [pc, #212]	; (800194c <HAL_GPIO_Init+0x328>)
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	089b      	lsrs	r3, r3, #2
 800187a:	3302      	adds	r3, #2
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001882:	4b3d      	ldr	r3, [pc, #244]	; (8001978 <HAL_GPIO_Init+0x354>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	43db      	mvns	r3, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4013      	ands	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018a6:	4a34      	ldr	r2, [pc, #208]	; (8001978 <HAL_GPIO_Init+0x354>)
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018ac:	4b32      	ldr	r3, [pc, #200]	; (8001978 <HAL_GPIO_Init+0x354>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018d0:	4a29      	ldr	r2, [pc, #164]	; (8001978 <HAL_GPIO_Init+0x354>)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018d6:	4b28      	ldr	r3, [pc, #160]	; (8001978 <HAL_GPIO_Init+0x354>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	43db      	mvns	r3, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4013      	ands	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018fa:	4a1f      	ldr	r2, [pc, #124]	; (8001978 <HAL_GPIO_Init+0x354>)
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001900:	4b1d      	ldr	r3, [pc, #116]	; (8001978 <HAL_GPIO_Init+0x354>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001924:	4a14      	ldr	r2, [pc, #80]	; (8001978 <HAL_GPIO_Init+0x354>)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3301      	adds	r3, #1
 800192e:	61fb      	str	r3, [r7, #28]
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	2b0f      	cmp	r3, #15
 8001934:	f67f ae86 	bls.w	8001644 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001938:	bf00      	nop
 800193a:	bf00      	nop
 800193c:	3724      	adds	r7, #36	; 0x24
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800
 800194c:	40013800 	.word	0x40013800
 8001950:	40020000 	.word	0x40020000
 8001954:	40020400 	.word	0x40020400
 8001958:	40020800 	.word	0x40020800
 800195c:	40020c00 	.word	0x40020c00
 8001960:	40021000 	.word	0x40021000
 8001964:	40021400 	.word	0x40021400
 8001968:	40021800 	.word	0x40021800
 800196c:	40021c00 	.word	0x40021c00
 8001970:	40022000 	.word	0x40022000
 8001974:	40022400 	.word	0x40022400
 8001978:	40013c00 	.word	0x40013c00

0800197c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001986:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001988:	695a      	ldr	r2, [r3, #20]
 800198a:	88fb      	ldrh	r3, [r7, #6]
 800198c:	4013      	ands	r3, r2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d006      	beq.n	80019a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001992:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001994:	88fb      	ldrh	r3, [r7, #6]
 8001996:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001998:	88fb      	ldrh	r3, [r7, #6]
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff f8d2 	bl	8000b44 <HAL_GPIO_EXTI_Callback>
  }
}
 80019a0:	bf00      	nop
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40013c00 	.word	0x40013c00

080019ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80019b6:	4b23      	ldr	r3, [pc, #140]	; (8001a44 <HAL_PWREx_EnableOverDrive+0x98>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	4a22      	ldr	r2, [pc, #136]	; (8001a44 <HAL_PWREx_EnableOverDrive+0x98>)
 80019bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c0:	6413      	str	r3, [r2, #64]	; 0x40
 80019c2:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <HAL_PWREx_EnableOverDrive+0x98>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ca:	603b      	str	r3, [r7, #0]
 80019cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80019ce:	4b1e      	ldr	r3, [pc, #120]	; (8001a48 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a1d      	ldr	r2, [pc, #116]	; (8001a48 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019da:	f7ff fc73 	bl	80012c4 <HAL_GetTick>
 80019de:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80019e0:	e009      	b.n	80019f6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80019e2:	f7ff fc6f 	bl	80012c4 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019f0:	d901      	bls.n	80019f6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e022      	b.n	8001a3c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80019f6:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a02:	d1ee      	bne.n	80019e2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001a04:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a0f      	ldr	r2, [pc, #60]	; (8001a48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a0e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a10:	f7ff fc58 	bl	80012c4 <HAL_GetTick>
 8001a14:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a16:	e009      	b.n	8001a2c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a18:	f7ff fc54 	bl	80012c4 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a26:	d901      	bls.n	8001a2c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e007      	b.n	8001a3c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a38:	d1ee      	bne.n	8001a18 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40007000 	.word	0x40007000

08001a4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001a54:	2300      	movs	r3, #0
 8001a56:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e29b      	b.n	8001f9a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 8087 	beq.w	8001b7e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a70:	4b96      	ldr	r3, [pc, #600]	; (8001ccc <HAL_RCC_OscConfig+0x280>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 030c 	and.w	r3, r3, #12
 8001a78:	2b04      	cmp	r3, #4
 8001a7a:	d00c      	beq.n	8001a96 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a7c:	4b93      	ldr	r3, [pc, #588]	; (8001ccc <HAL_RCC_OscConfig+0x280>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f003 030c 	and.w	r3, r3, #12
 8001a84:	2b08      	cmp	r3, #8
 8001a86:	d112      	bne.n	8001aae <HAL_RCC_OscConfig+0x62>
 8001a88:	4b90      	ldr	r3, [pc, #576]	; (8001ccc <HAL_RCC_OscConfig+0x280>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a94:	d10b      	bne.n	8001aae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a96:	4b8d      	ldr	r3, [pc, #564]	; (8001ccc <HAL_RCC_OscConfig+0x280>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d06c      	beq.n	8001b7c <HAL_RCC_OscConfig+0x130>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d168      	bne.n	8001b7c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e275      	b.n	8001f9a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab6:	d106      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x7a>
 8001ab8:	4b84      	ldr	r3, [pc, #528]	; (8001ccc <HAL_RCC_OscConfig+0x280>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a83      	ldr	r2, [pc, #524]	; (8001ccc <HAL_RCC_OscConfig+0x280>)
 8001abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	e02e      	b.n	8001b24 <HAL_RCC_OscConfig+0xd8>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10c      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x9c>
 8001ace:	4b7f      	ldr	r3, [pc, #508]	; (8001ccc <HAL_RCC_OscConfig+0x280>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a7e      	ldr	r2, [pc, #504]	; (8001ccc <HAL_RCC_OscConfig+0x280>)
 8001ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	4b7c      	ldr	r3, [pc, #496]	; (8001ccc <HAL_RCC_OscConfig+0x280>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a7b      	ldr	r2, [pc, #492]	; (8001ccc <HAL_RCC_OscConfig+0x280>)
 8001ae0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	e01d      	b.n	8001b24 <HAL_RCC_OscConfig+0xd8>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001af0:	d10c      	bne.n	8001b0c <HAL_RCC_OscConfig+0xc0>
 8001af2:	4b76      	ldr	r3, [pc, #472]	; (8001ccc <HAL_RCC_OscConfig+0x280>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a75      	ldr	r2, [pc, #468]	; (8001ccc <HAL_RCC_OscConfig+0x280>)
 8001af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	4b73      	ldr	r3, [pc, #460]	; (8001ccc <HAL_RCC_OscConfig+0x280>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a72      	ldr	r2, [pc, #456]	; (8001ccc <HAL_RCC_OscConfig+0x280>)
 8001b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	e00b      	b.n	8001b24 <HAL_RCC_OscConfig+0xd8>
 8001b0c:	4b6f      	ldr	r3, [pc, #444]	; (8001ccc <HAL_RCC_OscConfig+0x280>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a6e      	ldr	r2, [pc, #440]	; (8001ccc <HAL_RCC_OscConfig+0x280>)
 8001b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	4b6c      	ldr	r3, [pc, #432]	; (8001ccc <HAL_RCC_OscConfig+0x280>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a6b      	ldr	r2, [pc, #428]	; (8001ccc <HAL_RCC_OscConfig+0x280>)
 8001b1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d013      	beq.n	8001b54 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2c:	f7ff fbca 	bl	80012c4 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b34:	f7ff fbc6 	bl	80012c4 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b64      	cmp	r3, #100	; 0x64
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e229      	b.n	8001f9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b46:	4b61      	ldr	r3, [pc, #388]	; (8001ccc <HAL_RCC_OscConfig+0x280>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f0      	beq.n	8001b34 <HAL_RCC_OscConfig+0xe8>
 8001b52:	e014      	b.n	8001b7e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b54:	f7ff fbb6 	bl	80012c4 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b5c:	f7ff fbb2 	bl	80012c4 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b64      	cmp	r3, #100	; 0x64
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e215      	b.n	8001f9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b6e:	4b57      	ldr	r3, [pc, #348]	; (8001ccc <HAL_RCC_OscConfig+0x280>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f0      	bne.n	8001b5c <HAL_RCC_OscConfig+0x110>
 8001b7a:	e000      	b.n	8001b7e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d069      	beq.n	8001c5e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b8a:	4b50      	ldr	r3, [pc, #320]	; (8001ccc <HAL_RCC_OscConfig+0x280>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00b      	beq.n	8001bae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b96:	4b4d      	ldr	r3, [pc, #308]	; (8001ccc <HAL_RCC_OscConfig+0x280>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d11c      	bne.n	8001bdc <HAL_RCC_OscConfig+0x190>
 8001ba2:	4b4a      	ldr	r3, [pc, #296]	; (8001ccc <HAL_RCC_OscConfig+0x280>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d116      	bne.n	8001bdc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bae:	4b47      	ldr	r3, [pc, #284]	; (8001ccc <HAL_RCC_OscConfig+0x280>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d005      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x17a>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d001      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e1e9      	b.n	8001f9a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc6:	4b41      	ldr	r3, [pc, #260]	; (8001ccc <HAL_RCC_OscConfig+0x280>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	493d      	ldr	r1, [pc, #244]	; (8001ccc <HAL_RCC_OscConfig+0x280>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bda:	e040      	b.n	8001c5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d023      	beq.n	8001c2c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001be4:	4b39      	ldr	r3, [pc, #228]	; (8001ccc <HAL_RCC_OscConfig+0x280>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a38      	ldr	r2, [pc, #224]	; (8001ccc <HAL_RCC_OscConfig+0x280>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf0:	f7ff fb68 	bl	80012c4 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bf8:	f7ff fb64 	bl	80012c4 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e1c7      	b.n	8001f9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0a:	4b30      	ldr	r3, [pc, #192]	; (8001ccc <HAL_RCC_OscConfig+0x280>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d0f0      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c16:	4b2d      	ldr	r3, [pc, #180]	; (8001ccc <HAL_RCC_OscConfig+0x280>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	4929      	ldr	r1, [pc, #164]	; (8001ccc <HAL_RCC_OscConfig+0x280>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	600b      	str	r3, [r1, #0]
 8001c2a:	e018      	b.n	8001c5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c2c:	4b27      	ldr	r3, [pc, #156]	; (8001ccc <HAL_RCC_OscConfig+0x280>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a26      	ldr	r2, [pc, #152]	; (8001ccc <HAL_RCC_OscConfig+0x280>)
 8001c32:	f023 0301 	bic.w	r3, r3, #1
 8001c36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c38:	f7ff fb44 	bl	80012c4 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c40:	f7ff fb40 	bl	80012c4 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e1a3      	b.n	8001f9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c52:	4b1e      	ldr	r3, [pc, #120]	; (8001ccc <HAL_RCC_OscConfig+0x280>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f0      	bne.n	8001c40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0308 	and.w	r3, r3, #8
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d038      	beq.n	8001cdc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d019      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c72:	4b16      	ldr	r3, [pc, #88]	; (8001ccc <HAL_RCC_OscConfig+0x280>)
 8001c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c76:	4a15      	ldr	r2, [pc, #84]	; (8001ccc <HAL_RCC_OscConfig+0x280>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7e:	f7ff fb21 	bl	80012c4 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c86:	f7ff fb1d 	bl	80012c4 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e180      	b.n	8001f9a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c98:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <HAL_RCC_OscConfig+0x280>)
 8001c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0f0      	beq.n	8001c86 <HAL_RCC_OscConfig+0x23a>
 8001ca4:	e01a      	b.n	8001cdc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ca6:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <HAL_RCC_OscConfig+0x280>)
 8001ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001caa:	4a08      	ldr	r2, [pc, #32]	; (8001ccc <HAL_RCC_OscConfig+0x280>)
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb2:	f7ff fb07 	bl	80012c4 <HAL_GetTick>
 8001cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cb8:	e00a      	b.n	8001cd0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cba:	f7ff fb03 	bl	80012c4 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d903      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e166      	b.n	8001f9a <HAL_RCC_OscConfig+0x54e>
 8001ccc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd0:	4b92      	ldr	r3, [pc, #584]	; (8001f1c <HAL_RCC_OscConfig+0x4d0>)
 8001cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1ee      	bne.n	8001cba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 80a4 	beq.w	8001e32 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cea:	4b8c      	ldr	r3, [pc, #560]	; (8001f1c <HAL_RCC_OscConfig+0x4d0>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d10d      	bne.n	8001d12 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cf6:	4b89      	ldr	r3, [pc, #548]	; (8001f1c <HAL_RCC_OscConfig+0x4d0>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	4a88      	ldr	r2, [pc, #544]	; (8001f1c <HAL_RCC_OscConfig+0x4d0>)
 8001cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d00:	6413      	str	r3, [r2, #64]	; 0x40
 8001d02:	4b86      	ldr	r3, [pc, #536]	; (8001f1c <HAL_RCC_OscConfig+0x4d0>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d12:	4b83      	ldr	r3, [pc, #524]	; (8001f20 <HAL_RCC_OscConfig+0x4d4>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d118      	bne.n	8001d50 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001d1e:	4b80      	ldr	r3, [pc, #512]	; (8001f20 <HAL_RCC_OscConfig+0x4d4>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a7f      	ldr	r2, [pc, #508]	; (8001f20 <HAL_RCC_OscConfig+0x4d4>)
 8001d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d2a:	f7ff facb 	bl	80012c4 <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d32:	f7ff fac7 	bl	80012c4 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b64      	cmp	r3, #100	; 0x64
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e12a      	b.n	8001f9a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d44:	4b76      	ldr	r3, [pc, #472]	; (8001f20 <HAL_RCC_OscConfig+0x4d4>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d0f0      	beq.n	8001d32 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d106      	bne.n	8001d66 <HAL_RCC_OscConfig+0x31a>
 8001d58:	4b70      	ldr	r3, [pc, #448]	; (8001f1c <HAL_RCC_OscConfig+0x4d0>)
 8001d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5c:	4a6f      	ldr	r2, [pc, #444]	; (8001f1c <HAL_RCC_OscConfig+0x4d0>)
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	6713      	str	r3, [r2, #112]	; 0x70
 8001d64:	e02d      	b.n	8001dc2 <HAL_RCC_OscConfig+0x376>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10c      	bne.n	8001d88 <HAL_RCC_OscConfig+0x33c>
 8001d6e:	4b6b      	ldr	r3, [pc, #428]	; (8001f1c <HAL_RCC_OscConfig+0x4d0>)
 8001d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d72:	4a6a      	ldr	r2, [pc, #424]	; (8001f1c <HAL_RCC_OscConfig+0x4d0>)
 8001d74:	f023 0301 	bic.w	r3, r3, #1
 8001d78:	6713      	str	r3, [r2, #112]	; 0x70
 8001d7a:	4b68      	ldr	r3, [pc, #416]	; (8001f1c <HAL_RCC_OscConfig+0x4d0>)
 8001d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7e:	4a67      	ldr	r2, [pc, #412]	; (8001f1c <HAL_RCC_OscConfig+0x4d0>)
 8001d80:	f023 0304 	bic.w	r3, r3, #4
 8001d84:	6713      	str	r3, [r2, #112]	; 0x70
 8001d86:	e01c      	b.n	8001dc2 <HAL_RCC_OscConfig+0x376>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	2b05      	cmp	r3, #5
 8001d8e:	d10c      	bne.n	8001daa <HAL_RCC_OscConfig+0x35e>
 8001d90:	4b62      	ldr	r3, [pc, #392]	; (8001f1c <HAL_RCC_OscConfig+0x4d0>)
 8001d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d94:	4a61      	ldr	r2, [pc, #388]	; (8001f1c <HAL_RCC_OscConfig+0x4d0>)
 8001d96:	f043 0304 	orr.w	r3, r3, #4
 8001d9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d9c:	4b5f      	ldr	r3, [pc, #380]	; (8001f1c <HAL_RCC_OscConfig+0x4d0>)
 8001d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da0:	4a5e      	ldr	r2, [pc, #376]	; (8001f1c <HAL_RCC_OscConfig+0x4d0>)
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	6713      	str	r3, [r2, #112]	; 0x70
 8001da8:	e00b      	b.n	8001dc2 <HAL_RCC_OscConfig+0x376>
 8001daa:	4b5c      	ldr	r3, [pc, #368]	; (8001f1c <HAL_RCC_OscConfig+0x4d0>)
 8001dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dae:	4a5b      	ldr	r2, [pc, #364]	; (8001f1c <HAL_RCC_OscConfig+0x4d0>)
 8001db0:	f023 0301 	bic.w	r3, r3, #1
 8001db4:	6713      	str	r3, [r2, #112]	; 0x70
 8001db6:	4b59      	ldr	r3, [pc, #356]	; (8001f1c <HAL_RCC_OscConfig+0x4d0>)
 8001db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dba:	4a58      	ldr	r2, [pc, #352]	; (8001f1c <HAL_RCC_OscConfig+0x4d0>)
 8001dbc:	f023 0304 	bic.w	r3, r3, #4
 8001dc0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d015      	beq.n	8001df6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dca:	f7ff fa7b 	bl	80012c4 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd0:	e00a      	b.n	8001de8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd2:	f7ff fa77 	bl	80012c4 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e0d8      	b.n	8001f9a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de8:	4b4c      	ldr	r3, [pc, #304]	; (8001f1c <HAL_RCC_OscConfig+0x4d0>)
 8001dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d0ee      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x386>
 8001df4:	e014      	b.n	8001e20 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df6:	f7ff fa65 	bl	80012c4 <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dfc:	e00a      	b.n	8001e14 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dfe:	f7ff fa61 	bl	80012c4 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e0c2      	b.n	8001f9a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e14:	4b41      	ldr	r3, [pc, #260]	; (8001f1c <HAL_RCC_OscConfig+0x4d0>)
 8001e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1ee      	bne.n	8001dfe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e20:	7dfb      	ldrb	r3, [r7, #23]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d105      	bne.n	8001e32 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e26:	4b3d      	ldr	r3, [pc, #244]	; (8001f1c <HAL_RCC_OscConfig+0x4d0>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	4a3c      	ldr	r2, [pc, #240]	; (8001f1c <HAL_RCC_OscConfig+0x4d0>)
 8001e2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 80ae 	beq.w	8001f98 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e3c:	4b37      	ldr	r3, [pc, #220]	; (8001f1c <HAL_RCC_OscConfig+0x4d0>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 030c 	and.w	r3, r3, #12
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d06d      	beq.n	8001f24 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d14b      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e50:	4b32      	ldr	r3, [pc, #200]	; (8001f1c <HAL_RCC_OscConfig+0x4d0>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a31      	ldr	r2, [pc, #196]	; (8001f1c <HAL_RCC_OscConfig+0x4d0>)
 8001e56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5c:	f7ff fa32 	bl	80012c4 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e64:	f7ff fa2e 	bl	80012c4 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e091      	b.n	8001f9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e76:	4b29      	ldr	r3, [pc, #164]	; (8001f1c <HAL_RCC_OscConfig+0x4d0>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f0      	bne.n	8001e64 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69da      	ldr	r2, [r3, #28]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a1b      	ldr	r3, [r3, #32]
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e90:	019b      	lsls	r3, r3, #6
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e98:	085b      	lsrs	r3, r3, #1
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	041b      	lsls	r3, r3, #16
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea4:	061b      	lsls	r3, r3, #24
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	071b      	lsls	r3, r3, #28
 8001eae:	491b      	ldr	r1, [pc, #108]	; (8001f1c <HAL_RCC_OscConfig+0x4d0>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eb4:	4b19      	ldr	r3, [pc, #100]	; (8001f1c <HAL_RCC_OscConfig+0x4d0>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a18      	ldr	r2, [pc, #96]	; (8001f1c <HAL_RCC_OscConfig+0x4d0>)
 8001eba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec0:	f7ff fa00 	bl	80012c4 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec8:	f7ff f9fc 	bl	80012c4 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e05f      	b.n	8001f9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eda:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <HAL_RCC_OscConfig+0x4d0>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0f0      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x47c>
 8001ee6:	e057      	b.n	8001f98 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <HAL_RCC_OscConfig+0x4d0>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a0b      	ldr	r2, [pc, #44]	; (8001f1c <HAL_RCC_OscConfig+0x4d0>)
 8001eee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ef2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef4:	f7ff f9e6 	bl	80012c4 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001efc:	f7ff f9e2 	bl	80012c4 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e045      	b.n	8001f9a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f0e:	4b03      	ldr	r3, [pc, #12]	; (8001f1c <HAL_RCC_OscConfig+0x4d0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f0      	bne.n	8001efc <HAL_RCC_OscConfig+0x4b0>
 8001f1a:	e03d      	b.n	8001f98 <HAL_RCC_OscConfig+0x54c>
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001f24:	4b1f      	ldr	r3, [pc, #124]	; (8001fa4 <HAL_RCC_OscConfig+0x558>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d030      	beq.n	8001f94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d129      	bne.n	8001f94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d122      	bne.n	8001f94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f54:	4013      	ands	r3, r2
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f5a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d119      	bne.n	8001f94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6a:	085b      	lsrs	r3, r3, #1
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d10f      	bne.n	8001f94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d107      	bne.n	8001f94 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d001      	beq.n	8001f98 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e000      	b.n	8001f9a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3718      	adds	r7, #24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800

08001fa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e0d0      	b.n	8002162 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fc0:	4b6a      	ldr	r3, [pc, #424]	; (800216c <HAL_RCC_ClockConfig+0x1c4>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 030f 	and.w	r3, r3, #15
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d910      	bls.n	8001ff0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fce:	4b67      	ldr	r3, [pc, #412]	; (800216c <HAL_RCC_ClockConfig+0x1c4>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f023 020f 	bic.w	r2, r3, #15
 8001fd6:	4965      	ldr	r1, [pc, #404]	; (800216c <HAL_RCC_ClockConfig+0x1c4>)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fde:	4b63      	ldr	r3, [pc, #396]	; (800216c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d001      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e0b8      	b.n	8002162 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d020      	beq.n	800203e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b00      	cmp	r3, #0
 8002006:	d005      	beq.n	8002014 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002008:	4b59      	ldr	r3, [pc, #356]	; (8002170 <HAL_RCC_ClockConfig+0x1c8>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	4a58      	ldr	r2, [pc, #352]	; (8002170 <HAL_RCC_ClockConfig+0x1c8>)
 800200e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002012:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0308 	and.w	r3, r3, #8
 800201c:	2b00      	cmp	r3, #0
 800201e:	d005      	beq.n	800202c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002020:	4b53      	ldr	r3, [pc, #332]	; (8002170 <HAL_RCC_ClockConfig+0x1c8>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	4a52      	ldr	r2, [pc, #328]	; (8002170 <HAL_RCC_ClockConfig+0x1c8>)
 8002026:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800202a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800202c:	4b50      	ldr	r3, [pc, #320]	; (8002170 <HAL_RCC_ClockConfig+0x1c8>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	494d      	ldr	r1, [pc, #308]	; (8002170 <HAL_RCC_ClockConfig+0x1c8>)
 800203a:	4313      	orrs	r3, r2
 800203c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d040      	beq.n	80020cc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d107      	bne.n	8002062 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002052:	4b47      	ldr	r3, [pc, #284]	; (8002170 <HAL_RCC_ClockConfig+0x1c8>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d115      	bne.n	800208a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e07f      	b.n	8002162 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b02      	cmp	r3, #2
 8002068:	d107      	bne.n	800207a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800206a:	4b41      	ldr	r3, [pc, #260]	; (8002170 <HAL_RCC_ClockConfig+0x1c8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d109      	bne.n	800208a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e073      	b.n	8002162 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207a:	4b3d      	ldr	r3, [pc, #244]	; (8002170 <HAL_RCC_ClockConfig+0x1c8>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e06b      	b.n	8002162 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800208a:	4b39      	ldr	r3, [pc, #228]	; (8002170 <HAL_RCC_ClockConfig+0x1c8>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f023 0203 	bic.w	r2, r3, #3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	4936      	ldr	r1, [pc, #216]	; (8002170 <HAL_RCC_ClockConfig+0x1c8>)
 8002098:	4313      	orrs	r3, r2
 800209a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800209c:	f7ff f912 	bl	80012c4 <HAL_GetTick>
 80020a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a2:	e00a      	b.n	80020ba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a4:	f7ff f90e 	bl	80012c4 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e053      	b.n	8002162 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ba:	4b2d      	ldr	r3, [pc, #180]	; (8002170 <HAL_RCC_ClockConfig+0x1c8>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 020c 	and.w	r2, r3, #12
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d1eb      	bne.n	80020a4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020cc:	4b27      	ldr	r3, [pc, #156]	; (800216c <HAL_RCC_ClockConfig+0x1c4>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 030f 	and.w	r3, r3, #15
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d210      	bcs.n	80020fc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020da:	4b24      	ldr	r3, [pc, #144]	; (800216c <HAL_RCC_ClockConfig+0x1c4>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f023 020f 	bic.w	r2, r3, #15
 80020e2:	4922      	ldr	r1, [pc, #136]	; (800216c <HAL_RCC_ClockConfig+0x1c4>)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ea:	4b20      	ldr	r3, [pc, #128]	; (800216c <HAL_RCC_ClockConfig+0x1c4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d001      	beq.n	80020fc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e032      	b.n	8002162 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b00      	cmp	r3, #0
 8002106:	d008      	beq.n	800211a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002108:	4b19      	ldr	r3, [pc, #100]	; (8002170 <HAL_RCC_ClockConfig+0x1c8>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	4916      	ldr	r1, [pc, #88]	; (8002170 <HAL_RCC_ClockConfig+0x1c8>)
 8002116:	4313      	orrs	r3, r2
 8002118:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0308 	and.w	r3, r3, #8
 8002122:	2b00      	cmp	r3, #0
 8002124:	d009      	beq.n	800213a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002126:	4b12      	ldr	r3, [pc, #72]	; (8002170 <HAL_RCC_ClockConfig+0x1c8>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	490e      	ldr	r1, [pc, #56]	; (8002170 <HAL_RCC_ClockConfig+0x1c8>)
 8002136:	4313      	orrs	r3, r2
 8002138:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800213a:	f000 f821 	bl	8002180 <HAL_RCC_GetSysClockFreq>
 800213e:	4602      	mov	r2, r0
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <HAL_RCC_ClockConfig+0x1c8>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	091b      	lsrs	r3, r3, #4
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	490a      	ldr	r1, [pc, #40]	; (8002174 <HAL_RCC_ClockConfig+0x1cc>)
 800214c:	5ccb      	ldrb	r3, [r1, r3]
 800214e:	fa22 f303 	lsr.w	r3, r2, r3
 8002152:	4a09      	ldr	r2, [pc, #36]	; (8002178 <HAL_RCC_ClockConfig+0x1d0>)
 8002154:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002156:	4b09      	ldr	r3, [pc, #36]	; (800217c <HAL_RCC_ClockConfig+0x1d4>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff f86e 	bl	800123c <HAL_InitTick>

  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40023c00 	.word	0x40023c00
 8002170:	40023800 	.word	0x40023800
 8002174:	080061b8 	.word	0x080061b8
 8002178:	20000000 	.word	0x20000000
 800217c:	20000004 	.word	0x20000004

08002180 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002184:	b094      	sub	sp, #80	; 0x50
 8002186:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	647b      	str	r3, [r7, #68]	; 0x44
 800218c:	2300      	movs	r3, #0
 800218e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002190:	2300      	movs	r3, #0
 8002192:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002198:	4b79      	ldr	r3, [pc, #484]	; (8002380 <HAL_RCC_GetSysClockFreq+0x200>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f003 030c 	and.w	r3, r3, #12
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	d00d      	beq.n	80021c0 <HAL_RCC_GetSysClockFreq+0x40>
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	f200 80e1 	bhi.w	800236c <HAL_RCC_GetSysClockFreq+0x1ec>
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d002      	beq.n	80021b4 <HAL_RCC_GetSysClockFreq+0x34>
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	d003      	beq.n	80021ba <HAL_RCC_GetSysClockFreq+0x3a>
 80021b2:	e0db      	b.n	800236c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021b4:	4b73      	ldr	r3, [pc, #460]	; (8002384 <HAL_RCC_GetSysClockFreq+0x204>)
 80021b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021b8:	e0db      	b.n	8002372 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021ba:	4b73      	ldr	r3, [pc, #460]	; (8002388 <HAL_RCC_GetSysClockFreq+0x208>)
 80021bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021be:	e0d8      	b.n	8002372 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021c0:	4b6f      	ldr	r3, [pc, #444]	; (8002380 <HAL_RCC_GetSysClockFreq+0x200>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021c8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80021ca:	4b6d      	ldr	r3, [pc, #436]	; (8002380 <HAL_RCC_GetSysClockFreq+0x200>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d063      	beq.n	800229e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021d6:	4b6a      	ldr	r3, [pc, #424]	; (8002380 <HAL_RCC_GetSysClockFreq+0x200>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	099b      	lsrs	r3, r3, #6
 80021dc:	2200      	movs	r2, #0
 80021de:	63bb      	str	r3, [r7, #56]	; 0x38
 80021e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80021e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021e8:	633b      	str	r3, [r7, #48]	; 0x30
 80021ea:	2300      	movs	r3, #0
 80021ec:	637b      	str	r3, [r7, #52]	; 0x34
 80021ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80021f2:	4622      	mov	r2, r4
 80021f4:	462b      	mov	r3, r5
 80021f6:	f04f 0000 	mov.w	r0, #0
 80021fa:	f04f 0100 	mov.w	r1, #0
 80021fe:	0159      	lsls	r1, r3, #5
 8002200:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002204:	0150      	lsls	r0, r2, #5
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	4621      	mov	r1, r4
 800220c:	1a51      	subs	r1, r2, r1
 800220e:	6139      	str	r1, [r7, #16]
 8002210:	4629      	mov	r1, r5
 8002212:	eb63 0301 	sbc.w	r3, r3, r1
 8002216:	617b      	str	r3, [r7, #20]
 8002218:	f04f 0200 	mov.w	r2, #0
 800221c:	f04f 0300 	mov.w	r3, #0
 8002220:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002224:	4659      	mov	r1, fp
 8002226:	018b      	lsls	r3, r1, #6
 8002228:	4651      	mov	r1, sl
 800222a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800222e:	4651      	mov	r1, sl
 8002230:	018a      	lsls	r2, r1, #6
 8002232:	4651      	mov	r1, sl
 8002234:	ebb2 0801 	subs.w	r8, r2, r1
 8002238:	4659      	mov	r1, fp
 800223a:	eb63 0901 	sbc.w	r9, r3, r1
 800223e:	f04f 0200 	mov.w	r2, #0
 8002242:	f04f 0300 	mov.w	r3, #0
 8002246:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800224a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800224e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002252:	4690      	mov	r8, r2
 8002254:	4699      	mov	r9, r3
 8002256:	4623      	mov	r3, r4
 8002258:	eb18 0303 	adds.w	r3, r8, r3
 800225c:	60bb      	str	r3, [r7, #8]
 800225e:	462b      	mov	r3, r5
 8002260:	eb49 0303 	adc.w	r3, r9, r3
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	f04f 0200 	mov.w	r2, #0
 800226a:	f04f 0300 	mov.w	r3, #0
 800226e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002272:	4629      	mov	r1, r5
 8002274:	024b      	lsls	r3, r1, #9
 8002276:	4621      	mov	r1, r4
 8002278:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800227c:	4621      	mov	r1, r4
 800227e:	024a      	lsls	r2, r1, #9
 8002280:	4610      	mov	r0, r2
 8002282:	4619      	mov	r1, r3
 8002284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002286:	2200      	movs	r2, #0
 8002288:	62bb      	str	r3, [r7, #40]	; 0x28
 800228a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800228c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002290:	f7fd ffda 	bl	8000248 <__aeabi_uldivmod>
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	4613      	mov	r3, r2
 800229a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800229c:	e058      	b.n	8002350 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800229e:	4b38      	ldr	r3, [pc, #224]	; (8002380 <HAL_RCC_GetSysClockFreq+0x200>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	099b      	lsrs	r3, r3, #6
 80022a4:	2200      	movs	r2, #0
 80022a6:	4618      	mov	r0, r3
 80022a8:	4611      	mov	r1, r2
 80022aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022ae:	623b      	str	r3, [r7, #32]
 80022b0:	2300      	movs	r3, #0
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24
 80022b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80022b8:	4642      	mov	r2, r8
 80022ba:	464b      	mov	r3, r9
 80022bc:	f04f 0000 	mov.w	r0, #0
 80022c0:	f04f 0100 	mov.w	r1, #0
 80022c4:	0159      	lsls	r1, r3, #5
 80022c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022ca:	0150      	lsls	r0, r2, #5
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4641      	mov	r1, r8
 80022d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80022d6:	4649      	mov	r1, r9
 80022d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80022dc:	f04f 0200 	mov.w	r2, #0
 80022e0:	f04f 0300 	mov.w	r3, #0
 80022e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80022e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80022ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80022f0:	ebb2 040a 	subs.w	r4, r2, sl
 80022f4:	eb63 050b 	sbc.w	r5, r3, fp
 80022f8:	f04f 0200 	mov.w	r2, #0
 80022fc:	f04f 0300 	mov.w	r3, #0
 8002300:	00eb      	lsls	r3, r5, #3
 8002302:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002306:	00e2      	lsls	r2, r4, #3
 8002308:	4614      	mov	r4, r2
 800230a:	461d      	mov	r5, r3
 800230c:	4643      	mov	r3, r8
 800230e:	18e3      	adds	r3, r4, r3
 8002310:	603b      	str	r3, [r7, #0]
 8002312:	464b      	mov	r3, r9
 8002314:	eb45 0303 	adc.w	r3, r5, r3
 8002318:	607b      	str	r3, [r7, #4]
 800231a:	f04f 0200 	mov.w	r2, #0
 800231e:	f04f 0300 	mov.w	r3, #0
 8002322:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002326:	4629      	mov	r1, r5
 8002328:	028b      	lsls	r3, r1, #10
 800232a:	4621      	mov	r1, r4
 800232c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002330:	4621      	mov	r1, r4
 8002332:	028a      	lsls	r2, r1, #10
 8002334:	4610      	mov	r0, r2
 8002336:	4619      	mov	r1, r3
 8002338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800233a:	2200      	movs	r2, #0
 800233c:	61bb      	str	r3, [r7, #24]
 800233e:	61fa      	str	r2, [r7, #28]
 8002340:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002344:	f7fd ff80 	bl	8000248 <__aeabi_uldivmod>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4613      	mov	r3, r2
 800234e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002350:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <HAL_RCC_GetSysClockFreq+0x200>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	0c1b      	lsrs	r3, r3, #16
 8002356:	f003 0303 	and.w	r3, r3, #3
 800235a:	3301      	adds	r3, #1
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002360:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002364:	fbb2 f3f3 	udiv	r3, r2, r3
 8002368:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800236a:	e002      	b.n	8002372 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800236c:	4b05      	ldr	r3, [pc, #20]	; (8002384 <HAL_RCC_GetSysClockFreq+0x204>)
 800236e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002370:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002374:	4618      	mov	r0, r3
 8002376:	3750      	adds	r7, #80	; 0x50
 8002378:	46bd      	mov	sp, r7
 800237a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800237e:	bf00      	nop
 8002380:	40023800 	.word	0x40023800
 8002384:	00f42400 	.word	0x00f42400
 8002388:	007a1200 	.word	0x007a1200

0800238c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002390:	4b03      	ldr	r3, [pc, #12]	; (80023a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002392:	681b      	ldr	r3, [r3, #0]
}
 8002394:	4618      	mov	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20000000 	.word	0x20000000

080023a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023a8:	f7ff fff0 	bl	800238c <HAL_RCC_GetHCLKFreq>
 80023ac:	4602      	mov	r2, r0
 80023ae:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	0a9b      	lsrs	r3, r3, #10
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	4903      	ldr	r1, [pc, #12]	; (80023c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023ba:	5ccb      	ldrb	r3, [r1, r3]
 80023bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40023800 	.word	0x40023800
 80023c8:	080061c8 	.word	0x080061c8

080023cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023d0:	f7ff ffdc 	bl	800238c <HAL_RCC_GetHCLKFreq>
 80023d4:	4602      	mov	r2, r0
 80023d6:	4b05      	ldr	r3, [pc, #20]	; (80023ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	0b5b      	lsrs	r3, r3, #13
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	4903      	ldr	r1, [pc, #12]	; (80023f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023e2:	5ccb      	ldrb	r3, [r1, r3]
 80023e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40023800 	.word	0x40023800
 80023f0:	080061c8 	.word	0x080061c8

080023f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b088      	sub	sp, #32
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002400:	2300      	movs	r3, #0
 8002402:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002404:	2300      	movs	r3, #0
 8002406:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002408:	2300      	movs	r3, #0
 800240a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800240c:	2300      	movs	r3, #0
 800240e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b00      	cmp	r3, #0
 800241a:	d012      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800241c:	4b69      	ldr	r3, [pc, #420]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	4a68      	ldr	r2, [pc, #416]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002422:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002426:	6093      	str	r3, [r2, #8]
 8002428:	4b66      	ldr	r3, [pc, #408]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002430:	4964      	ldr	r1, [pc, #400]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002432:	4313      	orrs	r3, r2
 8002434:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800243e:	2301      	movs	r3, #1
 8002440:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d017      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800244e:	4b5d      	ldr	r3, [pc, #372]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002454:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245c:	4959      	ldr	r1, [pc, #356]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800245e:	4313      	orrs	r3, r2
 8002460:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002468:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800246c:	d101      	bne.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800246e:	2301      	movs	r3, #1
 8002470:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800247a:	2301      	movs	r3, #1
 800247c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d017      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800248a:	4b4e      	ldr	r3, [pc, #312]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800248c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002490:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	494a      	ldr	r1, [pc, #296]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800249a:	4313      	orrs	r3, r2
 800249c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024a8:	d101      	bne.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80024aa:	2301      	movs	r3, #1
 80024ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80024b6:	2301      	movs	r3, #1
 80024b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80024c6:	2301      	movs	r3, #1
 80024c8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0320 	and.w	r3, r3, #32
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 808b 	beq.w	80025ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80024d8:	4b3a      	ldr	r3, [pc, #232]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	4a39      	ldr	r2, [pc, #228]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e2:	6413      	str	r3, [r2, #64]	; 0x40
 80024e4:	4b37      	ldr	r3, [pc, #220]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80024f0:	4b35      	ldr	r3, [pc, #212]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a34      	ldr	r2, [pc, #208]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80024f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024fc:	f7fe fee2 	bl	80012c4 <HAL_GetTick>
 8002500:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002504:	f7fe fede 	bl	80012c4 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b64      	cmp	r3, #100	; 0x64
 8002510:	d901      	bls.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e38f      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002516:	4b2c      	ldr	r3, [pc, #176]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0f0      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002522:	4b28      	ldr	r3, [pc, #160]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800252a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d035      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	429a      	cmp	r2, r3
 800253e:	d02e      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002540:	4b20      	ldr	r3, [pc, #128]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002548:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800254a:	4b1e      	ldr	r3, [pc, #120]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800254c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254e:	4a1d      	ldr	r2, [pc, #116]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002554:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002556:	4b1b      	ldr	r3, [pc, #108]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255a:	4a1a      	ldr	r2, [pc, #104]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800255c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002560:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002562:	4a18      	ldr	r2, [pc, #96]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002568:	4b16      	ldr	r3, [pc, #88]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800256a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b01      	cmp	r3, #1
 8002572:	d114      	bne.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002574:	f7fe fea6 	bl	80012c4 <HAL_GetTick>
 8002578:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800257a:	e00a      	b.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800257c:	f7fe fea2 	bl	80012c4 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	f241 3288 	movw	r2, #5000	; 0x1388
 800258a:	4293      	cmp	r3, r2
 800258c:	d901      	bls.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e351      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002592:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0ee      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025aa:	d111      	bne.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80025ac:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025b8:	4b04      	ldr	r3, [pc, #16]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80025ba:	400b      	ands	r3, r1
 80025bc:	4901      	ldr	r1, [pc, #4]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	608b      	str	r3, [r1, #8]
 80025c2:	e00b      	b.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40007000 	.word	0x40007000
 80025cc:	0ffffcff 	.word	0x0ffffcff
 80025d0:	4bac      	ldr	r3, [pc, #688]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	4aab      	ldr	r2, [pc, #684]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025d6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80025da:	6093      	str	r3, [r2, #8]
 80025dc:	4ba9      	ldr	r3, [pc, #676]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025e8:	49a6      	ldr	r1, [pc, #664]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0310 	and.w	r3, r3, #16
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d010      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80025fa:	4ba2      	ldr	r3, [pc, #648]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002600:	4aa0      	ldr	r2, [pc, #640]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002602:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002606:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800260a:	4b9e      	ldr	r3, [pc, #632]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800260c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002614:	499b      	ldr	r1, [pc, #620]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002616:	4313      	orrs	r3, r2
 8002618:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00a      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002628:	4b96      	ldr	r3, [pc, #600]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800262a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800262e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002636:	4993      	ldr	r1, [pc, #588]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002638:	4313      	orrs	r3, r2
 800263a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00a      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800264a:	4b8e      	ldr	r3, [pc, #568]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800264c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002650:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002658:	498a      	ldr	r1, [pc, #552]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800265a:	4313      	orrs	r3, r2
 800265c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00a      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800266c:	4b85      	ldr	r3, [pc, #532]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800266e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002672:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800267a:	4982      	ldr	r1, [pc, #520]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800267c:	4313      	orrs	r3, r2
 800267e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00a      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800268e:	4b7d      	ldr	r3, [pc, #500]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002694:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269c:	4979      	ldr	r1, [pc, #484]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00a      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026b0:	4b74      	ldr	r3, [pc, #464]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b6:	f023 0203 	bic.w	r2, r3, #3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	4971      	ldr	r1, [pc, #452]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00a      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026d2:	4b6c      	ldr	r3, [pc, #432]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d8:	f023 020c 	bic.w	r2, r3, #12
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026e0:	4968      	ldr	r1, [pc, #416]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00a      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026f4:	4b63      	ldr	r3, [pc, #396]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002702:	4960      	ldr	r1, [pc, #384]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00a      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002716:	4b5b      	ldr	r3, [pc, #364]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002724:	4957      	ldr	r1, [pc, #348]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002726:	4313      	orrs	r3, r2
 8002728:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00a      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002738:	4b52      	ldr	r3, [pc, #328]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800273a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800273e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002746:	494f      	ldr	r1, [pc, #316]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002748:	4313      	orrs	r3, r2
 800274a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00a      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800275a:	4b4a      	ldr	r3, [pc, #296]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800275c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002760:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002768:	4946      	ldr	r1, [pc, #280]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800276a:	4313      	orrs	r3, r2
 800276c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00a      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800277c:	4b41      	ldr	r3, [pc, #260]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800277e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002782:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800278a:	493e      	ldr	r1, [pc, #248]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800278c:	4313      	orrs	r3, r2
 800278e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00a      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800279e:	4b39      	ldr	r3, [pc, #228]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ac:	4935      	ldr	r1, [pc, #212]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00a      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80027c0:	4b30      	ldr	r3, [pc, #192]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027ce:	492d      	ldr	r1, [pc, #180]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d011      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80027e2:	4b28      	ldr	r3, [pc, #160]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027f0:	4924      	ldr	r1, [pc, #144]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002800:	d101      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002802:	2301      	movs	r3, #1
 8002804:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002812:	2301      	movs	r3, #1
 8002814:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00a      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002822:	4b18      	ldr	r3, [pc, #96]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002828:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002830:	4914      	ldr	r1, [pc, #80]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002832:	4313      	orrs	r3, r2
 8002834:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00b      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002844:	4b0f      	ldr	r3, [pc, #60]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002854:	490b      	ldr	r1, [pc, #44]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002856:	4313      	orrs	r3, r2
 8002858:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00f      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002868:	4b06      	ldr	r3, [pc, #24]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800286a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002878:	4902      	ldr	r1, [pc, #8]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800287a:	4313      	orrs	r3, r2
 800287c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002880:	e002      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002882:	bf00      	nop
 8002884:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00b      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002894:	4b8a      	ldr	r3, [pc, #552]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002896:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800289a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a4:	4986      	ldr	r1, [pc, #536]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00b      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80028b8:	4b81      	ldr	r3, [pc, #516]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028c8:	497d      	ldr	r1, [pc, #500]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d006      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 80d6 	beq.w	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80028e4:	4b76      	ldr	r3, [pc, #472]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a75      	ldr	r2, [pc, #468]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028f0:	f7fe fce8 	bl	80012c4 <HAL_GetTick>
 80028f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028f6:	e008      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80028f8:	f7fe fce4 	bl	80012c4 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b64      	cmp	r3, #100	; 0x64
 8002904:	d901      	bls.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e195      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800290a:	4b6d      	ldr	r3, [pc, #436]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1f0      	bne.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d021      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002926:	2b00      	cmp	r3, #0
 8002928:	d11d      	bne.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800292a:	4b65      	ldr	r3, [pc, #404]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800292c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002930:	0c1b      	lsrs	r3, r3, #16
 8002932:	f003 0303 	and.w	r3, r3, #3
 8002936:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002938:	4b61      	ldr	r3, [pc, #388]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800293a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800293e:	0e1b      	lsrs	r3, r3, #24
 8002940:	f003 030f 	and.w	r3, r3, #15
 8002944:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	019a      	lsls	r2, r3, #6
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	041b      	lsls	r3, r3, #16
 8002950:	431a      	orrs	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	061b      	lsls	r3, r3, #24
 8002956:	431a      	orrs	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	071b      	lsls	r3, r3, #28
 800295e:	4958      	ldr	r1, [pc, #352]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002960:	4313      	orrs	r3, r2
 8002962:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d004      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002976:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800297a:	d00a      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002984:	2b00      	cmp	r3, #0
 8002986:	d02e      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002990:	d129      	bne.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002992:	4b4b      	ldr	r3, [pc, #300]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002994:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002998:	0c1b      	lsrs	r3, r3, #16
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029a0:	4b47      	ldr	r3, [pc, #284]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029a6:	0f1b      	lsrs	r3, r3, #28
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	019a      	lsls	r2, r3, #6
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	041b      	lsls	r3, r3, #16
 80029b8:	431a      	orrs	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	061b      	lsls	r3, r3, #24
 80029c0:	431a      	orrs	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	071b      	lsls	r3, r3, #28
 80029c6:	493e      	ldr	r1, [pc, #248]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80029ce:	4b3c      	ldr	r3, [pc, #240]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029d4:	f023 021f 	bic.w	r2, r3, #31
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	3b01      	subs	r3, #1
 80029de:	4938      	ldr	r1, [pc, #224]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d01d      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80029f2:	4b33      	ldr	r3, [pc, #204]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029f8:	0e1b      	lsrs	r3, r3, #24
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a00:	4b2f      	ldr	r3, [pc, #188]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a06:	0f1b      	lsrs	r3, r3, #28
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	019a      	lsls	r2, r3, #6
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	041b      	lsls	r3, r3, #16
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	061b      	lsls	r3, r3, #24
 8002a20:	431a      	orrs	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	071b      	lsls	r3, r3, #28
 8002a26:	4926      	ldr	r1, [pc, #152]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d011      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	019a      	lsls	r2, r3, #6
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	041b      	lsls	r3, r3, #16
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	061b      	lsls	r3, r3, #24
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	071b      	lsls	r3, r3, #28
 8002a56:	491a      	ldr	r1, [pc, #104]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a5e:	4b18      	ldr	r3, [pc, #96]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a17      	ldr	r2, [pc, #92]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a6a:	f7fe fc2b 	bl	80012c4 <HAL_GetTick>
 8002a6e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a70:	e008      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a72:	f7fe fc27 	bl	80012c4 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b64      	cmp	r3, #100	; 0x64
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e0d8      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a84:	4b0e      	ldr	r3, [pc, #56]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0f0      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	f040 80ce 	bne.w	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002a98:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a08      	ldr	r2, [pc, #32]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aa2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aa4:	f7fe fc0e 	bl	80012c4 <HAL_GetTick>
 8002aa8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002aaa:	e00b      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002aac:	f7fe fc0a 	bl	80012c4 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b64      	cmp	r3, #100	; 0x64
 8002ab8:	d904      	bls.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e0bb      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002abe:	bf00      	nop
 8002ac0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ac4:	4b5e      	ldr	r3, [pc, #376]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002acc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ad0:	d0ec      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d009      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d02e      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d12a      	bne.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002afa:	4b51      	ldr	r3, [pc, #324]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b00:	0c1b      	lsrs	r3, r3, #16
 8002b02:	f003 0303 	and.w	r3, r3, #3
 8002b06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b08:	4b4d      	ldr	r3, [pc, #308]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0e:	0f1b      	lsrs	r3, r3, #28
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	019a      	lsls	r2, r3, #6
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	041b      	lsls	r3, r3, #16
 8002b20:	431a      	orrs	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	061b      	lsls	r3, r3, #24
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	071b      	lsls	r3, r3, #28
 8002b2e:	4944      	ldr	r1, [pc, #272]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002b36:	4b42      	ldr	r3, [pc, #264]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b3c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b44:	3b01      	subs	r3, #1
 8002b46:	021b      	lsls	r3, r3, #8
 8002b48:	493d      	ldr	r1, [pc, #244]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d022      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b64:	d11d      	bne.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b66:	4b36      	ldr	r3, [pc, #216]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6c:	0e1b      	lsrs	r3, r3, #24
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b74:	4b32      	ldr	r3, [pc, #200]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7a:	0f1b      	lsrs	r3, r3, #28
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	019a      	lsls	r2, r3, #6
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	041b      	lsls	r3, r3, #16
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	061b      	lsls	r3, r3, #24
 8002b94:	431a      	orrs	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	071b      	lsls	r3, r3, #28
 8002b9a:	4929      	ldr	r1, [pc, #164]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0308 	and.w	r3, r3, #8
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d028      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002bae:	4b24      	ldr	r3, [pc, #144]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb4:	0e1b      	lsrs	r3, r3, #24
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002bbc:	4b20      	ldr	r3, [pc, #128]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc2:	0c1b      	lsrs	r3, r3, #16
 8002bc4:	f003 0303 	and.w	r3, r3, #3
 8002bc8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	019a      	lsls	r2, r3, #6
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	041b      	lsls	r3, r3, #16
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	061b      	lsls	r3, r3, #24
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	071b      	lsls	r3, r3, #28
 8002be2:	4917      	ldr	r1, [pc, #92]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002bea:	4b15      	ldr	r3, [pc, #84]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bf0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf8:	4911      	ldr	r1, [pc, #68]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002c00:	4b0f      	ldr	r3, [pc, #60]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a0e      	ldr	r2, [pc, #56]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c0c:	f7fe fb5a 	bl	80012c4 <HAL_GetTick>
 8002c10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c14:	f7fe fb56 	bl	80012c4 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b64      	cmp	r3, #100	; 0x64
 8002c20:	d901      	bls.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e007      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c26:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c32:	d1ef      	bne.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3720      	adds	r7, #32
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40023800 	.word	0x40023800

08002c44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e049      	b.n	8002cea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d106      	bne.n	8002c70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7fe f918 	bl	8000ea0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2202      	movs	r2, #2
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3304      	adds	r3, #4
 8002c80:	4619      	mov	r1, r3
 8002c82:	4610      	mov	r0, r2
 8002c84:	f000 fcb6 	bl	80035f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b082      	sub	sp, #8
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e049      	b.n	8002d98 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d106      	bne.n	8002d1e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 f841 	bl	8002da0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2202      	movs	r2, #2
 8002d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	3304      	adds	r3, #4
 8002d2e:	4619      	mov	r1, r3
 8002d30:	4610      	mov	r0, r2
 8002d32:	f000 fc5f 	bl	80035f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d109      	bne.n	8002dd8 <HAL_TIM_PWM_Start+0x24>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	bf14      	ite	ne
 8002dd0:	2301      	movne	r3, #1
 8002dd2:	2300      	moveq	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	e03c      	b.n	8002e52 <HAL_TIM_PWM_Start+0x9e>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d109      	bne.n	8002df2 <HAL_TIM_PWM_Start+0x3e>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	bf14      	ite	ne
 8002dea:	2301      	movne	r3, #1
 8002dec:	2300      	moveq	r3, #0
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	e02f      	b.n	8002e52 <HAL_TIM_PWM_Start+0x9e>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	d109      	bne.n	8002e0c <HAL_TIM_PWM_Start+0x58>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	bf14      	ite	ne
 8002e04:	2301      	movne	r3, #1
 8002e06:	2300      	moveq	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	e022      	b.n	8002e52 <HAL_TIM_PWM_Start+0x9e>
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	2b0c      	cmp	r3, #12
 8002e10:	d109      	bne.n	8002e26 <HAL_TIM_PWM_Start+0x72>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	bf14      	ite	ne
 8002e1e:	2301      	movne	r3, #1
 8002e20:	2300      	moveq	r3, #0
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	e015      	b.n	8002e52 <HAL_TIM_PWM_Start+0x9e>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	2b10      	cmp	r3, #16
 8002e2a:	d109      	bne.n	8002e40 <HAL_TIM_PWM_Start+0x8c>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	bf14      	ite	ne
 8002e38:	2301      	movne	r3, #1
 8002e3a:	2300      	moveq	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	e008      	b.n	8002e52 <HAL_TIM_PWM_Start+0x9e>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	bf14      	ite	ne
 8002e4c:	2301      	movne	r3, #1
 8002e4e:	2300      	moveq	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e092      	b.n	8002f80 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d104      	bne.n	8002e6a <HAL_TIM_PWM_Start+0xb6>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2202      	movs	r2, #2
 8002e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e68:	e023      	b.n	8002eb2 <HAL_TIM_PWM_Start+0xfe>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	2b04      	cmp	r3, #4
 8002e6e:	d104      	bne.n	8002e7a <HAL_TIM_PWM_Start+0xc6>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2202      	movs	r2, #2
 8002e74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e78:	e01b      	b.n	8002eb2 <HAL_TIM_PWM_Start+0xfe>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d104      	bne.n	8002e8a <HAL_TIM_PWM_Start+0xd6>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e88:	e013      	b.n	8002eb2 <HAL_TIM_PWM_Start+0xfe>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2b0c      	cmp	r3, #12
 8002e8e:	d104      	bne.n	8002e9a <HAL_TIM_PWM_Start+0xe6>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2202      	movs	r2, #2
 8002e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e98:	e00b      	b.n	8002eb2 <HAL_TIM_PWM_Start+0xfe>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	2b10      	cmp	r3, #16
 8002e9e:	d104      	bne.n	8002eaa <HAL_TIM_PWM_Start+0xf6>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ea8:	e003      	b.n	8002eb2 <HAL_TIM_PWM_Start+0xfe>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2202      	movs	r2, #2
 8002eae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	6839      	ldr	r1, [r7, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 ff32 	bl	8003d24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a30      	ldr	r2, [pc, #192]	; (8002f88 <HAL_TIM_PWM_Start+0x1d4>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d004      	beq.n	8002ed4 <HAL_TIM_PWM_Start+0x120>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a2f      	ldr	r2, [pc, #188]	; (8002f8c <HAL_TIM_PWM_Start+0x1d8>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d101      	bne.n	8002ed8 <HAL_TIM_PWM_Start+0x124>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e000      	b.n	8002eda <HAL_TIM_PWM_Start+0x126>
 8002ed8:	2300      	movs	r3, #0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d007      	beq.n	8002eee <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002eec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a25      	ldr	r2, [pc, #148]	; (8002f88 <HAL_TIM_PWM_Start+0x1d4>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d022      	beq.n	8002f3e <HAL_TIM_PWM_Start+0x18a>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f00:	d01d      	beq.n	8002f3e <HAL_TIM_PWM_Start+0x18a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a22      	ldr	r2, [pc, #136]	; (8002f90 <HAL_TIM_PWM_Start+0x1dc>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d018      	beq.n	8002f3e <HAL_TIM_PWM_Start+0x18a>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a20      	ldr	r2, [pc, #128]	; (8002f94 <HAL_TIM_PWM_Start+0x1e0>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d013      	beq.n	8002f3e <HAL_TIM_PWM_Start+0x18a>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a1f      	ldr	r2, [pc, #124]	; (8002f98 <HAL_TIM_PWM_Start+0x1e4>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d00e      	beq.n	8002f3e <HAL_TIM_PWM_Start+0x18a>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a19      	ldr	r2, [pc, #100]	; (8002f8c <HAL_TIM_PWM_Start+0x1d8>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d009      	beq.n	8002f3e <HAL_TIM_PWM_Start+0x18a>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a1b      	ldr	r2, [pc, #108]	; (8002f9c <HAL_TIM_PWM_Start+0x1e8>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d004      	beq.n	8002f3e <HAL_TIM_PWM_Start+0x18a>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a19      	ldr	r2, [pc, #100]	; (8002fa0 <HAL_TIM_PWM_Start+0x1ec>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d115      	bne.n	8002f6a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	4b17      	ldr	r3, [pc, #92]	; (8002fa4 <HAL_TIM_PWM_Start+0x1f0>)
 8002f46:	4013      	ands	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2b06      	cmp	r3, #6
 8002f4e:	d015      	beq.n	8002f7c <HAL_TIM_PWM_Start+0x1c8>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f56:	d011      	beq.n	8002f7c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0201 	orr.w	r2, r2, #1
 8002f66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f68:	e008      	b.n	8002f7c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f042 0201 	orr.w	r2, r2, #1
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	e000      	b.n	8002f7e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f7c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40010000 	.word	0x40010000
 8002f8c:	40010400 	.word	0x40010400
 8002f90:	40000400 	.word	0x40000400
 8002f94:	40000800 	.word	0x40000800
 8002f98:	40000c00 	.word	0x40000c00
 8002f9c:	40014000 	.word	0x40014000
 8002fa0:	40001800 	.word	0x40001800
 8002fa4:	00010007 	.word	0x00010007

08002fa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d122      	bne.n	8003004 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d11b      	bne.n	8003004 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f06f 0202 	mvn.w	r2, #2
 8002fd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 fae4 	bl	80035b8 <HAL_TIM_IC_CaptureCallback>
 8002ff0:	e005      	b.n	8002ffe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 fad6 	bl	80035a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 fae7 	bl	80035cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	f003 0304 	and.w	r3, r3, #4
 800300e:	2b04      	cmp	r3, #4
 8003010:	d122      	bne.n	8003058 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b04      	cmp	r3, #4
 800301e:	d11b      	bne.n	8003058 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f06f 0204 	mvn.w	r2, #4
 8003028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2202      	movs	r2, #2
 800302e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 faba 	bl	80035b8 <HAL_TIM_IC_CaptureCallback>
 8003044:	e005      	b.n	8003052 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 faac 	bl	80035a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 fabd 	bl	80035cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b08      	cmp	r3, #8
 8003064:	d122      	bne.n	80030ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	f003 0308 	and.w	r3, r3, #8
 8003070:	2b08      	cmp	r3, #8
 8003072:	d11b      	bne.n	80030ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f06f 0208 	mvn.w	r2, #8
 800307c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2204      	movs	r2, #4
 8003082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 fa90 	bl	80035b8 <HAL_TIM_IC_CaptureCallback>
 8003098:	e005      	b.n	80030a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 fa82 	bl	80035a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 fa93 	bl	80035cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	f003 0310 	and.w	r3, r3, #16
 80030b6:	2b10      	cmp	r3, #16
 80030b8:	d122      	bne.n	8003100 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	f003 0310 	and.w	r3, r3, #16
 80030c4:	2b10      	cmp	r3, #16
 80030c6:	d11b      	bne.n	8003100 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f06f 0210 	mvn.w	r2, #16
 80030d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2208      	movs	r2, #8
 80030d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 fa66 	bl	80035b8 <HAL_TIM_IC_CaptureCallback>
 80030ec:	e005      	b.n	80030fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 fa58 	bl	80035a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 fa69 	bl	80035cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b01      	cmp	r3, #1
 800310c:	d10e      	bne.n	800312c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b01      	cmp	r3, #1
 800311a:	d107      	bne.n	800312c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f06f 0201 	mvn.w	r2, #1
 8003124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7fd fd02 	bl	8000b30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003136:	2b80      	cmp	r3, #128	; 0x80
 8003138:	d10e      	bne.n	8003158 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003144:	2b80      	cmp	r3, #128	; 0x80
 8003146:	d107      	bne.n	8003158 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 fea4 	bl	8003ea0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003166:	d10e      	bne.n	8003186 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003172:	2b80      	cmp	r3, #128	; 0x80
 8003174:	d107      	bne.n	8003186 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800317e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 fe97 	bl	8003eb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003190:	2b40      	cmp	r3, #64	; 0x40
 8003192:	d10e      	bne.n	80031b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319e:	2b40      	cmp	r3, #64	; 0x40
 80031a0:	d107      	bne.n	80031b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 fa17 	bl	80035e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	f003 0320 	and.w	r3, r3, #32
 80031bc:	2b20      	cmp	r3, #32
 80031be:	d10e      	bne.n	80031de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	f003 0320 	and.w	r3, r3, #32
 80031ca:	2b20      	cmp	r3, #32
 80031cc:	d107      	bne.n	80031de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f06f 0220 	mvn.w	r2, #32
 80031d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 fe57 	bl	8003e8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031de:	bf00      	nop
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
	...

080031e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031f4:	2300      	movs	r3, #0
 80031f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003202:	2302      	movs	r3, #2
 8003204:	e0ff      	b.n	8003406 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b14      	cmp	r3, #20
 8003212:	f200 80f0 	bhi.w	80033f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003216:	a201      	add	r2, pc, #4	; (adr r2, 800321c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321c:	08003271 	.word	0x08003271
 8003220:	080033f7 	.word	0x080033f7
 8003224:	080033f7 	.word	0x080033f7
 8003228:	080033f7 	.word	0x080033f7
 800322c:	080032b1 	.word	0x080032b1
 8003230:	080033f7 	.word	0x080033f7
 8003234:	080033f7 	.word	0x080033f7
 8003238:	080033f7 	.word	0x080033f7
 800323c:	080032f3 	.word	0x080032f3
 8003240:	080033f7 	.word	0x080033f7
 8003244:	080033f7 	.word	0x080033f7
 8003248:	080033f7 	.word	0x080033f7
 800324c:	08003333 	.word	0x08003333
 8003250:	080033f7 	.word	0x080033f7
 8003254:	080033f7 	.word	0x080033f7
 8003258:	080033f7 	.word	0x080033f7
 800325c:	08003375 	.word	0x08003375
 8003260:	080033f7 	.word	0x080033f7
 8003264:	080033f7 	.word	0x080033f7
 8003268:	080033f7 	.word	0x080033f7
 800326c:	080033b5 	.word	0x080033b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68b9      	ldr	r1, [r7, #8]
 8003276:	4618      	mov	r0, r3
 8003278:	f000 fa5c 	bl	8003734 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	699a      	ldr	r2, [r3, #24]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0208 	orr.w	r2, r2, #8
 800328a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699a      	ldr	r2, [r3, #24]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0204 	bic.w	r2, r2, #4
 800329a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6999      	ldr	r1, [r3, #24]
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	691a      	ldr	r2, [r3, #16]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	619a      	str	r2, [r3, #24]
      break;
 80032ae:	e0a5      	b.n	80033fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68b9      	ldr	r1, [r7, #8]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 faae 	bl	8003818 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699a      	ldr	r2, [r3, #24]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699a      	ldr	r2, [r3, #24]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6999      	ldr	r1, [r3, #24]
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	021a      	lsls	r2, r3, #8
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	430a      	orrs	r2, r1
 80032ee:	619a      	str	r2, [r3, #24]
      break;
 80032f0:	e084      	b.n	80033fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68b9      	ldr	r1, [r7, #8]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f000 fb05 	bl	8003908 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	69da      	ldr	r2, [r3, #28]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f042 0208 	orr.w	r2, r2, #8
 800330c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	69da      	ldr	r2, [r3, #28]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0204 	bic.w	r2, r2, #4
 800331c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	69d9      	ldr	r1, [r3, #28]
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	691a      	ldr	r2, [r3, #16]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	61da      	str	r2, [r3, #28]
      break;
 8003330:	e064      	b.n	80033fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68b9      	ldr	r1, [r7, #8]
 8003338:	4618      	mov	r0, r3
 800333a:	f000 fb5b 	bl	80039f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	69da      	ldr	r2, [r3, #28]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800334c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	69da      	ldr	r2, [r3, #28]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800335c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	69d9      	ldr	r1, [r3, #28]
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	021a      	lsls	r2, r3, #8
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	61da      	str	r2, [r3, #28]
      break;
 8003372:	e043      	b.n	80033fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68b9      	ldr	r1, [r7, #8]
 800337a:	4618      	mov	r0, r3
 800337c:	f000 fb92 	bl	8003aa4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f042 0208 	orr.w	r2, r2, #8
 800338e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0204 	bic.w	r2, r2, #4
 800339e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	691a      	ldr	r2, [r3, #16]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80033b2:	e023      	b.n	80033fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68b9      	ldr	r1, [r7, #8]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 fbc4 	bl	8003b48 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	021a      	lsls	r2, r3, #8
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80033f4:	e002      	b.n	80033fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	75fb      	strb	r3, [r7, #23]
      break;
 80033fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003404:	7dfb      	ldrb	r3, [r7, #23]
}
 8003406:	4618      	mov	r0, r3
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop

08003410 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800341a:	2300      	movs	r3, #0
 800341c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003424:	2b01      	cmp	r3, #1
 8003426:	d101      	bne.n	800342c <HAL_TIM_ConfigClockSource+0x1c>
 8003428:	2302      	movs	r3, #2
 800342a:	e0b4      	b.n	8003596 <HAL_TIM_ConfigClockSource+0x186>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2202      	movs	r2, #2
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	4b56      	ldr	r3, [pc, #344]	; (80035a0 <HAL_TIM_ConfigClockSource+0x190>)
 8003448:	4013      	ands	r3, r2
 800344a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003452:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003464:	d03e      	beq.n	80034e4 <HAL_TIM_ConfigClockSource+0xd4>
 8003466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800346a:	f200 8087 	bhi.w	800357c <HAL_TIM_ConfigClockSource+0x16c>
 800346e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003472:	f000 8086 	beq.w	8003582 <HAL_TIM_ConfigClockSource+0x172>
 8003476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800347a:	d87f      	bhi.n	800357c <HAL_TIM_ConfigClockSource+0x16c>
 800347c:	2b70      	cmp	r3, #112	; 0x70
 800347e:	d01a      	beq.n	80034b6 <HAL_TIM_ConfigClockSource+0xa6>
 8003480:	2b70      	cmp	r3, #112	; 0x70
 8003482:	d87b      	bhi.n	800357c <HAL_TIM_ConfigClockSource+0x16c>
 8003484:	2b60      	cmp	r3, #96	; 0x60
 8003486:	d050      	beq.n	800352a <HAL_TIM_ConfigClockSource+0x11a>
 8003488:	2b60      	cmp	r3, #96	; 0x60
 800348a:	d877      	bhi.n	800357c <HAL_TIM_ConfigClockSource+0x16c>
 800348c:	2b50      	cmp	r3, #80	; 0x50
 800348e:	d03c      	beq.n	800350a <HAL_TIM_ConfigClockSource+0xfa>
 8003490:	2b50      	cmp	r3, #80	; 0x50
 8003492:	d873      	bhi.n	800357c <HAL_TIM_ConfigClockSource+0x16c>
 8003494:	2b40      	cmp	r3, #64	; 0x40
 8003496:	d058      	beq.n	800354a <HAL_TIM_ConfigClockSource+0x13a>
 8003498:	2b40      	cmp	r3, #64	; 0x40
 800349a:	d86f      	bhi.n	800357c <HAL_TIM_ConfigClockSource+0x16c>
 800349c:	2b30      	cmp	r3, #48	; 0x30
 800349e:	d064      	beq.n	800356a <HAL_TIM_ConfigClockSource+0x15a>
 80034a0:	2b30      	cmp	r3, #48	; 0x30
 80034a2:	d86b      	bhi.n	800357c <HAL_TIM_ConfigClockSource+0x16c>
 80034a4:	2b20      	cmp	r3, #32
 80034a6:	d060      	beq.n	800356a <HAL_TIM_ConfigClockSource+0x15a>
 80034a8:	2b20      	cmp	r3, #32
 80034aa:	d867      	bhi.n	800357c <HAL_TIM_ConfigClockSource+0x16c>
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d05c      	beq.n	800356a <HAL_TIM_ConfigClockSource+0x15a>
 80034b0:	2b10      	cmp	r3, #16
 80034b2:	d05a      	beq.n	800356a <HAL_TIM_ConfigClockSource+0x15a>
 80034b4:	e062      	b.n	800357c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6818      	ldr	r0, [r3, #0]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	6899      	ldr	r1, [r3, #8]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f000 fc0d 	bl	8003ce4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	609a      	str	r2, [r3, #8]
      break;
 80034e2:	e04f      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6818      	ldr	r0, [r3, #0]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	6899      	ldr	r1, [r3, #8]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f000 fbf6 	bl	8003ce4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003506:	609a      	str	r2, [r3, #8]
      break;
 8003508:	e03c      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6818      	ldr	r0, [r3, #0]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	6859      	ldr	r1, [r3, #4]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	461a      	mov	r2, r3
 8003518:	f000 fb6a 	bl	8003bf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2150      	movs	r1, #80	; 0x50
 8003522:	4618      	mov	r0, r3
 8003524:	f000 fbc3 	bl	8003cae <TIM_ITRx_SetConfig>
      break;
 8003528:	e02c      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6818      	ldr	r0, [r3, #0]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	6859      	ldr	r1, [r3, #4]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	461a      	mov	r2, r3
 8003538:	f000 fb89 	bl	8003c4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2160      	movs	r1, #96	; 0x60
 8003542:	4618      	mov	r0, r3
 8003544:	f000 fbb3 	bl	8003cae <TIM_ITRx_SetConfig>
      break;
 8003548:	e01c      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6818      	ldr	r0, [r3, #0]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	6859      	ldr	r1, [r3, #4]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	461a      	mov	r2, r3
 8003558:	f000 fb4a 	bl	8003bf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2140      	movs	r1, #64	; 0x40
 8003562:	4618      	mov	r0, r3
 8003564:	f000 fba3 	bl	8003cae <TIM_ITRx_SetConfig>
      break;
 8003568:	e00c      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4619      	mov	r1, r3
 8003574:	4610      	mov	r0, r2
 8003576:	f000 fb9a 	bl	8003cae <TIM_ITRx_SetConfig>
      break;
 800357a:	e003      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	73fb      	strb	r3, [r7, #15]
      break;
 8003580:	e000      	b.n	8003584 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003582:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003594:	7bfb      	ldrb	r3, [r7, #15]
}
 8003596:	4618      	mov	r0, r3
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	fffeff88 	.word	0xfffeff88

080035a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a40      	ldr	r2, [pc, #256]	; (8003708 <TIM_Base_SetConfig+0x114>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d013      	beq.n	8003634 <TIM_Base_SetConfig+0x40>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003612:	d00f      	beq.n	8003634 <TIM_Base_SetConfig+0x40>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a3d      	ldr	r2, [pc, #244]	; (800370c <TIM_Base_SetConfig+0x118>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d00b      	beq.n	8003634 <TIM_Base_SetConfig+0x40>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a3c      	ldr	r2, [pc, #240]	; (8003710 <TIM_Base_SetConfig+0x11c>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d007      	beq.n	8003634 <TIM_Base_SetConfig+0x40>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a3b      	ldr	r2, [pc, #236]	; (8003714 <TIM_Base_SetConfig+0x120>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d003      	beq.n	8003634 <TIM_Base_SetConfig+0x40>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a3a      	ldr	r2, [pc, #232]	; (8003718 <TIM_Base_SetConfig+0x124>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d108      	bne.n	8003646 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800363a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	4313      	orrs	r3, r2
 8003644:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a2f      	ldr	r2, [pc, #188]	; (8003708 <TIM_Base_SetConfig+0x114>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d02b      	beq.n	80036a6 <TIM_Base_SetConfig+0xb2>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003654:	d027      	beq.n	80036a6 <TIM_Base_SetConfig+0xb2>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a2c      	ldr	r2, [pc, #176]	; (800370c <TIM_Base_SetConfig+0x118>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d023      	beq.n	80036a6 <TIM_Base_SetConfig+0xb2>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a2b      	ldr	r2, [pc, #172]	; (8003710 <TIM_Base_SetConfig+0x11c>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d01f      	beq.n	80036a6 <TIM_Base_SetConfig+0xb2>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a2a      	ldr	r2, [pc, #168]	; (8003714 <TIM_Base_SetConfig+0x120>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d01b      	beq.n	80036a6 <TIM_Base_SetConfig+0xb2>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a29      	ldr	r2, [pc, #164]	; (8003718 <TIM_Base_SetConfig+0x124>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d017      	beq.n	80036a6 <TIM_Base_SetConfig+0xb2>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a28      	ldr	r2, [pc, #160]	; (800371c <TIM_Base_SetConfig+0x128>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d013      	beq.n	80036a6 <TIM_Base_SetConfig+0xb2>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a27      	ldr	r2, [pc, #156]	; (8003720 <TIM_Base_SetConfig+0x12c>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d00f      	beq.n	80036a6 <TIM_Base_SetConfig+0xb2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a26      	ldr	r2, [pc, #152]	; (8003724 <TIM_Base_SetConfig+0x130>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d00b      	beq.n	80036a6 <TIM_Base_SetConfig+0xb2>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a25      	ldr	r2, [pc, #148]	; (8003728 <TIM_Base_SetConfig+0x134>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d007      	beq.n	80036a6 <TIM_Base_SetConfig+0xb2>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a24      	ldr	r2, [pc, #144]	; (800372c <TIM_Base_SetConfig+0x138>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d003      	beq.n	80036a6 <TIM_Base_SetConfig+0xb2>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a23      	ldr	r2, [pc, #140]	; (8003730 <TIM_Base_SetConfig+0x13c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d108      	bne.n	80036b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a0a      	ldr	r2, [pc, #40]	; (8003708 <TIM_Base_SetConfig+0x114>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d003      	beq.n	80036ec <TIM_Base_SetConfig+0xf8>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a0c      	ldr	r2, [pc, #48]	; (8003718 <TIM_Base_SetConfig+0x124>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d103      	bne.n	80036f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	691a      	ldr	r2, [r3, #16]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	615a      	str	r2, [r3, #20]
}
 80036fa:	bf00      	nop
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	40010000 	.word	0x40010000
 800370c:	40000400 	.word	0x40000400
 8003710:	40000800 	.word	0x40000800
 8003714:	40000c00 	.word	0x40000c00
 8003718:	40010400 	.word	0x40010400
 800371c:	40014000 	.word	0x40014000
 8003720:	40014400 	.word	0x40014400
 8003724:	40014800 	.word	0x40014800
 8003728:	40001800 	.word	0x40001800
 800372c:	40001c00 	.word	0x40001c00
 8003730:	40002000 	.word	0x40002000

08003734 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003734:	b480      	push	{r7}
 8003736:	b087      	sub	sp, #28
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	f023 0201 	bic.w	r2, r3, #1
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	4b2b      	ldr	r3, [pc, #172]	; (800380c <TIM_OC1_SetConfig+0xd8>)
 8003760:	4013      	ands	r3, r2
 8003762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f023 0303 	bic.w	r3, r3, #3
 800376a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	4313      	orrs	r3, r2
 8003774:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f023 0302 	bic.w	r3, r3, #2
 800377c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	4313      	orrs	r3, r2
 8003786:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a21      	ldr	r2, [pc, #132]	; (8003810 <TIM_OC1_SetConfig+0xdc>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d003      	beq.n	8003798 <TIM_OC1_SetConfig+0x64>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a20      	ldr	r2, [pc, #128]	; (8003814 <TIM_OC1_SetConfig+0xe0>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d10c      	bne.n	80037b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	f023 0308 	bic.w	r3, r3, #8
 800379e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f023 0304 	bic.w	r3, r3, #4
 80037b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a16      	ldr	r2, [pc, #88]	; (8003810 <TIM_OC1_SetConfig+0xdc>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d003      	beq.n	80037c2 <TIM_OC1_SetConfig+0x8e>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a15      	ldr	r2, [pc, #84]	; (8003814 <TIM_OC1_SetConfig+0xe0>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d111      	bne.n	80037e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	4313      	orrs	r3, r2
 80037da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	621a      	str	r2, [r3, #32]
}
 8003800:	bf00      	nop
 8003802:	371c      	adds	r7, #28
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	fffeff8f 	.word	0xfffeff8f
 8003810:	40010000 	.word	0x40010000
 8003814:	40010400 	.word	0x40010400

08003818 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003818:	b480      	push	{r7}
 800381a:	b087      	sub	sp, #28
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	f023 0210 	bic.w	r2, r3, #16
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	4b2e      	ldr	r3, [pc, #184]	; (80038fc <TIM_OC2_SetConfig+0xe4>)
 8003844:	4013      	ands	r3, r2
 8003846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800384e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	021b      	lsls	r3, r3, #8
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	4313      	orrs	r3, r2
 800385a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	f023 0320 	bic.w	r3, r3, #32
 8003862:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	011b      	lsls	r3, r3, #4
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	4313      	orrs	r3, r2
 800386e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a23      	ldr	r2, [pc, #140]	; (8003900 <TIM_OC2_SetConfig+0xe8>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d003      	beq.n	8003880 <TIM_OC2_SetConfig+0x68>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a22      	ldr	r2, [pc, #136]	; (8003904 <TIM_OC2_SetConfig+0xec>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d10d      	bne.n	800389c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003886:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	4313      	orrs	r3, r2
 8003892:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800389a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a18      	ldr	r2, [pc, #96]	; (8003900 <TIM_OC2_SetConfig+0xe8>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d003      	beq.n	80038ac <TIM_OC2_SetConfig+0x94>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a17      	ldr	r2, [pc, #92]	; (8003904 <TIM_OC2_SetConfig+0xec>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d113      	bne.n	80038d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	621a      	str	r2, [r3, #32]
}
 80038ee:	bf00      	nop
 80038f0:	371c      	adds	r7, #28
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	feff8fff 	.word	0xfeff8fff
 8003900:	40010000 	.word	0x40010000
 8003904:	40010400 	.word	0x40010400

08003908 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003908:	b480      	push	{r7}
 800390a:	b087      	sub	sp, #28
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	4b2d      	ldr	r3, [pc, #180]	; (80039e8 <TIM_OC3_SetConfig+0xe0>)
 8003934:	4013      	ands	r3, r2
 8003936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f023 0303 	bic.w	r3, r3, #3
 800393e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	4313      	orrs	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003950:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	021b      	lsls	r3, r3, #8
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	4313      	orrs	r3, r2
 800395c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a22      	ldr	r2, [pc, #136]	; (80039ec <TIM_OC3_SetConfig+0xe4>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d003      	beq.n	800396e <TIM_OC3_SetConfig+0x66>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a21      	ldr	r2, [pc, #132]	; (80039f0 <TIM_OC3_SetConfig+0xe8>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d10d      	bne.n	800398a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003974:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	021b      	lsls	r3, r3, #8
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	4313      	orrs	r3, r2
 8003980:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003988:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a17      	ldr	r2, [pc, #92]	; (80039ec <TIM_OC3_SetConfig+0xe4>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d003      	beq.n	800399a <TIM_OC3_SetConfig+0x92>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a16      	ldr	r2, [pc, #88]	; (80039f0 <TIM_OC3_SetConfig+0xe8>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d113      	bne.n	80039c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	011b      	lsls	r3, r3, #4
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	4313      	orrs	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	621a      	str	r2, [r3, #32]
}
 80039dc:	bf00      	nop
 80039de:	371c      	adds	r7, #28
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	fffeff8f 	.word	0xfffeff8f
 80039ec:	40010000 	.word	0x40010000
 80039f0:	40010400 	.word	0x40010400

080039f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b087      	sub	sp, #28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	4b1e      	ldr	r3, [pc, #120]	; (8003a98 <TIM_OC4_SetConfig+0xa4>)
 8003a20:	4013      	ands	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	021b      	lsls	r3, r3, #8
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	031b      	lsls	r3, r3, #12
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a13      	ldr	r2, [pc, #76]	; (8003a9c <TIM_OC4_SetConfig+0xa8>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d003      	beq.n	8003a5c <TIM_OC4_SetConfig+0x68>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a12      	ldr	r2, [pc, #72]	; (8003aa0 <TIM_OC4_SetConfig+0xac>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d109      	bne.n	8003a70 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	019b      	lsls	r3, r3, #6
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	621a      	str	r2, [r3, #32]
}
 8003a8a:	bf00      	nop
 8003a8c:	371c      	adds	r7, #28
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	feff8fff 	.word	0xfeff8fff
 8003a9c:	40010000 	.word	0x40010000
 8003aa0:	40010400 	.word	0x40010400

08003aa4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	4b1b      	ldr	r3, [pc, #108]	; (8003b3c <TIM_OC5_SetConfig+0x98>)
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003ae4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	041b      	lsls	r3, r3, #16
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a12      	ldr	r2, [pc, #72]	; (8003b40 <TIM_OC5_SetConfig+0x9c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d003      	beq.n	8003b02 <TIM_OC5_SetConfig+0x5e>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a11      	ldr	r2, [pc, #68]	; (8003b44 <TIM_OC5_SetConfig+0xa0>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d109      	bne.n	8003b16 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b08:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	021b      	lsls	r3, r3, #8
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	621a      	str	r2, [r3, #32]
}
 8003b30:	bf00      	nop
 8003b32:	371c      	adds	r7, #28
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	fffeff8f 	.word	0xfffeff8f
 8003b40:	40010000 	.word	0x40010000
 8003b44:	40010400 	.word	0x40010400

08003b48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b087      	sub	sp, #28
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	4b1c      	ldr	r3, [pc, #112]	; (8003be4 <TIM_OC6_SetConfig+0x9c>)
 8003b74:	4013      	ands	r3, r2
 8003b76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	021b      	lsls	r3, r3, #8
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	051b      	lsls	r3, r3, #20
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a13      	ldr	r2, [pc, #76]	; (8003be8 <TIM_OC6_SetConfig+0xa0>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d003      	beq.n	8003ba8 <TIM_OC6_SetConfig+0x60>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a12      	ldr	r2, [pc, #72]	; (8003bec <TIM_OC6_SetConfig+0xa4>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d109      	bne.n	8003bbc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	029b      	lsls	r3, r3, #10
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	621a      	str	r2, [r3, #32]
}
 8003bd6:	bf00      	nop
 8003bd8:	371c      	adds	r7, #28
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	feff8fff 	.word	0xfeff8fff
 8003be8:	40010000 	.word	0x40010000
 8003bec:	40010400 	.word	0x40010400

08003bf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	f023 0201 	bic.w	r2, r3, #1
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	011b      	lsls	r3, r3, #4
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f023 030a 	bic.w	r3, r3, #10
 8003c2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	621a      	str	r2, [r3, #32]
}
 8003c42:	bf00      	nop
 8003c44:	371c      	adds	r7, #28
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b087      	sub	sp, #28
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	60f8      	str	r0, [r7, #12]
 8003c56:	60b9      	str	r1, [r7, #8]
 8003c58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	f023 0210 	bic.w	r2, r3, #16
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	031b      	lsls	r3, r3, #12
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	621a      	str	r2, [r3, #32]
}
 8003ca2:	bf00      	nop
 8003ca4:	371c      	adds	r7, #28
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b085      	sub	sp, #20
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f043 0307 	orr.w	r3, r3, #7
 8003cd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	609a      	str	r2, [r3, #8]
}
 8003cd8:	bf00      	nop
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b087      	sub	sp, #28
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
 8003cf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	021a      	lsls	r2, r3, #8
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	431a      	orrs	r2, r3
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	609a      	str	r2, [r3, #8]
}
 8003d18:	bf00      	nop
 8003d1a:	371c      	adds	r7, #28
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	f003 031f 	and.w	r3, r3, #31
 8003d36:	2201      	movs	r2, #1
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6a1a      	ldr	r2, [r3, #32]
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	43db      	mvns	r3, r3
 8003d46:	401a      	ands	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a1a      	ldr	r2, [r3, #32]
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	f003 031f 	and.w	r3, r3, #31
 8003d56:	6879      	ldr	r1, [r7, #4]
 8003d58:	fa01 f303 	lsl.w	r3, r1, r3
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	621a      	str	r2, [r3, #32]
}
 8003d62:	bf00      	nop
 8003d64:	371c      	adds	r7, #28
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
	...

08003d70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d101      	bne.n	8003d88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d84:	2302      	movs	r3, #2
 8003d86:	e06d      	b.n	8003e64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2202      	movs	r2, #2
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a30      	ldr	r2, [pc, #192]	; (8003e70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d004      	beq.n	8003dbc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a2f      	ldr	r2, [pc, #188]	; (8003e74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d108      	bne.n	8003dce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003dc2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a20      	ldr	r2, [pc, #128]	; (8003e70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d022      	beq.n	8003e38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dfa:	d01d      	beq.n	8003e38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a1d      	ldr	r2, [pc, #116]	; (8003e78 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d018      	beq.n	8003e38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a1c      	ldr	r2, [pc, #112]	; (8003e7c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d013      	beq.n	8003e38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a1a      	ldr	r2, [pc, #104]	; (8003e80 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d00e      	beq.n	8003e38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a15      	ldr	r2, [pc, #84]	; (8003e74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d009      	beq.n	8003e38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a16      	ldr	r2, [pc, #88]	; (8003e84 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d004      	beq.n	8003e38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a15      	ldr	r2, [pc, #84]	; (8003e88 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d10c      	bne.n	8003e52 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	40010000 	.word	0x40010000
 8003e74:	40010400 	.word	0x40010400
 8003e78:	40000400 	.word	0x40000400
 8003e7c:	40000800 	.word	0x40000800
 8003e80:	40000c00 	.word	0x40000c00
 8003e84:	40014000 	.word	0x40014000
 8003e88:	40001800 	.word	0x40001800

08003e8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e040      	b.n	8003f5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d106      	bne.n	8003ef0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7fd f89c 	bl	8001028 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2224      	movs	r2, #36	; 0x24
 8003ef4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0201 	bic.w	r2, r2, #1
 8003f04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 fd1e 	bl	8004948 <UART_SetConfig>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d101      	bne.n	8003f16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e022      	b.n	8003f5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d002      	beq.n	8003f24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 ff76 	bl	8004e10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689a      	ldr	r2, [r3, #8]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f042 0201 	orr.w	r2, r2, #1
 8003f52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 fffd 	bl	8004f54 <UART_CheckIdleState>
 8003f5a:	4603      	mov	r3, r0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3708      	adds	r7, #8
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b08a      	sub	sp, #40	; 0x28
 8003f68:	af02      	add	r7, sp, #8
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	603b      	str	r3, [r7, #0]
 8003f70:	4613      	mov	r3, r2
 8003f72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f78:	2b20      	cmp	r3, #32
 8003f7a:	d171      	bne.n	8004060 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d002      	beq.n	8003f88 <HAL_UART_Transmit+0x24>
 8003f82:	88fb      	ldrh	r3, [r7, #6]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e06a      	b.n	8004062 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2221      	movs	r2, #33	; 0x21
 8003f98:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f9a:	f7fd f993 	bl	80012c4 <HAL_GetTick>
 8003f9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	88fa      	ldrh	r2, [r7, #6]
 8003fa4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	88fa      	ldrh	r2, [r7, #6]
 8003fac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb8:	d108      	bne.n	8003fcc <HAL_UART_Transmit+0x68>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d104      	bne.n	8003fcc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	61bb      	str	r3, [r7, #24]
 8003fca:	e003      	b.n	8003fd4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fd4:	e02c      	b.n	8004030 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	2180      	movs	r1, #128	; 0x80
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f001 f804 	bl	8004fee <UART_WaitOnFlagUntilTimeout>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e038      	b.n	8004062 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10b      	bne.n	800400e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	881b      	ldrh	r3, [r3, #0]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004004:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	3302      	adds	r3, #2
 800400a:	61bb      	str	r3, [r7, #24]
 800400c:	e007      	b.n	800401e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	781a      	ldrb	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	3301      	adds	r3, #1
 800401c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004024:	b29b      	uxth	r3, r3
 8004026:	3b01      	subs	r3, #1
 8004028:	b29a      	uxth	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004036:	b29b      	uxth	r3, r3
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1cc      	bne.n	8003fd6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	2200      	movs	r2, #0
 8004044:	2140      	movs	r1, #64	; 0x40
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f000 ffd1 	bl	8004fee <UART_WaitOnFlagUntilTimeout>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e005      	b.n	8004062 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2220      	movs	r2, #32
 800405a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800405c:	2300      	movs	r3, #0
 800405e:	e000      	b.n	8004062 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004060:	2302      	movs	r3, #2
  }
}
 8004062:	4618      	mov	r0, r3
 8004064:	3720      	adds	r7, #32
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b08a      	sub	sp, #40	; 0x28
 800406e:	af02      	add	r7, sp, #8
 8004070:	60f8      	str	r0, [r7, #12]
 8004072:	60b9      	str	r1, [r7, #8]
 8004074:	603b      	str	r3, [r7, #0]
 8004076:	4613      	mov	r3, r2
 8004078:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004080:	2b20      	cmp	r3, #32
 8004082:	f040 80b1 	bne.w	80041e8 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d002      	beq.n	8004092 <HAL_UART_Receive+0x28>
 800408c:	88fb      	ldrh	r3, [r7, #6]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e0a9      	b.n	80041ea <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2222      	movs	r2, #34	; 0x22
 80040a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040ac:	f7fd f90a 	bl	80012c4 <HAL_GetTick>
 80040b0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	88fa      	ldrh	r2, [r7, #6]
 80040b6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	88fa      	ldrh	r2, [r7, #6]
 80040be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ca:	d10e      	bne.n	80040ea <HAL_UART_Receive+0x80>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d105      	bne.n	80040e0 <HAL_UART_Receive+0x76>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80040da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040de:	e02d      	b.n	800413c <HAL_UART_Receive+0xd2>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	22ff      	movs	r2, #255	; 0xff
 80040e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040e8:	e028      	b.n	800413c <HAL_UART_Receive+0xd2>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10d      	bne.n	800410e <HAL_UART_Receive+0xa4>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d104      	bne.n	8004104 <HAL_UART_Receive+0x9a>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	22ff      	movs	r2, #255	; 0xff
 80040fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004102:	e01b      	b.n	800413c <HAL_UART_Receive+0xd2>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	227f      	movs	r2, #127	; 0x7f
 8004108:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800410c:	e016      	b.n	800413c <HAL_UART_Receive+0xd2>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004116:	d10d      	bne.n	8004134 <HAL_UART_Receive+0xca>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d104      	bne.n	800412a <HAL_UART_Receive+0xc0>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	227f      	movs	r2, #127	; 0x7f
 8004124:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004128:	e008      	b.n	800413c <HAL_UART_Receive+0xd2>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	223f      	movs	r2, #63	; 0x3f
 800412e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004132:	e003      	b.n	800413c <HAL_UART_Receive+0xd2>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004142:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800414c:	d108      	bne.n	8004160 <HAL_UART_Receive+0xf6>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d104      	bne.n	8004160 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004156:	2300      	movs	r3, #0
 8004158:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	61bb      	str	r3, [r7, #24]
 800415e:	e003      	b.n	8004168 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004164:	2300      	movs	r3, #0
 8004166:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004168:	e032      	b.n	80041d0 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2200      	movs	r2, #0
 8004172:	2120      	movs	r1, #32
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 ff3a 	bl	8004fee <UART_WaitOnFlagUntilTimeout>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e032      	b.n	80041ea <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10c      	bne.n	80041a4 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	b29a      	uxth	r2, r3
 8004192:	8a7b      	ldrh	r3, [r7, #18]
 8004194:	4013      	ands	r3, r2
 8004196:	b29a      	uxth	r2, r3
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	3302      	adds	r3, #2
 80041a0:	61bb      	str	r3, [r7, #24]
 80041a2:	e00c      	b.n	80041be <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	8a7b      	ldrh	r3, [r7, #18]
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	4013      	ands	r3, r2
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	3301      	adds	r3, #1
 80041bc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	3b01      	subs	r3, #1
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1c6      	bne.n	800416a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2220      	movs	r2, #32
 80041e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80041e4:	2300      	movs	r3, #0
 80041e6:	e000      	b.n	80041ea <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80041e8:	2302      	movs	r3, #2
  }
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3720      	adds	r7, #32
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
	...

080041f4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b08b      	sub	sp, #44	; 0x2c
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	4613      	mov	r3, r2
 8004200:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004206:	2b20      	cmp	r3, #32
 8004208:	d147      	bne.n	800429a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <HAL_UART_Transmit_IT+0x22>
 8004210:	88fb      	ldrh	r3, [r7, #6]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e040      	b.n	800429c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	88fa      	ldrh	r2, [r7, #6]
 8004224:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	88fa      	ldrh	r2, [r7, #6]
 800422c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2221      	movs	r2, #33	; 0x21
 8004242:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800424c:	d107      	bne.n	800425e <HAL_UART_Transmit_IT+0x6a>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d103      	bne.n	800425e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	4a13      	ldr	r2, [pc, #76]	; (80042a8 <HAL_UART_Transmit_IT+0xb4>)
 800425a:	66da      	str	r2, [r3, #108]	; 0x6c
 800425c:	e002      	b.n	8004264 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	4a12      	ldr	r2, [pc, #72]	; (80042ac <HAL_UART_Transmit_IT+0xb8>)
 8004262:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	e853 3f00 	ldrex	r3, [r3]
 8004270:	613b      	str	r3, [r7, #16]
   return(result);
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004278:	627b      	str	r3, [r7, #36]	; 0x24
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	461a      	mov	r2, r3
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	623b      	str	r3, [r7, #32]
 8004284:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004286:	69f9      	ldr	r1, [r7, #28]
 8004288:	6a3a      	ldr	r2, [r7, #32]
 800428a:	e841 2300 	strex	r3, r2, [r1]
 800428e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1e6      	bne.n	8004264 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8004296:	2300      	movs	r3, #0
 8004298:	e000      	b.n	800429c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800429a:	2302      	movs	r3, #2
  }
}
 800429c:	4618      	mov	r0, r3
 800429e:	372c      	adds	r7, #44	; 0x2c
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	080054b3 	.word	0x080054b3
 80042ac:	080053fd 	.word	0x080053fd

080042b0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b08a      	sub	sp, #40	; 0x28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	4613      	mov	r3, r2
 80042bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042c4:	2b20      	cmp	r3, #32
 80042c6:	d132      	bne.n	800432e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d002      	beq.n	80042d4 <HAL_UART_Receive_IT+0x24>
 80042ce:	88fb      	ldrh	r3, [r7, #6]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d101      	bne.n	80042d8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e02b      	b.n	8004330 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d018      	beq.n	800431e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	e853 3f00 	ldrex	r3, [r3]
 80042f8:	613b      	str	r3, [r7, #16]
   return(result);
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	461a      	mov	r2, r3
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	623b      	str	r3, [r7, #32]
 800430c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430e:	69f9      	ldr	r1, [r7, #28]
 8004310:	6a3a      	ldr	r2, [r7, #32]
 8004312:	e841 2300 	strex	r3, r2, [r1]
 8004316:	61bb      	str	r3, [r7, #24]
   return(result);
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1e6      	bne.n	80042ec <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800431e:	88fb      	ldrh	r3, [r7, #6]
 8004320:	461a      	mov	r2, r3
 8004322:	68b9      	ldr	r1, [r7, #8]
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f000 ff29 	bl	800517c <UART_Start_Receive_IT>
 800432a:	4603      	mov	r3, r0
 800432c:	e000      	b.n	8004330 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800432e:	2302      	movs	r3, #2
  }
}
 8004330:	4618      	mov	r0, r3
 8004332:	3728      	adds	r7, #40	; 0x28
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b0ba      	sub	sp, #232	; 0xe8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800435e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004362:	f640 030f 	movw	r3, #2063	; 0x80f
 8004366:	4013      	ands	r3, r2
 8004368:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800436c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004370:	2b00      	cmp	r3, #0
 8004372:	d115      	bne.n	80043a0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004378:	f003 0320 	and.w	r3, r3, #32
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00f      	beq.n	80043a0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004384:	f003 0320 	and.w	r3, r3, #32
 8004388:	2b00      	cmp	r3, #0
 800438a:	d009      	beq.n	80043a0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 82ac 	beq.w	80048ee <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	4798      	blx	r3
      }
      return;
 800439e:	e2a6      	b.n	80048ee <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80043a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f000 8117 	beq.w	80045d8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80043aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d106      	bne.n	80043c4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80043b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80043ba:	4b85      	ldr	r3, [pc, #532]	; (80045d0 <HAL_UART_IRQHandler+0x298>)
 80043bc:	4013      	ands	r3, r2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 810a 	beq.w	80045d8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80043c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d011      	beq.n	80043f4 <HAL_UART_IRQHandler+0xbc>
 80043d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00b      	beq.n	80043f4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2201      	movs	r2, #1
 80043e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ea:	f043 0201 	orr.w	r2, r3, #1
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d011      	beq.n	8004424 <HAL_UART_IRQHandler+0xec>
 8004400:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00b      	beq.n	8004424 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2202      	movs	r2, #2
 8004412:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800441a:	f043 0204 	orr.w	r2, r3, #4
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b00      	cmp	r3, #0
 800442e:	d011      	beq.n	8004454 <HAL_UART_IRQHandler+0x11c>
 8004430:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00b      	beq.n	8004454 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2204      	movs	r2, #4
 8004442:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800444a:	f043 0202 	orr.w	r2, r3, #2
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004458:	f003 0308 	and.w	r3, r3, #8
 800445c:	2b00      	cmp	r3, #0
 800445e:	d017      	beq.n	8004490 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004464:	f003 0320 	and.w	r3, r3, #32
 8004468:	2b00      	cmp	r3, #0
 800446a:	d105      	bne.n	8004478 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800446c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004470:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00b      	beq.n	8004490 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2208      	movs	r2, #8
 800447e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004486:	f043 0208 	orr.w	r2, r3, #8
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004498:	2b00      	cmp	r3, #0
 800449a:	d012      	beq.n	80044c2 <HAL_UART_IRQHandler+0x18a>
 800449c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00c      	beq.n	80044c2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044b8:	f043 0220 	orr.w	r2, r3, #32
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 8212 	beq.w	80048f2 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80044ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044d2:	f003 0320 	and.w	r3, r3, #32
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00d      	beq.n	80044f6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80044da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044de:	f003 0320 	and.w	r3, r3, #32
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d007      	beq.n	80044f6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450a:	2b40      	cmp	r3, #64	; 0x40
 800450c:	d005      	beq.n	800451a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800450e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004512:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004516:	2b00      	cmp	r3, #0
 8004518:	d04f      	beq.n	80045ba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 fef4 	bl	8005308 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452a:	2b40      	cmp	r3, #64	; 0x40
 800452c:	d141      	bne.n	80045b2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	3308      	adds	r3, #8
 8004534:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004538:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800453c:	e853 3f00 	ldrex	r3, [r3]
 8004540:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004544:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004548:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800454c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	3308      	adds	r3, #8
 8004556:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800455a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800455e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004562:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004566:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800456a:	e841 2300 	strex	r3, r2, [r1]
 800456e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004572:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1d9      	bne.n	800452e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800457e:	2b00      	cmp	r3, #0
 8004580:	d013      	beq.n	80045aa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004586:	4a13      	ldr	r2, [pc, #76]	; (80045d4 <HAL_UART_IRQHandler+0x29c>)
 8004588:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800458e:	4618      	mov	r0, r3
 8004590:	f7fd f825 	bl	80015de <HAL_DMA_Abort_IT>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d017      	beq.n	80045ca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800459e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80045a4:	4610      	mov	r0, r2
 80045a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045a8:	e00f      	b.n	80045ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f9ac 	bl	8004908 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045b0:	e00b      	b.n	80045ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f9a8 	bl	8004908 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045b8:	e007      	b.n	80045ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f9a4 	bl	8004908 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80045c8:	e193      	b.n	80048f2 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ca:	bf00      	nop
    return;
 80045cc:	e191      	b.n	80048f2 <HAL_UART_IRQHandler+0x5ba>
 80045ce:	bf00      	nop
 80045d0:	04000120 	.word	0x04000120
 80045d4:	080053d1 	.word	0x080053d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045dc:	2b01      	cmp	r3, #1
 80045de:	f040 814c 	bne.w	800487a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80045e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045e6:	f003 0310 	and.w	r3, r3, #16
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f000 8145 	beq.w	800487a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80045f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045f4:	f003 0310 	and.w	r3, r3, #16
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 813e 	beq.w	800487a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2210      	movs	r2, #16
 8004604:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004610:	2b40      	cmp	r3, #64	; 0x40
 8004612:	f040 80b6 	bne.w	8004782 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004622:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004626:	2b00      	cmp	r3, #0
 8004628:	f000 8165 	beq.w	80048f6 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004632:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004636:	429a      	cmp	r2, r3
 8004638:	f080 815d 	bcs.w	80048f6 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004642:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800464a:	69db      	ldr	r3, [r3, #28]
 800464c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004650:	f000 8086 	beq.w	8004760 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004660:	e853 3f00 	ldrex	r3, [r3]
 8004664:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004668:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800466c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004670:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	461a      	mov	r2, r3
 800467a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800467e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004682:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004686:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800468a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800468e:	e841 2300 	strex	r3, r2, [r1]
 8004692:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004696:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1da      	bne.n	8004654 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	3308      	adds	r3, #8
 80046a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046a8:	e853 3f00 	ldrex	r3, [r3]
 80046ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80046ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046b0:	f023 0301 	bic.w	r3, r3, #1
 80046b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	3308      	adds	r3, #8
 80046be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80046c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80046c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80046ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80046ce:	e841 2300 	strex	r3, r2, [r1]
 80046d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80046d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1e1      	bne.n	800469e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	3308      	adds	r3, #8
 80046e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046e4:	e853 3f00 	ldrex	r3, [r3]
 80046e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80046ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	3308      	adds	r3, #8
 80046fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80046fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004700:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004702:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004704:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004706:	e841 2300 	strex	r3, r2, [r1]
 800470a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800470c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1e3      	bne.n	80046da <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2220      	movs	r2, #32
 8004716:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004728:	e853 3f00 	ldrex	r3, [r3]
 800472c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800472e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004730:	f023 0310 	bic.w	r3, r3, #16
 8004734:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	461a      	mov	r2, r3
 800473e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004742:	65bb      	str	r3, [r7, #88]	; 0x58
 8004744:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004746:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004748:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800474a:	e841 2300 	strex	r3, r2, [r1]
 800474e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004750:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1e4      	bne.n	8004720 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800475a:	4618      	mov	r0, r3
 800475c:	f7fc fecf 	bl	80014fe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2202      	movs	r2, #2
 8004764:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004772:	b29b      	uxth	r3, r3
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	b29b      	uxth	r3, r3
 8004778:	4619      	mov	r1, r3
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f8ce 	bl	800491c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004780:	e0b9      	b.n	80048f6 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800478e:	b29b      	uxth	r3, r3
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800479c:	b29b      	uxth	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f000 80ab 	beq.w	80048fa <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80047a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 80a6 	beq.w	80048fa <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b6:	e853 3f00 	ldrex	r3, [r3]
 80047ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	461a      	mov	r2, r3
 80047cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80047d0:	647b      	str	r3, [r7, #68]	; 0x44
 80047d2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047d8:	e841 2300 	strex	r3, r2, [r1]
 80047dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1e4      	bne.n	80047ae <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3308      	adds	r3, #8
 80047ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ee:	e853 3f00 	ldrex	r3, [r3]
 80047f2:	623b      	str	r3, [r7, #32]
   return(result);
 80047f4:	6a3b      	ldr	r3, [r7, #32]
 80047f6:	f023 0301 	bic.w	r3, r3, #1
 80047fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3308      	adds	r3, #8
 8004804:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004808:	633a      	str	r2, [r7, #48]	; 0x30
 800480a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800480e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004810:	e841 2300 	strex	r3, r2, [r1]
 8004814:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1e3      	bne.n	80047e4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2220      	movs	r2, #32
 8004820:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	e853 3f00 	ldrex	r3, [r3]
 800483c:	60fb      	str	r3, [r7, #12]
   return(result);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f023 0310 	bic.w	r3, r3, #16
 8004844:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	461a      	mov	r2, r3
 800484e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004852:	61fb      	str	r3, [r7, #28]
 8004854:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004856:	69b9      	ldr	r1, [r7, #24]
 8004858:	69fa      	ldr	r2, [r7, #28]
 800485a:	e841 2300 	strex	r3, r2, [r1]
 800485e:	617b      	str	r3, [r7, #20]
   return(result);
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1e4      	bne.n	8004830 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2202      	movs	r2, #2
 800486a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800486c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004870:	4619      	mov	r1, r3
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f852 	bl	800491c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004878:	e03f      	b.n	80048fa <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800487a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800487e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00e      	beq.n	80048a4 <HAL_UART_IRQHandler+0x56c>
 8004886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800488a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d008      	beq.n	80048a4 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800489a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f849 	bl	8004934 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80048a2:	e02d      	b.n	8004900 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80048a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00e      	beq.n	80048ce <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80048b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d008      	beq.n	80048ce <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d01c      	beq.n	80048fe <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	4798      	blx	r3
    }
    return;
 80048cc:	e017      	b.n	80048fe <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80048ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d012      	beq.n	8004900 <HAL_UART_IRQHandler+0x5c8>
 80048da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00c      	beq.n	8004900 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 fe43 	bl	8005572 <UART_EndTransmit_IT>
    return;
 80048ec:	e008      	b.n	8004900 <HAL_UART_IRQHandler+0x5c8>
      return;
 80048ee:	bf00      	nop
 80048f0:	e006      	b.n	8004900 <HAL_UART_IRQHandler+0x5c8>
    return;
 80048f2:	bf00      	nop
 80048f4:	e004      	b.n	8004900 <HAL_UART_IRQHandler+0x5c8>
      return;
 80048f6:	bf00      	nop
 80048f8:	e002      	b.n	8004900 <HAL_UART_IRQHandler+0x5c8>
      return;
 80048fa:	bf00      	nop
 80048fc:	e000      	b.n	8004900 <HAL_UART_IRQHandler+0x5c8>
    return;
 80048fe:	bf00      	nop
  }

}
 8004900:	37e8      	adds	r7, #232	; 0xe8
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop

08004908 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	460b      	mov	r3, r1
 8004926:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b088      	sub	sp, #32
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004950:	2300      	movs	r3, #0
 8004952:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	431a      	orrs	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	69db      	ldr	r3, [r3, #28]
 8004968:	4313      	orrs	r3, r2
 800496a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	4ba6      	ldr	r3, [pc, #664]	; (8004c0c <UART_SetConfig+0x2c4>)
 8004974:	4013      	ands	r3, r2
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	6812      	ldr	r2, [r2, #0]
 800497a:	6979      	ldr	r1, [r7, #20]
 800497c:	430b      	orrs	r3, r1
 800497e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68da      	ldr	r2, [r3, #12]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	430a      	orrs	r2, r1
 8004994:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a94      	ldr	r2, [pc, #592]	; (8004c10 <UART_SetConfig+0x2c8>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d120      	bne.n	8004a06 <UART_SetConfig+0xbe>
 80049c4:	4b93      	ldr	r3, [pc, #588]	; (8004c14 <UART_SetConfig+0x2cc>)
 80049c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ca:	f003 0303 	and.w	r3, r3, #3
 80049ce:	2b03      	cmp	r3, #3
 80049d0:	d816      	bhi.n	8004a00 <UART_SetConfig+0xb8>
 80049d2:	a201      	add	r2, pc, #4	; (adr r2, 80049d8 <UART_SetConfig+0x90>)
 80049d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d8:	080049e9 	.word	0x080049e9
 80049dc:	080049f5 	.word	0x080049f5
 80049e0:	080049ef 	.word	0x080049ef
 80049e4:	080049fb 	.word	0x080049fb
 80049e8:	2301      	movs	r3, #1
 80049ea:	77fb      	strb	r3, [r7, #31]
 80049ec:	e150      	b.n	8004c90 <UART_SetConfig+0x348>
 80049ee:	2302      	movs	r3, #2
 80049f0:	77fb      	strb	r3, [r7, #31]
 80049f2:	e14d      	b.n	8004c90 <UART_SetConfig+0x348>
 80049f4:	2304      	movs	r3, #4
 80049f6:	77fb      	strb	r3, [r7, #31]
 80049f8:	e14a      	b.n	8004c90 <UART_SetConfig+0x348>
 80049fa:	2308      	movs	r3, #8
 80049fc:	77fb      	strb	r3, [r7, #31]
 80049fe:	e147      	b.n	8004c90 <UART_SetConfig+0x348>
 8004a00:	2310      	movs	r3, #16
 8004a02:	77fb      	strb	r3, [r7, #31]
 8004a04:	e144      	b.n	8004c90 <UART_SetConfig+0x348>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a83      	ldr	r2, [pc, #524]	; (8004c18 <UART_SetConfig+0x2d0>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d132      	bne.n	8004a76 <UART_SetConfig+0x12e>
 8004a10:	4b80      	ldr	r3, [pc, #512]	; (8004c14 <UART_SetConfig+0x2cc>)
 8004a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a16:	f003 030c 	and.w	r3, r3, #12
 8004a1a:	2b0c      	cmp	r3, #12
 8004a1c:	d828      	bhi.n	8004a70 <UART_SetConfig+0x128>
 8004a1e:	a201      	add	r2, pc, #4	; (adr r2, 8004a24 <UART_SetConfig+0xdc>)
 8004a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a24:	08004a59 	.word	0x08004a59
 8004a28:	08004a71 	.word	0x08004a71
 8004a2c:	08004a71 	.word	0x08004a71
 8004a30:	08004a71 	.word	0x08004a71
 8004a34:	08004a65 	.word	0x08004a65
 8004a38:	08004a71 	.word	0x08004a71
 8004a3c:	08004a71 	.word	0x08004a71
 8004a40:	08004a71 	.word	0x08004a71
 8004a44:	08004a5f 	.word	0x08004a5f
 8004a48:	08004a71 	.word	0x08004a71
 8004a4c:	08004a71 	.word	0x08004a71
 8004a50:	08004a71 	.word	0x08004a71
 8004a54:	08004a6b 	.word	0x08004a6b
 8004a58:	2300      	movs	r3, #0
 8004a5a:	77fb      	strb	r3, [r7, #31]
 8004a5c:	e118      	b.n	8004c90 <UART_SetConfig+0x348>
 8004a5e:	2302      	movs	r3, #2
 8004a60:	77fb      	strb	r3, [r7, #31]
 8004a62:	e115      	b.n	8004c90 <UART_SetConfig+0x348>
 8004a64:	2304      	movs	r3, #4
 8004a66:	77fb      	strb	r3, [r7, #31]
 8004a68:	e112      	b.n	8004c90 <UART_SetConfig+0x348>
 8004a6a:	2308      	movs	r3, #8
 8004a6c:	77fb      	strb	r3, [r7, #31]
 8004a6e:	e10f      	b.n	8004c90 <UART_SetConfig+0x348>
 8004a70:	2310      	movs	r3, #16
 8004a72:	77fb      	strb	r3, [r7, #31]
 8004a74:	e10c      	b.n	8004c90 <UART_SetConfig+0x348>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a68      	ldr	r2, [pc, #416]	; (8004c1c <UART_SetConfig+0x2d4>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d120      	bne.n	8004ac2 <UART_SetConfig+0x17a>
 8004a80:	4b64      	ldr	r3, [pc, #400]	; (8004c14 <UART_SetConfig+0x2cc>)
 8004a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a86:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a8a:	2b30      	cmp	r3, #48	; 0x30
 8004a8c:	d013      	beq.n	8004ab6 <UART_SetConfig+0x16e>
 8004a8e:	2b30      	cmp	r3, #48	; 0x30
 8004a90:	d814      	bhi.n	8004abc <UART_SetConfig+0x174>
 8004a92:	2b20      	cmp	r3, #32
 8004a94:	d009      	beq.n	8004aaa <UART_SetConfig+0x162>
 8004a96:	2b20      	cmp	r3, #32
 8004a98:	d810      	bhi.n	8004abc <UART_SetConfig+0x174>
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d002      	beq.n	8004aa4 <UART_SetConfig+0x15c>
 8004a9e:	2b10      	cmp	r3, #16
 8004aa0:	d006      	beq.n	8004ab0 <UART_SetConfig+0x168>
 8004aa2:	e00b      	b.n	8004abc <UART_SetConfig+0x174>
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	77fb      	strb	r3, [r7, #31]
 8004aa8:	e0f2      	b.n	8004c90 <UART_SetConfig+0x348>
 8004aaa:	2302      	movs	r3, #2
 8004aac:	77fb      	strb	r3, [r7, #31]
 8004aae:	e0ef      	b.n	8004c90 <UART_SetConfig+0x348>
 8004ab0:	2304      	movs	r3, #4
 8004ab2:	77fb      	strb	r3, [r7, #31]
 8004ab4:	e0ec      	b.n	8004c90 <UART_SetConfig+0x348>
 8004ab6:	2308      	movs	r3, #8
 8004ab8:	77fb      	strb	r3, [r7, #31]
 8004aba:	e0e9      	b.n	8004c90 <UART_SetConfig+0x348>
 8004abc:	2310      	movs	r3, #16
 8004abe:	77fb      	strb	r3, [r7, #31]
 8004ac0:	e0e6      	b.n	8004c90 <UART_SetConfig+0x348>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a56      	ldr	r2, [pc, #344]	; (8004c20 <UART_SetConfig+0x2d8>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d120      	bne.n	8004b0e <UART_SetConfig+0x1c6>
 8004acc:	4b51      	ldr	r3, [pc, #324]	; (8004c14 <UART_SetConfig+0x2cc>)
 8004ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ad6:	2bc0      	cmp	r3, #192	; 0xc0
 8004ad8:	d013      	beq.n	8004b02 <UART_SetConfig+0x1ba>
 8004ada:	2bc0      	cmp	r3, #192	; 0xc0
 8004adc:	d814      	bhi.n	8004b08 <UART_SetConfig+0x1c0>
 8004ade:	2b80      	cmp	r3, #128	; 0x80
 8004ae0:	d009      	beq.n	8004af6 <UART_SetConfig+0x1ae>
 8004ae2:	2b80      	cmp	r3, #128	; 0x80
 8004ae4:	d810      	bhi.n	8004b08 <UART_SetConfig+0x1c0>
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d002      	beq.n	8004af0 <UART_SetConfig+0x1a8>
 8004aea:	2b40      	cmp	r3, #64	; 0x40
 8004aec:	d006      	beq.n	8004afc <UART_SetConfig+0x1b4>
 8004aee:	e00b      	b.n	8004b08 <UART_SetConfig+0x1c0>
 8004af0:	2300      	movs	r3, #0
 8004af2:	77fb      	strb	r3, [r7, #31]
 8004af4:	e0cc      	b.n	8004c90 <UART_SetConfig+0x348>
 8004af6:	2302      	movs	r3, #2
 8004af8:	77fb      	strb	r3, [r7, #31]
 8004afa:	e0c9      	b.n	8004c90 <UART_SetConfig+0x348>
 8004afc:	2304      	movs	r3, #4
 8004afe:	77fb      	strb	r3, [r7, #31]
 8004b00:	e0c6      	b.n	8004c90 <UART_SetConfig+0x348>
 8004b02:	2308      	movs	r3, #8
 8004b04:	77fb      	strb	r3, [r7, #31]
 8004b06:	e0c3      	b.n	8004c90 <UART_SetConfig+0x348>
 8004b08:	2310      	movs	r3, #16
 8004b0a:	77fb      	strb	r3, [r7, #31]
 8004b0c:	e0c0      	b.n	8004c90 <UART_SetConfig+0x348>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a44      	ldr	r2, [pc, #272]	; (8004c24 <UART_SetConfig+0x2dc>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d125      	bne.n	8004b64 <UART_SetConfig+0x21c>
 8004b18:	4b3e      	ldr	r3, [pc, #248]	; (8004c14 <UART_SetConfig+0x2cc>)
 8004b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b26:	d017      	beq.n	8004b58 <UART_SetConfig+0x210>
 8004b28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b2c:	d817      	bhi.n	8004b5e <UART_SetConfig+0x216>
 8004b2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b32:	d00b      	beq.n	8004b4c <UART_SetConfig+0x204>
 8004b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b38:	d811      	bhi.n	8004b5e <UART_SetConfig+0x216>
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <UART_SetConfig+0x1fe>
 8004b3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b42:	d006      	beq.n	8004b52 <UART_SetConfig+0x20a>
 8004b44:	e00b      	b.n	8004b5e <UART_SetConfig+0x216>
 8004b46:	2300      	movs	r3, #0
 8004b48:	77fb      	strb	r3, [r7, #31]
 8004b4a:	e0a1      	b.n	8004c90 <UART_SetConfig+0x348>
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	77fb      	strb	r3, [r7, #31]
 8004b50:	e09e      	b.n	8004c90 <UART_SetConfig+0x348>
 8004b52:	2304      	movs	r3, #4
 8004b54:	77fb      	strb	r3, [r7, #31]
 8004b56:	e09b      	b.n	8004c90 <UART_SetConfig+0x348>
 8004b58:	2308      	movs	r3, #8
 8004b5a:	77fb      	strb	r3, [r7, #31]
 8004b5c:	e098      	b.n	8004c90 <UART_SetConfig+0x348>
 8004b5e:	2310      	movs	r3, #16
 8004b60:	77fb      	strb	r3, [r7, #31]
 8004b62:	e095      	b.n	8004c90 <UART_SetConfig+0x348>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a2f      	ldr	r2, [pc, #188]	; (8004c28 <UART_SetConfig+0x2e0>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d125      	bne.n	8004bba <UART_SetConfig+0x272>
 8004b6e:	4b29      	ldr	r3, [pc, #164]	; (8004c14 <UART_SetConfig+0x2cc>)
 8004b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b7c:	d017      	beq.n	8004bae <UART_SetConfig+0x266>
 8004b7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b82:	d817      	bhi.n	8004bb4 <UART_SetConfig+0x26c>
 8004b84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b88:	d00b      	beq.n	8004ba2 <UART_SetConfig+0x25a>
 8004b8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b8e:	d811      	bhi.n	8004bb4 <UART_SetConfig+0x26c>
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d003      	beq.n	8004b9c <UART_SetConfig+0x254>
 8004b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b98:	d006      	beq.n	8004ba8 <UART_SetConfig+0x260>
 8004b9a:	e00b      	b.n	8004bb4 <UART_SetConfig+0x26c>
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	77fb      	strb	r3, [r7, #31]
 8004ba0:	e076      	b.n	8004c90 <UART_SetConfig+0x348>
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	77fb      	strb	r3, [r7, #31]
 8004ba6:	e073      	b.n	8004c90 <UART_SetConfig+0x348>
 8004ba8:	2304      	movs	r3, #4
 8004baa:	77fb      	strb	r3, [r7, #31]
 8004bac:	e070      	b.n	8004c90 <UART_SetConfig+0x348>
 8004bae:	2308      	movs	r3, #8
 8004bb0:	77fb      	strb	r3, [r7, #31]
 8004bb2:	e06d      	b.n	8004c90 <UART_SetConfig+0x348>
 8004bb4:	2310      	movs	r3, #16
 8004bb6:	77fb      	strb	r3, [r7, #31]
 8004bb8:	e06a      	b.n	8004c90 <UART_SetConfig+0x348>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a1b      	ldr	r2, [pc, #108]	; (8004c2c <UART_SetConfig+0x2e4>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d138      	bne.n	8004c36 <UART_SetConfig+0x2ee>
 8004bc4:	4b13      	ldr	r3, [pc, #76]	; (8004c14 <UART_SetConfig+0x2cc>)
 8004bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bca:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004bce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bd2:	d017      	beq.n	8004c04 <UART_SetConfig+0x2bc>
 8004bd4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bd8:	d82a      	bhi.n	8004c30 <UART_SetConfig+0x2e8>
 8004bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bde:	d00b      	beq.n	8004bf8 <UART_SetConfig+0x2b0>
 8004be0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004be4:	d824      	bhi.n	8004c30 <UART_SetConfig+0x2e8>
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <UART_SetConfig+0x2aa>
 8004bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bee:	d006      	beq.n	8004bfe <UART_SetConfig+0x2b6>
 8004bf0:	e01e      	b.n	8004c30 <UART_SetConfig+0x2e8>
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	77fb      	strb	r3, [r7, #31]
 8004bf6:	e04b      	b.n	8004c90 <UART_SetConfig+0x348>
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	77fb      	strb	r3, [r7, #31]
 8004bfc:	e048      	b.n	8004c90 <UART_SetConfig+0x348>
 8004bfe:	2304      	movs	r3, #4
 8004c00:	77fb      	strb	r3, [r7, #31]
 8004c02:	e045      	b.n	8004c90 <UART_SetConfig+0x348>
 8004c04:	2308      	movs	r3, #8
 8004c06:	77fb      	strb	r3, [r7, #31]
 8004c08:	e042      	b.n	8004c90 <UART_SetConfig+0x348>
 8004c0a:	bf00      	nop
 8004c0c:	efff69f3 	.word	0xefff69f3
 8004c10:	40011000 	.word	0x40011000
 8004c14:	40023800 	.word	0x40023800
 8004c18:	40004400 	.word	0x40004400
 8004c1c:	40004800 	.word	0x40004800
 8004c20:	40004c00 	.word	0x40004c00
 8004c24:	40005000 	.word	0x40005000
 8004c28:	40011400 	.word	0x40011400
 8004c2c:	40007800 	.word	0x40007800
 8004c30:	2310      	movs	r3, #16
 8004c32:	77fb      	strb	r3, [r7, #31]
 8004c34:	e02c      	b.n	8004c90 <UART_SetConfig+0x348>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a72      	ldr	r2, [pc, #456]	; (8004e04 <UART_SetConfig+0x4bc>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d125      	bne.n	8004c8c <UART_SetConfig+0x344>
 8004c40:	4b71      	ldr	r3, [pc, #452]	; (8004e08 <UART_SetConfig+0x4c0>)
 8004c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c46:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004c4a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c4e:	d017      	beq.n	8004c80 <UART_SetConfig+0x338>
 8004c50:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c54:	d817      	bhi.n	8004c86 <UART_SetConfig+0x33e>
 8004c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c5a:	d00b      	beq.n	8004c74 <UART_SetConfig+0x32c>
 8004c5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c60:	d811      	bhi.n	8004c86 <UART_SetConfig+0x33e>
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <UART_SetConfig+0x326>
 8004c66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c6a:	d006      	beq.n	8004c7a <UART_SetConfig+0x332>
 8004c6c:	e00b      	b.n	8004c86 <UART_SetConfig+0x33e>
 8004c6e:	2300      	movs	r3, #0
 8004c70:	77fb      	strb	r3, [r7, #31]
 8004c72:	e00d      	b.n	8004c90 <UART_SetConfig+0x348>
 8004c74:	2302      	movs	r3, #2
 8004c76:	77fb      	strb	r3, [r7, #31]
 8004c78:	e00a      	b.n	8004c90 <UART_SetConfig+0x348>
 8004c7a:	2304      	movs	r3, #4
 8004c7c:	77fb      	strb	r3, [r7, #31]
 8004c7e:	e007      	b.n	8004c90 <UART_SetConfig+0x348>
 8004c80:	2308      	movs	r3, #8
 8004c82:	77fb      	strb	r3, [r7, #31]
 8004c84:	e004      	b.n	8004c90 <UART_SetConfig+0x348>
 8004c86:	2310      	movs	r3, #16
 8004c88:	77fb      	strb	r3, [r7, #31]
 8004c8a:	e001      	b.n	8004c90 <UART_SetConfig+0x348>
 8004c8c:	2310      	movs	r3, #16
 8004c8e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	69db      	ldr	r3, [r3, #28]
 8004c94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c98:	d15b      	bne.n	8004d52 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004c9a:	7ffb      	ldrb	r3, [r7, #31]
 8004c9c:	2b08      	cmp	r3, #8
 8004c9e:	d828      	bhi.n	8004cf2 <UART_SetConfig+0x3aa>
 8004ca0:	a201      	add	r2, pc, #4	; (adr r2, 8004ca8 <UART_SetConfig+0x360>)
 8004ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca6:	bf00      	nop
 8004ca8:	08004ccd 	.word	0x08004ccd
 8004cac:	08004cd5 	.word	0x08004cd5
 8004cb0:	08004cdd 	.word	0x08004cdd
 8004cb4:	08004cf3 	.word	0x08004cf3
 8004cb8:	08004ce3 	.word	0x08004ce3
 8004cbc:	08004cf3 	.word	0x08004cf3
 8004cc0:	08004cf3 	.word	0x08004cf3
 8004cc4:	08004cf3 	.word	0x08004cf3
 8004cc8:	08004ceb 	.word	0x08004ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ccc:	f7fd fb6a 	bl	80023a4 <HAL_RCC_GetPCLK1Freq>
 8004cd0:	61b8      	str	r0, [r7, #24]
        break;
 8004cd2:	e013      	b.n	8004cfc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cd4:	f7fd fb7a 	bl	80023cc <HAL_RCC_GetPCLK2Freq>
 8004cd8:	61b8      	str	r0, [r7, #24]
        break;
 8004cda:	e00f      	b.n	8004cfc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cdc:	4b4b      	ldr	r3, [pc, #300]	; (8004e0c <UART_SetConfig+0x4c4>)
 8004cde:	61bb      	str	r3, [r7, #24]
        break;
 8004ce0:	e00c      	b.n	8004cfc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ce2:	f7fd fa4d 	bl	8002180 <HAL_RCC_GetSysClockFreq>
 8004ce6:	61b8      	str	r0, [r7, #24]
        break;
 8004ce8:	e008      	b.n	8004cfc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cee:	61bb      	str	r3, [r7, #24]
        break;
 8004cf0:	e004      	b.n	8004cfc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	77bb      	strb	r3, [r7, #30]
        break;
 8004cfa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d074      	beq.n	8004dec <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	005a      	lsls	r2, r3, #1
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	085b      	lsrs	r3, r3, #1
 8004d0c:	441a      	add	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d16:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	2b0f      	cmp	r3, #15
 8004d1c:	d916      	bls.n	8004d4c <UART_SetConfig+0x404>
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d24:	d212      	bcs.n	8004d4c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	f023 030f 	bic.w	r3, r3, #15
 8004d2e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	085b      	lsrs	r3, r3, #1
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	f003 0307 	and.w	r3, r3, #7
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	89fb      	ldrh	r3, [r7, #14]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	89fa      	ldrh	r2, [r7, #14]
 8004d48:	60da      	str	r2, [r3, #12]
 8004d4a:	e04f      	b.n	8004dec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	77bb      	strb	r3, [r7, #30]
 8004d50:	e04c      	b.n	8004dec <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d52:	7ffb      	ldrb	r3, [r7, #31]
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d828      	bhi.n	8004daa <UART_SetConfig+0x462>
 8004d58:	a201      	add	r2, pc, #4	; (adr r2, 8004d60 <UART_SetConfig+0x418>)
 8004d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5e:	bf00      	nop
 8004d60:	08004d85 	.word	0x08004d85
 8004d64:	08004d8d 	.word	0x08004d8d
 8004d68:	08004d95 	.word	0x08004d95
 8004d6c:	08004dab 	.word	0x08004dab
 8004d70:	08004d9b 	.word	0x08004d9b
 8004d74:	08004dab 	.word	0x08004dab
 8004d78:	08004dab 	.word	0x08004dab
 8004d7c:	08004dab 	.word	0x08004dab
 8004d80:	08004da3 	.word	0x08004da3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d84:	f7fd fb0e 	bl	80023a4 <HAL_RCC_GetPCLK1Freq>
 8004d88:	61b8      	str	r0, [r7, #24]
        break;
 8004d8a:	e013      	b.n	8004db4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d8c:	f7fd fb1e 	bl	80023cc <HAL_RCC_GetPCLK2Freq>
 8004d90:	61b8      	str	r0, [r7, #24]
        break;
 8004d92:	e00f      	b.n	8004db4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d94:	4b1d      	ldr	r3, [pc, #116]	; (8004e0c <UART_SetConfig+0x4c4>)
 8004d96:	61bb      	str	r3, [r7, #24]
        break;
 8004d98:	e00c      	b.n	8004db4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d9a:	f7fd f9f1 	bl	8002180 <HAL_RCC_GetSysClockFreq>
 8004d9e:	61b8      	str	r0, [r7, #24]
        break;
 8004da0:	e008      	b.n	8004db4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004da6:	61bb      	str	r3, [r7, #24]
        break;
 8004da8:	e004      	b.n	8004db4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004daa:	2300      	movs	r3, #0
 8004dac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	77bb      	strb	r3, [r7, #30]
        break;
 8004db2:	bf00      	nop
    }

    if (pclk != 0U)
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d018      	beq.n	8004dec <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	085a      	lsrs	r2, r3, #1
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	441a      	add	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dcc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	2b0f      	cmp	r3, #15
 8004dd2:	d909      	bls.n	8004de8 <UART_SetConfig+0x4a0>
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dda:	d205      	bcs.n	8004de8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	60da      	str	r2, [r3, #12]
 8004de6:	e001      	b.n	8004dec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004df8:	7fbb      	ldrb	r3, [r7, #30]
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3720      	adds	r7, #32
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	40007c00 	.word	0x40007c00
 8004e08:	40023800 	.word	0x40023800
 8004e0c:	00f42400 	.word	0x00f42400

08004e10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00a      	beq.n	8004e3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00a      	beq.n	8004e5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e60:	f003 0304 	and.w	r3, r3, #4
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00a      	beq.n	8004e7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e82:	f003 0308 	and.w	r3, r3, #8
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00a      	beq.n	8004ea0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea4:	f003 0310 	and.w	r3, r3, #16
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00a      	beq.n	8004ec2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	f003 0320 	and.w	r3, r3, #32
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00a      	beq.n	8004ee4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d01a      	beq.n	8004f26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f0e:	d10a      	bne.n	8004f26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00a      	beq.n	8004f48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	430a      	orrs	r2, r1
 8004f46:	605a      	str	r2, [r3, #4]
  }
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af02      	add	r7, sp, #8
 8004f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f64:	f7fc f9ae 	bl	80012c4 <HAL_GetTick>
 8004f68:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0308 	and.w	r3, r3, #8
 8004f74:	2b08      	cmp	r3, #8
 8004f76:	d10e      	bne.n	8004f96 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f831 	bl	8004fee <UART_WaitOnFlagUntilTimeout>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e027      	b.n	8004fe6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0304 	and.w	r3, r3, #4
 8004fa0:	2b04      	cmp	r3, #4
 8004fa2:	d10e      	bne.n	8004fc2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fa4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f81b 	bl	8004fee <UART_WaitOnFlagUntilTimeout>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e011      	b.n	8004fe6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b09c      	sub	sp, #112	; 0x70
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	60f8      	str	r0, [r7, #12]
 8004ff6:	60b9      	str	r1, [r7, #8]
 8004ff8:	603b      	str	r3, [r7, #0]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ffe:	e0a7      	b.n	8005150 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005000:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005006:	f000 80a3 	beq.w	8005150 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800500a:	f7fc f95b 	bl	80012c4 <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005016:	429a      	cmp	r2, r3
 8005018:	d302      	bcc.n	8005020 <UART_WaitOnFlagUntilTimeout+0x32>
 800501a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800501c:	2b00      	cmp	r3, #0
 800501e:	d13f      	bne.n	80050a0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005028:	e853 3f00 	ldrex	r3, [r3]
 800502c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800502e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005030:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005034:	667b      	str	r3, [r7, #100]	; 0x64
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	461a      	mov	r2, r3
 800503c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800503e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005040:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005042:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005044:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005046:	e841 2300 	strex	r3, r2, [r1]
 800504a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800504c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1e6      	bne.n	8005020 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	3308      	adds	r3, #8
 8005058:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800505c:	e853 3f00 	ldrex	r3, [r3]
 8005060:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005064:	f023 0301 	bic.w	r3, r3, #1
 8005068:	663b      	str	r3, [r7, #96]	; 0x60
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	3308      	adds	r3, #8
 8005070:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005072:	64ba      	str	r2, [r7, #72]	; 0x48
 8005074:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005076:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005078:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800507a:	e841 2300 	strex	r3, r2, [r1]
 800507e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1e5      	bne.n	8005052 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2220      	movs	r2, #32
 800508a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2220      	movs	r2, #32
 8005090:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e068      	b.n	8005172 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0304 	and.w	r3, r3, #4
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d050      	beq.n	8005150 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	69db      	ldr	r3, [r3, #28]
 80050b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050bc:	d148      	bne.n	8005150 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050c6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d0:	e853 3f00 	ldrex	r3, [r3]
 80050d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	461a      	mov	r2, r3
 80050e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050e6:	637b      	str	r3, [r7, #52]	; 0x34
 80050e8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050ee:	e841 2300 	strex	r3, r2, [r1]
 80050f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80050f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1e6      	bne.n	80050c8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	3308      	adds	r3, #8
 8005100:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	e853 3f00 	ldrex	r3, [r3]
 8005108:	613b      	str	r3, [r7, #16]
   return(result);
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	f023 0301 	bic.w	r3, r3, #1
 8005110:	66bb      	str	r3, [r7, #104]	; 0x68
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	3308      	adds	r3, #8
 8005118:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800511a:	623a      	str	r2, [r7, #32]
 800511c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511e:	69f9      	ldr	r1, [r7, #28]
 8005120:	6a3a      	ldr	r2, [r7, #32]
 8005122:	e841 2300 	strex	r3, r2, [r1]
 8005126:	61bb      	str	r3, [r7, #24]
   return(result);
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1e5      	bne.n	80050fa <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2220      	movs	r2, #32
 8005132:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2220      	movs	r2, #32
 8005138:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2220      	movs	r2, #32
 8005140:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e010      	b.n	8005172 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	69da      	ldr	r2, [r3, #28]
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	4013      	ands	r3, r2
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	429a      	cmp	r2, r3
 800515e:	bf0c      	ite	eq
 8005160:	2301      	moveq	r3, #1
 8005162:	2300      	movne	r3, #0
 8005164:	b2db      	uxtb	r3, r3
 8005166:	461a      	mov	r2, r3
 8005168:	79fb      	ldrb	r3, [r7, #7]
 800516a:	429a      	cmp	r2, r3
 800516c:	f43f af48 	beq.w	8005000 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3770      	adds	r7, #112	; 0x70
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
	...

0800517c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800517c:	b480      	push	{r7}
 800517e:	b097      	sub	sp, #92	; 0x5c
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	4613      	mov	r3, r2
 8005188:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	88fa      	ldrh	r2, [r7, #6]
 8005194:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	88fa      	ldrh	r2, [r7, #6]
 800519c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ae:	d10e      	bne.n	80051ce <UART_Start_Receive_IT+0x52>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d105      	bne.n	80051c4 <UART_Start_Receive_IT+0x48>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f240 12ff 	movw	r2, #511	; 0x1ff
 80051be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051c2:	e02d      	b.n	8005220 <UART_Start_Receive_IT+0xa4>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	22ff      	movs	r2, #255	; 0xff
 80051c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051cc:	e028      	b.n	8005220 <UART_Start_Receive_IT+0xa4>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10d      	bne.n	80051f2 <UART_Start_Receive_IT+0x76>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d104      	bne.n	80051e8 <UART_Start_Receive_IT+0x6c>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	22ff      	movs	r2, #255	; 0xff
 80051e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051e6:	e01b      	b.n	8005220 <UART_Start_Receive_IT+0xa4>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	227f      	movs	r2, #127	; 0x7f
 80051ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80051f0:	e016      	b.n	8005220 <UART_Start_Receive_IT+0xa4>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051fa:	d10d      	bne.n	8005218 <UART_Start_Receive_IT+0x9c>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d104      	bne.n	800520e <UART_Start_Receive_IT+0x92>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	227f      	movs	r2, #127	; 0x7f
 8005208:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800520c:	e008      	b.n	8005220 <UART_Start_Receive_IT+0xa4>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	223f      	movs	r2, #63	; 0x3f
 8005212:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005216:	e003      	b.n	8005220 <UART_Start_Receive_IT+0xa4>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2222      	movs	r2, #34	; 0x22
 800522c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	3308      	adds	r3, #8
 8005236:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800523a:	e853 3f00 	ldrex	r3, [r3]
 800523e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005242:	f043 0301 	orr.w	r3, r3, #1
 8005246:	657b      	str	r3, [r7, #84]	; 0x54
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	3308      	adds	r3, #8
 800524e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005250:	64ba      	str	r2, [r7, #72]	; 0x48
 8005252:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005254:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005256:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005258:	e841 2300 	strex	r3, r2, [r1]
 800525c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800525e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1e5      	bne.n	8005230 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800526c:	d107      	bne.n	800527e <UART_Start_Receive_IT+0x102>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d103      	bne.n	800527e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	4a21      	ldr	r2, [pc, #132]	; (8005300 <UART_Start_Receive_IT+0x184>)
 800527a:	669a      	str	r2, [r3, #104]	; 0x68
 800527c:	e002      	b.n	8005284 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	4a20      	ldr	r2, [pc, #128]	; (8005304 <UART_Start_Receive_IT+0x188>)
 8005282:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d019      	beq.n	80052c0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005294:	e853 3f00 	ldrex	r3, [r3]
 8005298:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80052a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	461a      	mov	r2, r3
 80052a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052aa:	637b      	str	r3, [r7, #52]	; 0x34
 80052ac:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052b2:	e841 2300 	strex	r3, r2, [r1]
 80052b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80052b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1e6      	bne.n	800528c <UART_Start_Receive_IT+0x110>
 80052be:	e018      	b.n	80052f2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	e853 3f00 	ldrex	r3, [r3]
 80052cc:	613b      	str	r3, [r7, #16]
   return(result);
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	f043 0320 	orr.w	r3, r3, #32
 80052d4:	653b      	str	r3, [r7, #80]	; 0x50
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	461a      	mov	r2, r3
 80052dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052de:	623b      	str	r3, [r7, #32]
 80052e0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e2:	69f9      	ldr	r1, [r7, #28]
 80052e4:	6a3a      	ldr	r2, [r7, #32]
 80052e6:	e841 2300 	strex	r3, r2, [r1]
 80052ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1e6      	bne.n	80052c0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	375c      	adds	r7, #92	; 0x5c
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	0800572d 	.word	0x0800572d
 8005304:	080055c7 	.word	0x080055c7

08005308 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005308:	b480      	push	{r7}
 800530a:	b095      	sub	sp, #84	; 0x54
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005318:	e853 3f00 	ldrex	r3, [r3]
 800531c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800531e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005320:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005324:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	461a      	mov	r2, r3
 800532c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800532e:	643b      	str	r3, [r7, #64]	; 0x40
 8005330:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005332:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005334:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005336:	e841 2300 	strex	r3, r2, [r1]
 800533a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800533c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1e6      	bne.n	8005310 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	3308      	adds	r3, #8
 8005348:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534a:	6a3b      	ldr	r3, [r7, #32]
 800534c:	e853 3f00 	ldrex	r3, [r3]
 8005350:	61fb      	str	r3, [r7, #28]
   return(result);
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	f023 0301 	bic.w	r3, r3, #1
 8005358:	64bb      	str	r3, [r7, #72]	; 0x48
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	3308      	adds	r3, #8
 8005360:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005362:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005364:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005366:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005368:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800536a:	e841 2300 	strex	r3, r2, [r1]
 800536e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1e5      	bne.n	8005342 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800537a:	2b01      	cmp	r3, #1
 800537c:	d118      	bne.n	80053b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	e853 3f00 	ldrex	r3, [r3]
 800538a:	60bb      	str	r3, [r7, #8]
   return(result);
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	f023 0310 	bic.w	r3, r3, #16
 8005392:	647b      	str	r3, [r7, #68]	; 0x44
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	461a      	mov	r2, r3
 800539a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800539c:	61bb      	str	r3, [r7, #24]
 800539e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a0:	6979      	ldr	r1, [r7, #20]
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	e841 2300 	strex	r3, r2, [r1]
 80053a8:	613b      	str	r3, [r7, #16]
   return(result);
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1e6      	bne.n	800537e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2220      	movs	r2, #32
 80053b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80053c4:	bf00      	nop
 80053c6:	3754      	adds	r7, #84	; 0x54
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f7ff fa8a 	bl	8004908 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053f4:	bf00      	nop
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b08f      	sub	sp, #60	; 0x3c
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005408:	2b21      	cmp	r3, #33	; 0x21
 800540a:	d14c      	bne.n	80054a6 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005412:	b29b      	uxth	r3, r3
 8005414:	2b00      	cmp	r3, #0
 8005416:	d132      	bne.n	800547e <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541e:	6a3b      	ldr	r3, [r7, #32]
 8005420:	e853 3f00 	ldrex	r3, [r3]
 8005424:	61fb      	str	r3, [r7, #28]
   return(result);
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800542c:	637b      	str	r3, [r7, #52]	; 0x34
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	461a      	mov	r2, r3
 8005434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005436:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005438:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800543c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800543e:	e841 2300 	strex	r3, r2, [r1]
 8005442:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1e6      	bne.n	8005418 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	e853 3f00 	ldrex	r3, [r3]
 8005456:	60bb      	str	r3, [r7, #8]
   return(result);
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800545e:	633b      	str	r3, [r7, #48]	; 0x30
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	461a      	mov	r2, r3
 8005466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005468:	61bb      	str	r3, [r7, #24]
 800546a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546c:	6979      	ldr	r1, [r7, #20]
 800546e:	69ba      	ldr	r2, [r7, #24]
 8005470:	e841 2300 	strex	r3, r2, [r1]
 8005474:	613b      	str	r3, [r7, #16]
   return(result);
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d1e6      	bne.n	800544a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800547c:	e013      	b.n	80054a6 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005482:	781a      	ldrb	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800548e:	1c5a      	adds	r2, r3, #1
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800549a:	b29b      	uxth	r3, r3
 800549c:	3b01      	subs	r3, #1
 800549e:	b29a      	uxth	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80054a6:	bf00      	nop
 80054a8:	373c      	adds	r7, #60	; 0x3c
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b091      	sub	sp, #68	; 0x44
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054be:	2b21      	cmp	r3, #33	; 0x21
 80054c0:	d151      	bne.n	8005566 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d132      	bne.n	8005534 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d6:	e853 3f00 	ldrex	r3, [r3]
 80054da:	623b      	str	r3, [r7, #32]
   return(result);
 80054dc:	6a3b      	ldr	r3, [r7, #32]
 80054de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	461a      	mov	r2, r3
 80054ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ec:	633b      	str	r3, [r7, #48]	; 0x30
 80054ee:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054f4:	e841 2300 	strex	r3, r2, [r1]
 80054f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1e6      	bne.n	80054ce <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	e853 3f00 	ldrex	r3, [r3]
 800550c:	60fb      	str	r3, [r7, #12]
   return(result);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005514:	637b      	str	r3, [r7, #52]	; 0x34
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	461a      	mov	r2, r3
 800551c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800551e:	61fb      	str	r3, [r7, #28]
 8005520:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005522:	69b9      	ldr	r1, [r7, #24]
 8005524:	69fa      	ldr	r2, [r7, #28]
 8005526:	e841 2300 	strex	r3, r2, [r1]
 800552a:	617b      	str	r3, [r7, #20]
   return(result);
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1e6      	bne.n	8005500 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005532:	e018      	b.n	8005566 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005538:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800553a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800553c:	881b      	ldrh	r3, [r3, #0]
 800553e:	461a      	mov	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005548:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800554e:	1c9a      	adds	r2, r3, #2
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800555a:	b29b      	uxth	r3, r3
 800555c:	3b01      	subs	r3, #1
 800555e:	b29a      	uxth	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005566:	bf00      	nop
 8005568:	3744      	adds	r7, #68	; 0x44
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr

08005572 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b088      	sub	sp, #32
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	e853 3f00 	ldrex	r3, [r3]
 8005586:	60bb      	str	r3, [r7, #8]
   return(result);
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800558e:	61fb      	str	r3, [r7, #28]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	461a      	mov	r2, r3
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	61bb      	str	r3, [r7, #24]
 800559a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559c:	6979      	ldr	r1, [r7, #20]
 800559e:	69ba      	ldr	r2, [r7, #24]
 80055a0:	e841 2300 	strex	r3, r2, [r1]
 80055a4:	613b      	str	r3, [r7, #16]
   return(result);
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1e6      	bne.n	800557a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2220      	movs	r2, #32
 80055b0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f7fb fa85 	bl	8000ac8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055be:	bf00      	nop
 80055c0:	3720      	adds	r7, #32
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b096      	sub	sp, #88	; 0x58
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80055d4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055de:	2b22      	cmp	r3, #34	; 0x22
 80055e0:	f040 8098 	bne.w	8005714 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ea:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80055ee:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80055f2:	b2d9      	uxtb	r1, r3
 80055f4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fe:	400a      	ands	r2, r1
 8005600:	b2d2      	uxtb	r2, r2
 8005602:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005608:	1c5a      	adds	r2, r3, #1
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005614:	b29b      	uxth	r3, r3
 8005616:	3b01      	subs	r3, #1
 8005618:	b29a      	uxth	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005626:	b29b      	uxth	r3, r3
 8005628:	2b00      	cmp	r3, #0
 800562a:	d17b      	bne.n	8005724 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005634:	e853 3f00 	ldrex	r3, [r3]
 8005638:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800563a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800563c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005640:	653b      	str	r3, [r7, #80]	; 0x50
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	461a      	mov	r2, r3
 8005648:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800564a:	647b      	str	r3, [r7, #68]	; 0x44
 800564c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005650:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005652:	e841 2300 	strex	r3, r2, [r1]
 8005656:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1e6      	bne.n	800562c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	3308      	adds	r3, #8
 8005664:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005668:	e853 3f00 	ldrex	r3, [r3]
 800566c:	623b      	str	r3, [r7, #32]
   return(result);
 800566e:	6a3b      	ldr	r3, [r7, #32]
 8005670:	f023 0301 	bic.w	r3, r3, #1
 8005674:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3308      	adds	r3, #8
 800567c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800567e:	633a      	str	r2, [r7, #48]	; 0x30
 8005680:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005682:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005686:	e841 2300 	strex	r3, r2, [r1]
 800568a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800568c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1e5      	bne.n	800565e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2220      	movs	r2, #32
 8005696:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d12e      	bne.n	800570c <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	e853 3f00 	ldrex	r3, [r3]
 80056c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f023 0310 	bic.w	r3, r3, #16
 80056c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	461a      	mov	r2, r3
 80056d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056d2:	61fb      	str	r3, [r7, #28]
 80056d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d6:	69b9      	ldr	r1, [r7, #24]
 80056d8:	69fa      	ldr	r2, [r7, #28]
 80056da:	e841 2300 	strex	r3, r2, [r1]
 80056de:	617b      	str	r3, [r7, #20]
   return(result);
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1e6      	bne.n	80056b4 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	69db      	ldr	r3, [r3, #28]
 80056ec:	f003 0310 	and.w	r3, r3, #16
 80056f0:	2b10      	cmp	r3, #16
 80056f2:	d103      	bne.n	80056fc <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2210      	movs	r2, #16
 80056fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005702:	4619      	mov	r1, r3
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f7ff f909 	bl	800491c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800570a:	e00b      	b.n	8005724 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f7fb f957 	bl	80009c0 <HAL_UART_RxCpltCallback>
}
 8005712:	e007      	b.n	8005724 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	699a      	ldr	r2, [r3, #24]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f042 0208 	orr.w	r2, r2, #8
 8005722:	619a      	str	r2, [r3, #24]
}
 8005724:	bf00      	nop
 8005726:	3758      	adds	r7, #88	; 0x58
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b096      	sub	sp, #88	; 0x58
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800573a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005744:	2b22      	cmp	r3, #34	; 0x22
 8005746:	f040 8098 	bne.w	800587a <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005758:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800575a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800575e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005762:	4013      	ands	r3, r2
 8005764:	b29a      	uxth	r2, r3
 8005766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005768:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800576e:	1c9a      	adds	r2, r3, #2
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800577a:	b29b      	uxth	r3, r3
 800577c:	3b01      	subs	r3, #1
 800577e:	b29a      	uxth	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800578c:	b29b      	uxth	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d17b      	bne.n	800588a <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800579a:	e853 3f00 	ldrex	r3, [r3]
 800579e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	461a      	mov	r2, r3
 80057ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057b0:	643b      	str	r3, [r7, #64]	; 0x40
 80057b2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80057b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057b8:	e841 2300 	strex	r3, r2, [r1]
 80057bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1e6      	bne.n	8005792 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	3308      	adds	r3, #8
 80057ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057cc:	6a3b      	ldr	r3, [r7, #32]
 80057ce:	e853 3f00 	ldrex	r3, [r3]
 80057d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	f023 0301 	bic.w	r3, r3, #1
 80057da:	64bb      	str	r3, [r7, #72]	; 0x48
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	3308      	adds	r3, #8
 80057e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057ec:	e841 2300 	strex	r3, r2, [r1]
 80057f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1e5      	bne.n	80057c4 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2220      	movs	r2, #32
 80057fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005810:	2b01      	cmp	r3, #1
 8005812:	d12e      	bne.n	8005872 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	e853 3f00 	ldrex	r3, [r3]
 8005826:	60bb      	str	r3, [r7, #8]
   return(result);
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	f023 0310 	bic.w	r3, r3, #16
 800582e:	647b      	str	r3, [r7, #68]	; 0x44
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	461a      	mov	r2, r3
 8005836:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005838:	61bb      	str	r3, [r7, #24]
 800583a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583c:	6979      	ldr	r1, [r7, #20]
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	e841 2300 	strex	r3, r2, [r1]
 8005844:	613b      	str	r3, [r7, #16]
   return(result);
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1e6      	bne.n	800581a <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	69db      	ldr	r3, [r3, #28]
 8005852:	f003 0310 	and.w	r3, r3, #16
 8005856:	2b10      	cmp	r3, #16
 8005858:	d103      	bne.n	8005862 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2210      	movs	r2, #16
 8005860:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005868:	4619      	mov	r1, r3
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f7ff f856 	bl	800491c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005870:	e00b      	b.n	800588a <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7fb f8a4 	bl	80009c0 <HAL_UART_RxCpltCallback>
}
 8005878:	e007      	b.n	800588a <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	699a      	ldr	r2, [r3, #24]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f042 0208 	orr.w	r2, r2, #8
 8005888:	619a      	str	r2, [r3, #24]
}
 800588a:	bf00      	nop
 800588c:	3758      	adds	r7, #88	; 0x58
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
	...

08005894 <__errno>:
 8005894:	4b01      	ldr	r3, [pc, #4]	; (800589c <__errno+0x8>)
 8005896:	6818      	ldr	r0, [r3, #0]
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	2000000c 	.word	0x2000000c

080058a0 <__libc_init_array>:
 80058a0:	b570      	push	{r4, r5, r6, lr}
 80058a2:	4d0d      	ldr	r5, [pc, #52]	; (80058d8 <__libc_init_array+0x38>)
 80058a4:	4c0d      	ldr	r4, [pc, #52]	; (80058dc <__libc_init_array+0x3c>)
 80058a6:	1b64      	subs	r4, r4, r5
 80058a8:	10a4      	asrs	r4, r4, #2
 80058aa:	2600      	movs	r6, #0
 80058ac:	42a6      	cmp	r6, r4
 80058ae:	d109      	bne.n	80058c4 <__libc_init_array+0x24>
 80058b0:	4d0b      	ldr	r5, [pc, #44]	; (80058e0 <__libc_init_array+0x40>)
 80058b2:	4c0c      	ldr	r4, [pc, #48]	; (80058e4 <__libc_init_array+0x44>)
 80058b4:	f000 fc66 	bl	8006184 <_init>
 80058b8:	1b64      	subs	r4, r4, r5
 80058ba:	10a4      	asrs	r4, r4, #2
 80058bc:	2600      	movs	r6, #0
 80058be:	42a6      	cmp	r6, r4
 80058c0:	d105      	bne.n	80058ce <__libc_init_array+0x2e>
 80058c2:	bd70      	pop	{r4, r5, r6, pc}
 80058c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80058c8:	4798      	blx	r3
 80058ca:	3601      	adds	r6, #1
 80058cc:	e7ee      	b.n	80058ac <__libc_init_array+0xc>
 80058ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80058d2:	4798      	blx	r3
 80058d4:	3601      	adds	r6, #1
 80058d6:	e7f2      	b.n	80058be <__libc_init_array+0x1e>
 80058d8:	0800623c 	.word	0x0800623c
 80058dc:	0800623c 	.word	0x0800623c
 80058e0:	0800623c 	.word	0x0800623c
 80058e4:	08006240 	.word	0x08006240

080058e8 <malloc>:
 80058e8:	4b02      	ldr	r3, [pc, #8]	; (80058f4 <malloc+0xc>)
 80058ea:	4601      	mov	r1, r0
 80058ec:	6818      	ldr	r0, [r3, #0]
 80058ee:	f000 b877 	b.w	80059e0 <_malloc_r>
 80058f2:	bf00      	nop
 80058f4:	2000000c 	.word	0x2000000c

080058f8 <memset>:
 80058f8:	4402      	add	r2, r0
 80058fa:	4603      	mov	r3, r0
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d100      	bne.n	8005902 <memset+0xa>
 8005900:	4770      	bx	lr
 8005902:	f803 1b01 	strb.w	r1, [r3], #1
 8005906:	e7f9      	b.n	80058fc <memset+0x4>

08005908 <_free_r>:
 8005908:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800590a:	2900      	cmp	r1, #0
 800590c:	d044      	beq.n	8005998 <_free_r+0x90>
 800590e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005912:	9001      	str	r0, [sp, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	f1a1 0404 	sub.w	r4, r1, #4
 800591a:	bfb8      	it	lt
 800591c:	18e4      	addlt	r4, r4, r3
 800591e:	f000 fb89 	bl	8006034 <__malloc_lock>
 8005922:	4a1e      	ldr	r2, [pc, #120]	; (800599c <_free_r+0x94>)
 8005924:	9801      	ldr	r0, [sp, #4]
 8005926:	6813      	ldr	r3, [r2, #0]
 8005928:	b933      	cbnz	r3, 8005938 <_free_r+0x30>
 800592a:	6063      	str	r3, [r4, #4]
 800592c:	6014      	str	r4, [r2, #0]
 800592e:	b003      	add	sp, #12
 8005930:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005934:	f000 bb84 	b.w	8006040 <__malloc_unlock>
 8005938:	42a3      	cmp	r3, r4
 800593a:	d908      	bls.n	800594e <_free_r+0x46>
 800593c:	6825      	ldr	r5, [r4, #0]
 800593e:	1961      	adds	r1, r4, r5
 8005940:	428b      	cmp	r3, r1
 8005942:	bf01      	itttt	eq
 8005944:	6819      	ldreq	r1, [r3, #0]
 8005946:	685b      	ldreq	r3, [r3, #4]
 8005948:	1949      	addeq	r1, r1, r5
 800594a:	6021      	streq	r1, [r4, #0]
 800594c:	e7ed      	b.n	800592a <_free_r+0x22>
 800594e:	461a      	mov	r2, r3
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	b10b      	cbz	r3, 8005958 <_free_r+0x50>
 8005954:	42a3      	cmp	r3, r4
 8005956:	d9fa      	bls.n	800594e <_free_r+0x46>
 8005958:	6811      	ldr	r1, [r2, #0]
 800595a:	1855      	adds	r5, r2, r1
 800595c:	42a5      	cmp	r5, r4
 800595e:	d10b      	bne.n	8005978 <_free_r+0x70>
 8005960:	6824      	ldr	r4, [r4, #0]
 8005962:	4421      	add	r1, r4
 8005964:	1854      	adds	r4, r2, r1
 8005966:	42a3      	cmp	r3, r4
 8005968:	6011      	str	r1, [r2, #0]
 800596a:	d1e0      	bne.n	800592e <_free_r+0x26>
 800596c:	681c      	ldr	r4, [r3, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	6053      	str	r3, [r2, #4]
 8005972:	4421      	add	r1, r4
 8005974:	6011      	str	r1, [r2, #0]
 8005976:	e7da      	b.n	800592e <_free_r+0x26>
 8005978:	d902      	bls.n	8005980 <_free_r+0x78>
 800597a:	230c      	movs	r3, #12
 800597c:	6003      	str	r3, [r0, #0]
 800597e:	e7d6      	b.n	800592e <_free_r+0x26>
 8005980:	6825      	ldr	r5, [r4, #0]
 8005982:	1961      	adds	r1, r4, r5
 8005984:	428b      	cmp	r3, r1
 8005986:	bf04      	itt	eq
 8005988:	6819      	ldreq	r1, [r3, #0]
 800598a:	685b      	ldreq	r3, [r3, #4]
 800598c:	6063      	str	r3, [r4, #4]
 800598e:	bf04      	itt	eq
 8005990:	1949      	addeq	r1, r1, r5
 8005992:	6021      	streq	r1, [r4, #0]
 8005994:	6054      	str	r4, [r2, #4]
 8005996:	e7ca      	b.n	800592e <_free_r+0x26>
 8005998:	b003      	add	sp, #12
 800599a:	bd30      	pop	{r4, r5, pc}
 800599c:	200005c4 	.word	0x200005c4

080059a0 <sbrk_aligned>:
 80059a0:	b570      	push	{r4, r5, r6, lr}
 80059a2:	4e0e      	ldr	r6, [pc, #56]	; (80059dc <sbrk_aligned+0x3c>)
 80059a4:	460c      	mov	r4, r1
 80059a6:	6831      	ldr	r1, [r6, #0]
 80059a8:	4605      	mov	r5, r0
 80059aa:	b911      	cbnz	r1, 80059b2 <sbrk_aligned+0x12>
 80059ac:	f000 f88c 	bl	8005ac8 <_sbrk_r>
 80059b0:	6030      	str	r0, [r6, #0]
 80059b2:	4621      	mov	r1, r4
 80059b4:	4628      	mov	r0, r5
 80059b6:	f000 f887 	bl	8005ac8 <_sbrk_r>
 80059ba:	1c43      	adds	r3, r0, #1
 80059bc:	d00a      	beq.n	80059d4 <sbrk_aligned+0x34>
 80059be:	1cc4      	adds	r4, r0, #3
 80059c0:	f024 0403 	bic.w	r4, r4, #3
 80059c4:	42a0      	cmp	r0, r4
 80059c6:	d007      	beq.n	80059d8 <sbrk_aligned+0x38>
 80059c8:	1a21      	subs	r1, r4, r0
 80059ca:	4628      	mov	r0, r5
 80059cc:	f000 f87c 	bl	8005ac8 <_sbrk_r>
 80059d0:	3001      	adds	r0, #1
 80059d2:	d101      	bne.n	80059d8 <sbrk_aligned+0x38>
 80059d4:	f04f 34ff 	mov.w	r4, #4294967295
 80059d8:	4620      	mov	r0, r4
 80059da:	bd70      	pop	{r4, r5, r6, pc}
 80059dc:	200005c8 	.word	0x200005c8

080059e0 <_malloc_r>:
 80059e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059e4:	1ccd      	adds	r5, r1, #3
 80059e6:	f025 0503 	bic.w	r5, r5, #3
 80059ea:	3508      	adds	r5, #8
 80059ec:	2d0c      	cmp	r5, #12
 80059ee:	bf38      	it	cc
 80059f0:	250c      	movcc	r5, #12
 80059f2:	2d00      	cmp	r5, #0
 80059f4:	4607      	mov	r7, r0
 80059f6:	db01      	blt.n	80059fc <_malloc_r+0x1c>
 80059f8:	42a9      	cmp	r1, r5
 80059fa:	d905      	bls.n	8005a08 <_malloc_r+0x28>
 80059fc:	230c      	movs	r3, #12
 80059fe:	603b      	str	r3, [r7, #0]
 8005a00:	2600      	movs	r6, #0
 8005a02:	4630      	mov	r0, r6
 8005a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a08:	4e2e      	ldr	r6, [pc, #184]	; (8005ac4 <_malloc_r+0xe4>)
 8005a0a:	f000 fb13 	bl	8006034 <__malloc_lock>
 8005a0e:	6833      	ldr	r3, [r6, #0]
 8005a10:	461c      	mov	r4, r3
 8005a12:	bb34      	cbnz	r4, 8005a62 <_malloc_r+0x82>
 8005a14:	4629      	mov	r1, r5
 8005a16:	4638      	mov	r0, r7
 8005a18:	f7ff ffc2 	bl	80059a0 <sbrk_aligned>
 8005a1c:	1c43      	adds	r3, r0, #1
 8005a1e:	4604      	mov	r4, r0
 8005a20:	d14d      	bne.n	8005abe <_malloc_r+0xde>
 8005a22:	6834      	ldr	r4, [r6, #0]
 8005a24:	4626      	mov	r6, r4
 8005a26:	2e00      	cmp	r6, #0
 8005a28:	d140      	bne.n	8005aac <_malloc_r+0xcc>
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	4631      	mov	r1, r6
 8005a2e:	4638      	mov	r0, r7
 8005a30:	eb04 0803 	add.w	r8, r4, r3
 8005a34:	f000 f848 	bl	8005ac8 <_sbrk_r>
 8005a38:	4580      	cmp	r8, r0
 8005a3a:	d13a      	bne.n	8005ab2 <_malloc_r+0xd2>
 8005a3c:	6821      	ldr	r1, [r4, #0]
 8005a3e:	3503      	adds	r5, #3
 8005a40:	1a6d      	subs	r5, r5, r1
 8005a42:	f025 0503 	bic.w	r5, r5, #3
 8005a46:	3508      	adds	r5, #8
 8005a48:	2d0c      	cmp	r5, #12
 8005a4a:	bf38      	it	cc
 8005a4c:	250c      	movcc	r5, #12
 8005a4e:	4629      	mov	r1, r5
 8005a50:	4638      	mov	r0, r7
 8005a52:	f7ff ffa5 	bl	80059a0 <sbrk_aligned>
 8005a56:	3001      	adds	r0, #1
 8005a58:	d02b      	beq.n	8005ab2 <_malloc_r+0xd2>
 8005a5a:	6823      	ldr	r3, [r4, #0]
 8005a5c:	442b      	add	r3, r5
 8005a5e:	6023      	str	r3, [r4, #0]
 8005a60:	e00e      	b.n	8005a80 <_malloc_r+0xa0>
 8005a62:	6822      	ldr	r2, [r4, #0]
 8005a64:	1b52      	subs	r2, r2, r5
 8005a66:	d41e      	bmi.n	8005aa6 <_malloc_r+0xc6>
 8005a68:	2a0b      	cmp	r2, #11
 8005a6a:	d916      	bls.n	8005a9a <_malloc_r+0xba>
 8005a6c:	1961      	adds	r1, r4, r5
 8005a6e:	42a3      	cmp	r3, r4
 8005a70:	6025      	str	r5, [r4, #0]
 8005a72:	bf18      	it	ne
 8005a74:	6059      	strne	r1, [r3, #4]
 8005a76:	6863      	ldr	r3, [r4, #4]
 8005a78:	bf08      	it	eq
 8005a7a:	6031      	streq	r1, [r6, #0]
 8005a7c:	5162      	str	r2, [r4, r5]
 8005a7e:	604b      	str	r3, [r1, #4]
 8005a80:	4638      	mov	r0, r7
 8005a82:	f104 060b 	add.w	r6, r4, #11
 8005a86:	f000 fadb 	bl	8006040 <__malloc_unlock>
 8005a8a:	f026 0607 	bic.w	r6, r6, #7
 8005a8e:	1d23      	adds	r3, r4, #4
 8005a90:	1af2      	subs	r2, r6, r3
 8005a92:	d0b6      	beq.n	8005a02 <_malloc_r+0x22>
 8005a94:	1b9b      	subs	r3, r3, r6
 8005a96:	50a3      	str	r3, [r4, r2]
 8005a98:	e7b3      	b.n	8005a02 <_malloc_r+0x22>
 8005a9a:	6862      	ldr	r2, [r4, #4]
 8005a9c:	42a3      	cmp	r3, r4
 8005a9e:	bf0c      	ite	eq
 8005aa0:	6032      	streq	r2, [r6, #0]
 8005aa2:	605a      	strne	r2, [r3, #4]
 8005aa4:	e7ec      	b.n	8005a80 <_malloc_r+0xa0>
 8005aa6:	4623      	mov	r3, r4
 8005aa8:	6864      	ldr	r4, [r4, #4]
 8005aaa:	e7b2      	b.n	8005a12 <_malloc_r+0x32>
 8005aac:	4634      	mov	r4, r6
 8005aae:	6876      	ldr	r6, [r6, #4]
 8005ab0:	e7b9      	b.n	8005a26 <_malloc_r+0x46>
 8005ab2:	230c      	movs	r3, #12
 8005ab4:	603b      	str	r3, [r7, #0]
 8005ab6:	4638      	mov	r0, r7
 8005ab8:	f000 fac2 	bl	8006040 <__malloc_unlock>
 8005abc:	e7a1      	b.n	8005a02 <_malloc_r+0x22>
 8005abe:	6025      	str	r5, [r4, #0]
 8005ac0:	e7de      	b.n	8005a80 <_malloc_r+0xa0>
 8005ac2:	bf00      	nop
 8005ac4:	200005c4 	.word	0x200005c4

08005ac8 <_sbrk_r>:
 8005ac8:	b538      	push	{r3, r4, r5, lr}
 8005aca:	4d06      	ldr	r5, [pc, #24]	; (8005ae4 <_sbrk_r+0x1c>)
 8005acc:	2300      	movs	r3, #0
 8005ace:	4604      	mov	r4, r0
 8005ad0:	4608      	mov	r0, r1
 8005ad2:	602b      	str	r3, [r5, #0]
 8005ad4:	f7fb f8ac 	bl	8000c30 <_sbrk>
 8005ad8:	1c43      	adds	r3, r0, #1
 8005ada:	d102      	bne.n	8005ae2 <_sbrk_r+0x1a>
 8005adc:	682b      	ldr	r3, [r5, #0]
 8005ade:	b103      	cbz	r3, 8005ae2 <_sbrk_r+0x1a>
 8005ae0:	6023      	str	r3, [r4, #0]
 8005ae2:	bd38      	pop	{r3, r4, r5, pc}
 8005ae4:	200005d0 	.word	0x200005d0

08005ae8 <setvbuf>:
 8005ae8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005aec:	461d      	mov	r5, r3
 8005aee:	4b5d      	ldr	r3, [pc, #372]	; (8005c64 <setvbuf+0x17c>)
 8005af0:	681f      	ldr	r7, [r3, #0]
 8005af2:	4604      	mov	r4, r0
 8005af4:	460e      	mov	r6, r1
 8005af6:	4690      	mov	r8, r2
 8005af8:	b127      	cbz	r7, 8005b04 <setvbuf+0x1c>
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	b913      	cbnz	r3, 8005b04 <setvbuf+0x1c>
 8005afe:	4638      	mov	r0, r7
 8005b00:	f000 f9d2 	bl	8005ea8 <__sinit>
 8005b04:	4b58      	ldr	r3, [pc, #352]	; (8005c68 <setvbuf+0x180>)
 8005b06:	429c      	cmp	r4, r3
 8005b08:	d167      	bne.n	8005bda <setvbuf+0xf2>
 8005b0a:	687c      	ldr	r4, [r7, #4]
 8005b0c:	f1b8 0f02 	cmp.w	r8, #2
 8005b10:	d006      	beq.n	8005b20 <setvbuf+0x38>
 8005b12:	f1b8 0f01 	cmp.w	r8, #1
 8005b16:	f200 809f 	bhi.w	8005c58 <setvbuf+0x170>
 8005b1a:	2d00      	cmp	r5, #0
 8005b1c:	f2c0 809c 	blt.w	8005c58 <setvbuf+0x170>
 8005b20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b22:	07db      	lsls	r3, r3, #31
 8005b24:	d405      	bmi.n	8005b32 <setvbuf+0x4a>
 8005b26:	89a3      	ldrh	r3, [r4, #12]
 8005b28:	0598      	lsls	r0, r3, #22
 8005b2a:	d402      	bmi.n	8005b32 <setvbuf+0x4a>
 8005b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b2e:	f000 fa59 	bl	8005fe4 <__retarget_lock_acquire_recursive>
 8005b32:	4621      	mov	r1, r4
 8005b34:	4638      	mov	r0, r7
 8005b36:	f000 f923 	bl	8005d80 <_fflush_r>
 8005b3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b3c:	b141      	cbz	r1, 8005b50 <setvbuf+0x68>
 8005b3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b42:	4299      	cmp	r1, r3
 8005b44:	d002      	beq.n	8005b4c <setvbuf+0x64>
 8005b46:	4638      	mov	r0, r7
 8005b48:	f7ff fede 	bl	8005908 <_free_r>
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	6363      	str	r3, [r4, #52]	; 0x34
 8005b50:	2300      	movs	r3, #0
 8005b52:	61a3      	str	r3, [r4, #24]
 8005b54:	6063      	str	r3, [r4, #4]
 8005b56:	89a3      	ldrh	r3, [r4, #12]
 8005b58:	0619      	lsls	r1, r3, #24
 8005b5a:	d503      	bpl.n	8005b64 <setvbuf+0x7c>
 8005b5c:	6921      	ldr	r1, [r4, #16]
 8005b5e:	4638      	mov	r0, r7
 8005b60:	f7ff fed2 	bl	8005908 <_free_r>
 8005b64:	89a3      	ldrh	r3, [r4, #12]
 8005b66:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005b6a:	f023 0303 	bic.w	r3, r3, #3
 8005b6e:	f1b8 0f02 	cmp.w	r8, #2
 8005b72:	81a3      	strh	r3, [r4, #12]
 8005b74:	d06c      	beq.n	8005c50 <setvbuf+0x168>
 8005b76:	ab01      	add	r3, sp, #4
 8005b78:	466a      	mov	r2, sp
 8005b7a:	4621      	mov	r1, r4
 8005b7c:	4638      	mov	r0, r7
 8005b7e:	f000 fa33 	bl	8005fe8 <__swhatbuf_r>
 8005b82:	89a3      	ldrh	r3, [r4, #12]
 8005b84:	4318      	orrs	r0, r3
 8005b86:	81a0      	strh	r0, [r4, #12]
 8005b88:	2d00      	cmp	r5, #0
 8005b8a:	d130      	bne.n	8005bee <setvbuf+0x106>
 8005b8c:	9d00      	ldr	r5, [sp, #0]
 8005b8e:	4628      	mov	r0, r5
 8005b90:	f7ff feaa 	bl	80058e8 <malloc>
 8005b94:	4606      	mov	r6, r0
 8005b96:	2800      	cmp	r0, #0
 8005b98:	d155      	bne.n	8005c46 <setvbuf+0x15e>
 8005b9a:	f8dd 9000 	ldr.w	r9, [sp]
 8005b9e:	45a9      	cmp	r9, r5
 8005ba0:	d14a      	bne.n	8005c38 <setvbuf+0x150>
 8005ba2:	f04f 35ff 	mov.w	r5, #4294967295
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	60a2      	str	r2, [r4, #8]
 8005baa:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8005bae:	6022      	str	r2, [r4, #0]
 8005bb0:	6122      	str	r2, [r4, #16]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bb8:	6162      	str	r2, [r4, #20]
 8005bba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005bbc:	f043 0302 	orr.w	r3, r3, #2
 8005bc0:	07d2      	lsls	r2, r2, #31
 8005bc2:	81a3      	strh	r3, [r4, #12]
 8005bc4:	d405      	bmi.n	8005bd2 <setvbuf+0xea>
 8005bc6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005bca:	d102      	bne.n	8005bd2 <setvbuf+0xea>
 8005bcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bce:	f000 fa0a 	bl	8005fe6 <__retarget_lock_release_recursive>
 8005bd2:	4628      	mov	r0, r5
 8005bd4:	b003      	add	sp, #12
 8005bd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005bda:	4b24      	ldr	r3, [pc, #144]	; (8005c6c <setvbuf+0x184>)
 8005bdc:	429c      	cmp	r4, r3
 8005bde:	d101      	bne.n	8005be4 <setvbuf+0xfc>
 8005be0:	68bc      	ldr	r4, [r7, #8]
 8005be2:	e793      	b.n	8005b0c <setvbuf+0x24>
 8005be4:	4b22      	ldr	r3, [pc, #136]	; (8005c70 <setvbuf+0x188>)
 8005be6:	429c      	cmp	r4, r3
 8005be8:	bf08      	it	eq
 8005bea:	68fc      	ldreq	r4, [r7, #12]
 8005bec:	e78e      	b.n	8005b0c <setvbuf+0x24>
 8005bee:	2e00      	cmp	r6, #0
 8005bf0:	d0cd      	beq.n	8005b8e <setvbuf+0xa6>
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	b913      	cbnz	r3, 8005bfc <setvbuf+0x114>
 8005bf6:	4638      	mov	r0, r7
 8005bf8:	f000 f956 	bl	8005ea8 <__sinit>
 8005bfc:	f1b8 0f01 	cmp.w	r8, #1
 8005c00:	bf08      	it	eq
 8005c02:	89a3      	ldrheq	r3, [r4, #12]
 8005c04:	6026      	str	r6, [r4, #0]
 8005c06:	bf04      	itt	eq
 8005c08:	f043 0301 	orreq.w	r3, r3, #1
 8005c0c:	81a3      	strheq	r3, [r4, #12]
 8005c0e:	89a2      	ldrh	r2, [r4, #12]
 8005c10:	f012 0308 	ands.w	r3, r2, #8
 8005c14:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005c18:	d01c      	beq.n	8005c54 <setvbuf+0x16c>
 8005c1a:	07d3      	lsls	r3, r2, #31
 8005c1c:	bf41      	itttt	mi
 8005c1e:	2300      	movmi	r3, #0
 8005c20:	426d      	negmi	r5, r5
 8005c22:	60a3      	strmi	r3, [r4, #8]
 8005c24:	61a5      	strmi	r5, [r4, #24]
 8005c26:	bf58      	it	pl
 8005c28:	60a5      	strpl	r5, [r4, #8]
 8005c2a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005c2c:	f015 0501 	ands.w	r5, r5, #1
 8005c30:	d115      	bne.n	8005c5e <setvbuf+0x176>
 8005c32:	f412 7f00 	tst.w	r2, #512	; 0x200
 8005c36:	e7c8      	b.n	8005bca <setvbuf+0xe2>
 8005c38:	4648      	mov	r0, r9
 8005c3a:	f7ff fe55 	bl	80058e8 <malloc>
 8005c3e:	4606      	mov	r6, r0
 8005c40:	2800      	cmp	r0, #0
 8005c42:	d0ae      	beq.n	8005ba2 <setvbuf+0xba>
 8005c44:	464d      	mov	r5, r9
 8005c46:	89a3      	ldrh	r3, [r4, #12]
 8005c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c4c:	81a3      	strh	r3, [r4, #12]
 8005c4e:	e7d0      	b.n	8005bf2 <setvbuf+0x10a>
 8005c50:	2500      	movs	r5, #0
 8005c52:	e7a8      	b.n	8005ba6 <setvbuf+0xbe>
 8005c54:	60a3      	str	r3, [r4, #8]
 8005c56:	e7e8      	b.n	8005c2a <setvbuf+0x142>
 8005c58:	f04f 35ff 	mov.w	r5, #4294967295
 8005c5c:	e7b9      	b.n	8005bd2 <setvbuf+0xea>
 8005c5e:	2500      	movs	r5, #0
 8005c60:	e7b7      	b.n	8005bd2 <setvbuf+0xea>
 8005c62:	bf00      	nop
 8005c64:	2000000c 	.word	0x2000000c
 8005c68:	080061f4 	.word	0x080061f4
 8005c6c:	08006214 	.word	0x08006214
 8005c70:	080061d4 	.word	0x080061d4

08005c74 <__sflush_r>:
 8005c74:	898a      	ldrh	r2, [r1, #12]
 8005c76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c7a:	4605      	mov	r5, r0
 8005c7c:	0710      	lsls	r0, r2, #28
 8005c7e:	460c      	mov	r4, r1
 8005c80:	d458      	bmi.n	8005d34 <__sflush_r+0xc0>
 8005c82:	684b      	ldr	r3, [r1, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	dc05      	bgt.n	8005c94 <__sflush_r+0x20>
 8005c88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	dc02      	bgt.n	8005c94 <__sflush_r+0x20>
 8005c8e:	2000      	movs	r0, #0
 8005c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c96:	2e00      	cmp	r6, #0
 8005c98:	d0f9      	beq.n	8005c8e <__sflush_r+0x1a>
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ca0:	682f      	ldr	r7, [r5, #0]
 8005ca2:	602b      	str	r3, [r5, #0]
 8005ca4:	d032      	beq.n	8005d0c <__sflush_r+0x98>
 8005ca6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ca8:	89a3      	ldrh	r3, [r4, #12]
 8005caa:	075a      	lsls	r2, r3, #29
 8005cac:	d505      	bpl.n	8005cba <__sflush_r+0x46>
 8005cae:	6863      	ldr	r3, [r4, #4]
 8005cb0:	1ac0      	subs	r0, r0, r3
 8005cb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005cb4:	b10b      	cbz	r3, 8005cba <__sflush_r+0x46>
 8005cb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005cb8:	1ac0      	subs	r0, r0, r3
 8005cba:	2300      	movs	r3, #0
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005cc0:	6a21      	ldr	r1, [r4, #32]
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	47b0      	blx	r6
 8005cc6:	1c43      	adds	r3, r0, #1
 8005cc8:	89a3      	ldrh	r3, [r4, #12]
 8005cca:	d106      	bne.n	8005cda <__sflush_r+0x66>
 8005ccc:	6829      	ldr	r1, [r5, #0]
 8005cce:	291d      	cmp	r1, #29
 8005cd0:	d82c      	bhi.n	8005d2c <__sflush_r+0xb8>
 8005cd2:	4a2a      	ldr	r2, [pc, #168]	; (8005d7c <__sflush_r+0x108>)
 8005cd4:	40ca      	lsrs	r2, r1
 8005cd6:	07d6      	lsls	r6, r2, #31
 8005cd8:	d528      	bpl.n	8005d2c <__sflush_r+0xb8>
 8005cda:	2200      	movs	r2, #0
 8005cdc:	6062      	str	r2, [r4, #4]
 8005cde:	04d9      	lsls	r1, r3, #19
 8005ce0:	6922      	ldr	r2, [r4, #16]
 8005ce2:	6022      	str	r2, [r4, #0]
 8005ce4:	d504      	bpl.n	8005cf0 <__sflush_r+0x7c>
 8005ce6:	1c42      	adds	r2, r0, #1
 8005ce8:	d101      	bne.n	8005cee <__sflush_r+0x7a>
 8005cea:	682b      	ldr	r3, [r5, #0]
 8005cec:	b903      	cbnz	r3, 8005cf0 <__sflush_r+0x7c>
 8005cee:	6560      	str	r0, [r4, #84]	; 0x54
 8005cf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cf2:	602f      	str	r7, [r5, #0]
 8005cf4:	2900      	cmp	r1, #0
 8005cf6:	d0ca      	beq.n	8005c8e <__sflush_r+0x1a>
 8005cf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cfc:	4299      	cmp	r1, r3
 8005cfe:	d002      	beq.n	8005d06 <__sflush_r+0x92>
 8005d00:	4628      	mov	r0, r5
 8005d02:	f7ff fe01 	bl	8005908 <_free_r>
 8005d06:	2000      	movs	r0, #0
 8005d08:	6360      	str	r0, [r4, #52]	; 0x34
 8005d0a:	e7c1      	b.n	8005c90 <__sflush_r+0x1c>
 8005d0c:	6a21      	ldr	r1, [r4, #32]
 8005d0e:	2301      	movs	r3, #1
 8005d10:	4628      	mov	r0, r5
 8005d12:	47b0      	blx	r6
 8005d14:	1c41      	adds	r1, r0, #1
 8005d16:	d1c7      	bne.n	8005ca8 <__sflush_r+0x34>
 8005d18:	682b      	ldr	r3, [r5, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d0c4      	beq.n	8005ca8 <__sflush_r+0x34>
 8005d1e:	2b1d      	cmp	r3, #29
 8005d20:	d001      	beq.n	8005d26 <__sflush_r+0xb2>
 8005d22:	2b16      	cmp	r3, #22
 8005d24:	d101      	bne.n	8005d2a <__sflush_r+0xb6>
 8005d26:	602f      	str	r7, [r5, #0]
 8005d28:	e7b1      	b.n	8005c8e <__sflush_r+0x1a>
 8005d2a:	89a3      	ldrh	r3, [r4, #12]
 8005d2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d30:	81a3      	strh	r3, [r4, #12]
 8005d32:	e7ad      	b.n	8005c90 <__sflush_r+0x1c>
 8005d34:	690f      	ldr	r7, [r1, #16]
 8005d36:	2f00      	cmp	r7, #0
 8005d38:	d0a9      	beq.n	8005c8e <__sflush_r+0x1a>
 8005d3a:	0793      	lsls	r3, r2, #30
 8005d3c:	680e      	ldr	r6, [r1, #0]
 8005d3e:	bf08      	it	eq
 8005d40:	694b      	ldreq	r3, [r1, #20]
 8005d42:	600f      	str	r7, [r1, #0]
 8005d44:	bf18      	it	ne
 8005d46:	2300      	movne	r3, #0
 8005d48:	eba6 0807 	sub.w	r8, r6, r7
 8005d4c:	608b      	str	r3, [r1, #8]
 8005d4e:	f1b8 0f00 	cmp.w	r8, #0
 8005d52:	dd9c      	ble.n	8005c8e <__sflush_r+0x1a>
 8005d54:	6a21      	ldr	r1, [r4, #32]
 8005d56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d58:	4643      	mov	r3, r8
 8005d5a:	463a      	mov	r2, r7
 8005d5c:	4628      	mov	r0, r5
 8005d5e:	47b0      	blx	r6
 8005d60:	2800      	cmp	r0, #0
 8005d62:	dc06      	bgt.n	8005d72 <__sflush_r+0xfe>
 8005d64:	89a3      	ldrh	r3, [r4, #12]
 8005d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d6a:	81a3      	strh	r3, [r4, #12]
 8005d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d70:	e78e      	b.n	8005c90 <__sflush_r+0x1c>
 8005d72:	4407      	add	r7, r0
 8005d74:	eba8 0800 	sub.w	r8, r8, r0
 8005d78:	e7e9      	b.n	8005d4e <__sflush_r+0xda>
 8005d7a:	bf00      	nop
 8005d7c:	20400001 	.word	0x20400001

08005d80 <_fflush_r>:
 8005d80:	b538      	push	{r3, r4, r5, lr}
 8005d82:	690b      	ldr	r3, [r1, #16]
 8005d84:	4605      	mov	r5, r0
 8005d86:	460c      	mov	r4, r1
 8005d88:	b913      	cbnz	r3, 8005d90 <_fflush_r+0x10>
 8005d8a:	2500      	movs	r5, #0
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	bd38      	pop	{r3, r4, r5, pc}
 8005d90:	b118      	cbz	r0, 8005d9a <_fflush_r+0x1a>
 8005d92:	6983      	ldr	r3, [r0, #24]
 8005d94:	b90b      	cbnz	r3, 8005d9a <_fflush_r+0x1a>
 8005d96:	f000 f887 	bl	8005ea8 <__sinit>
 8005d9a:	4b14      	ldr	r3, [pc, #80]	; (8005dec <_fflush_r+0x6c>)
 8005d9c:	429c      	cmp	r4, r3
 8005d9e:	d11b      	bne.n	8005dd8 <_fflush_r+0x58>
 8005da0:	686c      	ldr	r4, [r5, #4]
 8005da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d0ef      	beq.n	8005d8a <_fflush_r+0xa>
 8005daa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005dac:	07d0      	lsls	r0, r2, #31
 8005dae:	d404      	bmi.n	8005dba <_fflush_r+0x3a>
 8005db0:	0599      	lsls	r1, r3, #22
 8005db2:	d402      	bmi.n	8005dba <_fflush_r+0x3a>
 8005db4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005db6:	f000 f915 	bl	8005fe4 <__retarget_lock_acquire_recursive>
 8005dba:	4628      	mov	r0, r5
 8005dbc:	4621      	mov	r1, r4
 8005dbe:	f7ff ff59 	bl	8005c74 <__sflush_r>
 8005dc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005dc4:	07da      	lsls	r2, r3, #31
 8005dc6:	4605      	mov	r5, r0
 8005dc8:	d4e0      	bmi.n	8005d8c <_fflush_r+0xc>
 8005dca:	89a3      	ldrh	r3, [r4, #12]
 8005dcc:	059b      	lsls	r3, r3, #22
 8005dce:	d4dd      	bmi.n	8005d8c <_fflush_r+0xc>
 8005dd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dd2:	f000 f908 	bl	8005fe6 <__retarget_lock_release_recursive>
 8005dd6:	e7d9      	b.n	8005d8c <_fflush_r+0xc>
 8005dd8:	4b05      	ldr	r3, [pc, #20]	; (8005df0 <_fflush_r+0x70>)
 8005dda:	429c      	cmp	r4, r3
 8005ddc:	d101      	bne.n	8005de2 <_fflush_r+0x62>
 8005dde:	68ac      	ldr	r4, [r5, #8]
 8005de0:	e7df      	b.n	8005da2 <_fflush_r+0x22>
 8005de2:	4b04      	ldr	r3, [pc, #16]	; (8005df4 <_fflush_r+0x74>)
 8005de4:	429c      	cmp	r4, r3
 8005de6:	bf08      	it	eq
 8005de8:	68ec      	ldreq	r4, [r5, #12]
 8005dea:	e7da      	b.n	8005da2 <_fflush_r+0x22>
 8005dec:	080061f4 	.word	0x080061f4
 8005df0:	08006214 	.word	0x08006214
 8005df4:	080061d4 	.word	0x080061d4

08005df8 <std>:
 8005df8:	2300      	movs	r3, #0
 8005dfa:	b510      	push	{r4, lr}
 8005dfc:	4604      	mov	r4, r0
 8005dfe:	e9c0 3300 	strd	r3, r3, [r0]
 8005e02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e06:	6083      	str	r3, [r0, #8]
 8005e08:	8181      	strh	r1, [r0, #12]
 8005e0a:	6643      	str	r3, [r0, #100]	; 0x64
 8005e0c:	81c2      	strh	r2, [r0, #14]
 8005e0e:	6183      	str	r3, [r0, #24]
 8005e10:	4619      	mov	r1, r3
 8005e12:	2208      	movs	r2, #8
 8005e14:	305c      	adds	r0, #92	; 0x5c
 8005e16:	f7ff fd6f 	bl	80058f8 <memset>
 8005e1a:	4b05      	ldr	r3, [pc, #20]	; (8005e30 <std+0x38>)
 8005e1c:	6263      	str	r3, [r4, #36]	; 0x24
 8005e1e:	4b05      	ldr	r3, [pc, #20]	; (8005e34 <std+0x3c>)
 8005e20:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e22:	4b05      	ldr	r3, [pc, #20]	; (8005e38 <std+0x40>)
 8005e24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e26:	4b05      	ldr	r3, [pc, #20]	; (8005e3c <std+0x44>)
 8005e28:	6224      	str	r4, [r4, #32]
 8005e2a:	6323      	str	r3, [r4, #48]	; 0x30
 8005e2c:	bd10      	pop	{r4, pc}
 8005e2e:	bf00      	nop
 8005e30:	0800604d 	.word	0x0800604d
 8005e34:	0800606f 	.word	0x0800606f
 8005e38:	080060a7 	.word	0x080060a7
 8005e3c:	080060cb 	.word	0x080060cb

08005e40 <_cleanup_r>:
 8005e40:	4901      	ldr	r1, [pc, #4]	; (8005e48 <_cleanup_r+0x8>)
 8005e42:	f000 b8af 	b.w	8005fa4 <_fwalk_reent>
 8005e46:	bf00      	nop
 8005e48:	08005d81 	.word	0x08005d81

08005e4c <__sfmoreglue>:
 8005e4c:	b570      	push	{r4, r5, r6, lr}
 8005e4e:	2268      	movs	r2, #104	; 0x68
 8005e50:	1e4d      	subs	r5, r1, #1
 8005e52:	4355      	muls	r5, r2
 8005e54:	460e      	mov	r6, r1
 8005e56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005e5a:	f7ff fdc1 	bl	80059e0 <_malloc_r>
 8005e5e:	4604      	mov	r4, r0
 8005e60:	b140      	cbz	r0, 8005e74 <__sfmoreglue+0x28>
 8005e62:	2100      	movs	r1, #0
 8005e64:	e9c0 1600 	strd	r1, r6, [r0]
 8005e68:	300c      	adds	r0, #12
 8005e6a:	60a0      	str	r0, [r4, #8]
 8005e6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005e70:	f7ff fd42 	bl	80058f8 <memset>
 8005e74:	4620      	mov	r0, r4
 8005e76:	bd70      	pop	{r4, r5, r6, pc}

08005e78 <__sfp_lock_acquire>:
 8005e78:	4801      	ldr	r0, [pc, #4]	; (8005e80 <__sfp_lock_acquire+0x8>)
 8005e7a:	f000 b8b3 	b.w	8005fe4 <__retarget_lock_acquire_recursive>
 8005e7e:	bf00      	nop
 8005e80:	200005cd 	.word	0x200005cd

08005e84 <__sfp_lock_release>:
 8005e84:	4801      	ldr	r0, [pc, #4]	; (8005e8c <__sfp_lock_release+0x8>)
 8005e86:	f000 b8ae 	b.w	8005fe6 <__retarget_lock_release_recursive>
 8005e8a:	bf00      	nop
 8005e8c:	200005cd 	.word	0x200005cd

08005e90 <__sinit_lock_acquire>:
 8005e90:	4801      	ldr	r0, [pc, #4]	; (8005e98 <__sinit_lock_acquire+0x8>)
 8005e92:	f000 b8a7 	b.w	8005fe4 <__retarget_lock_acquire_recursive>
 8005e96:	bf00      	nop
 8005e98:	200005ce 	.word	0x200005ce

08005e9c <__sinit_lock_release>:
 8005e9c:	4801      	ldr	r0, [pc, #4]	; (8005ea4 <__sinit_lock_release+0x8>)
 8005e9e:	f000 b8a2 	b.w	8005fe6 <__retarget_lock_release_recursive>
 8005ea2:	bf00      	nop
 8005ea4:	200005ce 	.word	0x200005ce

08005ea8 <__sinit>:
 8005ea8:	b510      	push	{r4, lr}
 8005eaa:	4604      	mov	r4, r0
 8005eac:	f7ff fff0 	bl	8005e90 <__sinit_lock_acquire>
 8005eb0:	69a3      	ldr	r3, [r4, #24]
 8005eb2:	b11b      	cbz	r3, 8005ebc <__sinit+0x14>
 8005eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005eb8:	f7ff bff0 	b.w	8005e9c <__sinit_lock_release>
 8005ebc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005ec0:	6523      	str	r3, [r4, #80]	; 0x50
 8005ec2:	4b13      	ldr	r3, [pc, #76]	; (8005f10 <__sinit+0x68>)
 8005ec4:	4a13      	ldr	r2, [pc, #76]	; (8005f14 <__sinit+0x6c>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	62a2      	str	r2, [r4, #40]	; 0x28
 8005eca:	42a3      	cmp	r3, r4
 8005ecc:	bf04      	itt	eq
 8005ece:	2301      	moveq	r3, #1
 8005ed0:	61a3      	streq	r3, [r4, #24]
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	f000 f820 	bl	8005f18 <__sfp>
 8005ed8:	6060      	str	r0, [r4, #4]
 8005eda:	4620      	mov	r0, r4
 8005edc:	f000 f81c 	bl	8005f18 <__sfp>
 8005ee0:	60a0      	str	r0, [r4, #8]
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	f000 f818 	bl	8005f18 <__sfp>
 8005ee8:	2200      	movs	r2, #0
 8005eea:	60e0      	str	r0, [r4, #12]
 8005eec:	2104      	movs	r1, #4
 8005eee:	6860      	ldr	r0, [r4, #4]
 8005ef0:	f7ff ff82 	bl	8005df8 <std>
 8005ef4:	68a0      	ldr	r0, [r4, #8]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	2109      	movs	r1, #9
 8005efa:	f7ff ff7d 	bl	8005df8 <std>
 8005efe:	68e0      	ldr	r0, [r4, #12]
 8005f00:	2202      	movs	r2, #2
 8005f02:	2112      	movs	r1, #18
 8005f04:	f7ff ff78 	bl	8005df8 <std>
 8005f08:	2301      	movs	r3, #1
 8005f0a:	61a3      	str	r3, [r4, #24]
 8005f0c:	e7d2      	b.n	8005eb4 <__sinit+0xc>
 8005f0e:	bf00      	nop
 8005f10:	080061d0 	.word	0x080061d0
 8005f14:	08005e41 	.word	0x08005e41

08005f18 <__sfp>:
 8005f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f1a:	4607      	mov	r7, r0
 8005f1c:	f7ff ffac 	bl	8005e78 <__sfp_lock_acquire>
 8005f20:	4b1e      	ldr	r3, [pc, #120]	; (8005f9c <__sfp+0x84>)
 8005f22:	681e      	ldr	r6, [r3, #0]
 8005f24:	69b3      	ldr	r3, [r6, #24]
 8005f26:	b913      	cbnz	r3, 8005f2e <__sfp+0x16>
 8005f28:	4630      	mov	r0, r6
 8005f2a:	f7ff ffbd 	bl	8005ea8 <__sinit>
 8005f2e:	3648      	adds	r6, #72	; 0x48
 8005f30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005f34:	3b01      	subs	r3, #1
 8005f36:	d503      	bpl.n	8005f40 <__sfp+0x28>
 8005f38:	6833      	ldr	r3, [r6, #0]
 8005f3a:	b30b      	cbz	r3, 8005f80 <__sfp+0x68>
 8005f3c:	6836      	ldr	r6, [r6, #0]
 8005f3e:	e7f7      	b.n	8005f30 <__sfp+0x18>
 8005f40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005f44:	b9d5      	cbnz	r5, 8005f7c <__sfp+0x64>
 8005f46:	4b16      	ldr	r3, [pc, #88]	; (8005fa0 <__sfp+0x88>)
 8005f48:	60e3      	str	r3, [r4, #12]
 8005f4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005f4e:	6665      	str	r5, [r4, #100]	; 0x64
 8005f50:	f000 f847 	bl	8005fe2 <__retarget_lock_init_recursive>
 8005f54:	f7ff ff96 	bl	8005e84 <__sfp_lock_release>
 8005f58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005f5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005f60:	6025      	str	r5, [r4, #0]
 8005f62:	61a5      	str	r5, [r4, #24]
 8005f64:	2208      	movs	r2, #8
 8005f66:	4629      	mov	r1, r5
 8005f68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005f6c:	f7ff fcc4 	bl	80058f8 <memset>
 8005f70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005f74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005f78:	4620      	mov	r0, r4
 8005f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f7c:	3468      	adds	r4, #104	; 0x68
 8005f7e:	e7d9      	b.n	8005f34 <__sfp+0x1c>
 8005f80:	2104      	movs	r1, #4
 8005f82:	4638      	mov	r0, r7
 8005f84:	f7ff ff62 	bl	8005e4c <__sfmoreglue>
 8005f88:	4604      	mov	r4, r0
 8005f8a:	6030      	str	r0, [r6, #0]
 8005f8c:	2800      	cmp	r0, #0
 8005f8e:	d1d5      	bne.n	8005f3c <__sfp+0x24>
 8005f90:	f7ff ff78 	bl	8005e84 <__sfp_lock_release>
 8005f94:	230c      	movs	r3, #12
 8005f96:	603b      	str	r3, [r7, #0]
 8005f98:	e7ee      	b.n	8005f78 <__sfp+0x60>
 8005f9a:	bf00      	nop
 8005f9c:	080061d0 	.word	0x080061d0
 8005fa0:	ffff0001 	.word	0xffff0001

08005fa4 <_fwalk_reent>:
 8005fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fa8:	4606      	mov	r6, r0
 8005faa:	4688      	mov	r8, r1
 8005fac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005fb0:	2700      	movs	r7, #0
 8005fb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005fb6:	f1b9 0901 	subs.w	r9, r9, #1
 8005fba:	d505      	bpl.n	8005fc8 <_fwalk_reent+0x24>
 8005fbc:	6824      	ldr	r4, [r4, #0]
 8005fbe:	2c00      	cmp	r4, #0
 8005fc0:	d1f7      	bne.n	8005fb2 <_fwalk_reent+0xe>
 8005fc2:	4638      	mov	r0, r7
 8005fc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fc8:	89ab      	ldrh	r3, [r5, #12]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d907      	bls.n	8005fde <_fwalk_reent+0x3a>
 8005fce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	d003      	beq.n	8005fde <_fwalk_reent+0x3a>
 8005fd6:	4629      	mov	r1, r5
 8005fd8:	4630      	mov	r0, r6
 8005fda:	47c0      	blx	r8
 8005fdc:	4307      	orrs	r7, r0
 8005fde:	3568      	adds	r5, #104	; 0x68
 8005fe0:	e7e9      	b.n	8005fb6 <_fwalk_reent+0x12>

08005fe2 <__retarget_lock_init_recursive>:
 8005fe2:	4770      	bx	lr

08005fe4 <__retarget_lock_acquire_recursive>:
 8005fe4:	4770      	bx	lr

08005fe6 <__retarget_lock_release_recursive>:
 8005fe6:	4770      	bx	lr

08005fe8 <__swhatbuf_r>:
 8005fe8:	b570      	push	{r4, r5, r6, lr}
 8005fea:	460e      	mov	r6, r1
 8005fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ff0:	2900      	cmp	r1, #0
 8005ff2:	b096      	sub	sp, #88	; 0x58
 8005ff4:	4614      	mov	r4, r2
 8005ff6:	461d      	mov	r5, r3
 8005ff8:	da08      	bge.n	800600c <__swhatbuf_r+0x24>
 8005ffa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	602a      	str	r2, [r5, #0]
 8006002:	061a      	lsls	r2, r3, #24
 8006004:	d410      	bmi.n	8006028 <__swhatbuf_r+0x40>
 8006006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800600a:	e00e      	b.n	800602a <__swhatbuf_r+0x42>
 800600c:	466a      	mov	r2, sp
 800600e:	f000 f883 	bl	8006118 <_fstat_r>
 8006012:	2800      	cmp	r0, #0
 8006014:	dbf1      	blt.n	8005ffa <__swhatbuf_r+0x12>
 8006016:	9a01      	ldr	r2, [sp, #4]
 8006018:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800601c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006020:	425a      	negs	r2, r3
 8006022:	415a      	adcs	r2, r3
 8006024:	602a      	str	r2, [r5, #0]
 8006026:	e7ee      	b.n	8006006 <__swhatbuf_r+0x1e>
 8006028:	2340      	movs	r3, #64	; 0x40
 800602a:	2000      	movs	r0, #0
 800602c:	6023      	str	r3, [r4, #0]
 800602e:	b016      	add	sp, #88	; 0x58
 8006030:	bd70      	pop	{r4, r5, r6, pc}
	...

08006034 <__malloc_lock>:
 8006034:	4801      	ldr	r0, [pc, #4]	; (800603c <__malloc_lock+0x8>)
 8006036:	f7ff bfd5 	b.w	8005fe4 <__retarget_lock_acquire_recursive>
 800603a:	bf00      	nop
 800603c:	200005cc 	.word	0x200005cc

08006040 <__malloc_unlock>:
 8006040:	4801      	ldr	r0, [pc, #4]	; (8006048 <__malloc_unlock+0x8>)
 8006042:	f7ff bfd0 	b.w	8005fe6 <__retarget_lock_release_recursive>
 8006046:	bf00      	nop
 8006048:	200005cc 	.word	0x200005cc

0800604c <__sread>:
 800604c:	b510      	push	{r4, lr}
 800604e:	460c      	mov	r4, r1
 8006050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006054:	f000 f884 	bl	8006160 <_read_r>
 8006058:	2800      	cmp	r0, #0
 800605a:	bfab      	itete	ge
 800605c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800605e:	89a3      	ldrhlt	r3, [r4, #12]
 8006060:	181b      	addge	r3, r3, r0
 8006062:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006066:	bfac      	ite	ge
 8006068:	6563      	strge	r3, [r4, #84]	; 0x54
 800606a:	81a3      	strhlt	r3, [r4, #12]
 800606c:	bd10      	pop	{r4, pc}

0800606e <__swrite>:
 800606e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006072:	461f      	mov	r7, r3
 8006074:	898b      	ldrh	r3, [r1, #12]
 8006076:	05db      	lsls	r3, r3, #23
 8006078:	4605      	mov	r5, r0
 800607a:	460c      	mov	r4, r1
 800607c:	4616      	mov	r6, r2
 800607e:	d505      	bpl.n	800608c <__swrite+0x1e>
 8006080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006084:	2302      	movs	r3, #2
 8006086:	2200      	movs	r2, #0
 8006088:	f000 f858 	bl	800613c <_lseek_r>
 800608c:	89a3      	ldrh	r3, [r4, #12]
 800608e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006092:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006096:	81a3      	strh	r3, [r4, #12]
 8006098:	4632      	mov	r2, r6
 800609a:	463b      	mov	r3, r7
 800609c:	4628      	mov	r0, r5
 800609e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060a2:	f000 b817 	b.w	80060d4 <_write_r>

080060a6 <__sseek>:
 80060a6:	b510      	push	{r4, lr}
 80060a8:	460c      	mov	r4, r1
 80060aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060ae:	f000 f845 	bl	800613c <_lseek_r>
 80060b2:	1c43      	adds	r3, r0, #1
 80060b4:	89a3      	ldrh	r3, [r4, #12]
 80060b6:	bf15      	itete	ne
 80060b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80060ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80060be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80060c2:	81a3      	strheq	r3, [r4, #12]
 80060c4:	bf18      	it	ne
 80060c6:	81a3      	strhne	r3, [r4, #12]
 80060c8:	bd10      	pop	{r4, pc}

080060ca <__sclose>:
 80060ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060ce:	f000 b813 	b.w	80060f8 <_close_r>
	...

080060d4 <_write_r>:
 80060d4:	b538      	push	{r3, r4, r5, lr}
 80060d6:	4d07      	ldr	r5, [pc, #28]	; (80060f4 <_write_r+0x20>)
 80060d8:	4604      	mov	r4, r0
 80060da:	4608      	mov	r0, r1
 80060dc:	4611      	mov	r1, r2
 80060de:	2200      	movs	r2, #0
 80060e0:	602a      	str	r2, [r5, #0]
 80060e2:	461a      	mov	r2, r3
 80060e4:	f7fa fd5f 	bl	8000ba6 <_write>
 80060e8:	1c43      	adds	r3, r0, #1
 80060ea:	d102      	bne.n	80060f2 <_write_r+0x1e>
 80060ec:	682b      	ldr	r3, [r5, #0]
 80060ee:	b103      	cbz	r3, 80060f2 <_write_r+0x1e>
 80060f0:	6023      	str	r3, [r4, #0]
 80060f2:	bd38      	pop	{r3, r4, r5, pc}
 80060f4:	200005d0 	.word	0x200005d0

080060f8 <_close_r>:
 80060f8:	b538      	push	{r3, r4, r5, lr}
 80060fa:	4d06      	ldr	r5, [pc, #24]	; (8006114 <_close_r+0x1c>)
 80060fc:	2300      	movs	r3, #0
 80060fe:	4604      	mov	r4, r0
 8006100:	4608      	mov	r0, r1
 8006102:	602b      	str	r3, [r5, #0]
 8006104:	f7fa fd6b 	bl	8000bde <_close>
 8006108:	1c43      	adds	r3, r0, #1
 800610a:	d102      	bne.n	8006112 <_close_r+0x1a>
 800610c:	682b      	ldr	r3, [r5, #0]
 800610e:	b103      	cbz	r3, 8006112 <_close_r+0x1a>
 8006110:	6023      	str	r3, [r4, #0]
 8006112:	bd38      	pop	{r3, r4, r5, pc}
 8006114:	200005d0 	.word	0x200005d0

08006118 <_fstat_r>:
 8006118:	b538      	push	{r3, r4, r5, lr}
 800611a:	4d07      	ldr	r5, [pc, #28]	; (8006138 <_fstat_r+0x20>)
 800611c:	2300      	movs	r3, #0
 800611e:	4604      	mov	r4, r0
 8006120:	4608      	mov	r0, r1
 8006122:	4611      	mov	r1, r2
 8006124:	602b      	str	r3, [r5, #0]
 8006126:	f7fa fd66 	bl	8000bf6 <_fstat>
 800612a:	1c43      	adds	r3, r0, #1
 800612c:	d102      	bne.n	8006134 <_fstat_r+0x1c>
 800612e:	682b      	ldr	r3, [r5, #0]
 8006130:	b103      	cbz	r3, 8006134 <_fstat_r+0x1c>
 8006132:	6023      	str	r3, [r4, #0]
 8006134:	bd38      	pop	{r3, r4, r5, pc}
 8006136:	bf00      	nop
 8006138:	200005d0 	.word	0x200005d0

0800613c <_lseek_r>:
 800613c:	b538      	push	{r3, r4, r5, lr}
 800613e:	4d07      	ldr	r5, [pc, #28]	; (800615c <_lseek_r+0x20>)
 8006140:	4604      	mov	r4, r0
 8006142:	4608      	mov	r0, r1
 8006144:	4611      	mov	r1, r2
 8006146:	2200      	movs	r2, #0
 8006148:	602a      	str	r2, [r5, #0]
 800614a:	461a      	mov	r2, r3
 800614c:	f7fa fd63 	bl	8000c16 <_lseek>
 8006150:	1c43      	adds	r3, r0, #1
 8006152:	d102      	bne.n	800615a <_lseek_r+0x1e>
 8006154:	682b      	ldr	r3, [r5, #0]
 8006156:	b103      	cbz	r3, 800615a <_lseek_r+0x1e>
 8006158:	6023      	str	r3, [r4, #0]
 800615a:	bd38      	pop	{r3, r4, r5, pc}
 800615c:	200005d0 	.word	0x200005d0

08006160 <_read_r>:
 8006160:	b538      	push	{r3, r4, r5, lr}
 8006162:	4d07      	ldr	r5, [pc, #28]	; (8006180 <_read_r+0x20>)
 8006164:	4604      	mov	r4, r0
 8006166:	4608      	mov	r0, r1
 8006168:	4611      	mov	r1, r2
 800616a:	2200      	movs	r2, #0
 800616c:	602a      	str	r2, [r5, #0]
 800616e:	461a      	mov	r2, r3
 8006170:	f7fa fcfc 	bl	8000b6c <_read>
 8006174:	1c43      	adds	r3, r0, #1
 8006176:	d102      	bne.n	800617e <_read_r+0x1e>
 8006178:	682b      	ldr	r3, [r5, #0]
 800617a:	b103      	cbz	r3, 800617e <_read_r+0x1e>
 800617c:	6023      	str	r3, [r4, #0]
 800617e:	bd38      	pop	{r3, r4, r5, pc}
 8006180:	200005d0 	.word	0x200005d0

08006184 <_init>:
 8006184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006186:	bf00      	nop
 8006188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800618a:	bc08      	pop	{r3}
 800618c:	469e      	mov	lr, r3
 800618e:	4770      	bx	lr

08006190 <_fini>:
 8006190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006192:	bf00      	nop
 8006194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006196:	bc08      	pop	{r3}
 8006198:	469e      	mov	lr, r3
 800619a:	4770      	bx	lr
